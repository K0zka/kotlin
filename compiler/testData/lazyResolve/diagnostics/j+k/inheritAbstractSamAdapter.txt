package 

public /*synthesized*/ fun A(/*0*/ function: (java.lang.Runnable?) -> kotlin.Unit): A

public trait A : java.lang.Object {
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
    public final /*synthesized*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
    public abstract fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
}

public trait B : A {
    public final /*synthesized*/ fun bar(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
    public abstract fun bar(/*0*/ r: java.lang.Runnable?): kotlin.Unit
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
    public abstract override /*1*/ /*fake_override*/ fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
}

internal final class C : B {
    public constructor C()
    public final override /*1*/ /*fake_override*/ fun bar(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
    public open override /*1*/ fun bar(/*0*/ r: java.lang.Runnable?): kotlin.Unit
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun foo(/*0*/ r: (() -> kotlin.Unit)?): kotlin.Unit
    public open override /*1*/ fun foo(/*0*/ r: java.lang.Runnable?): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
}
