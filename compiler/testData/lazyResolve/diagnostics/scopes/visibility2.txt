package 

package a {
    private fun foo(): kotlin.Unit
    internal fun makeA(): a.A
    
    private open class A {
        public constructor A()
        internal final fun bar(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
    
    private object PO {
        private constructor PO()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        
        public class object <class-object-for-PO> : a.PO {
            private constructor <class-object-for-PO>()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}

package b {
    internal fun test(): kotlin.Unit
    
    internal final class B : a.A {
        public constructor B()
        invisible_fake abstract override /*1*/ /*fake_override*/ fun bar(): kotlin.Unit
        invisible_fake abstract override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        invisible_fake abstract override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        invisible_fake abstract override /*1*/ /*fake_override*/ fun toString(): kotlin.String
    }
    
    internal final class NewClass : java.util.ArrayList<java.lang.Integer> {
        public constructor NewClass()
        protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: java.lang.Integer): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: java.lang.Integer): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<java.lang.Integer>): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<java.lang.Integer>): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun ensureCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun get(/*0*/ index: kotlin.Int): java.lang.Integer
        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<java.lang.Integer>
        public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<java.lang.Integer>
        public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<java.lang.Integer>
        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): java.lang.Integer
        public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: java.lang.Integer): java.lang.Integer
        public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<java.lang.Integer>
        public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
        public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
        public open override /*1*/ fun toString(): kotlin.String
        public open override /*1*/ /*fake_override*/ fun trimToSize(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
    }
    
    internal final class Q {
        public constructor Q()
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        
        internal final class W {
            public constructor W()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            internal final fun foo(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
    }
}
