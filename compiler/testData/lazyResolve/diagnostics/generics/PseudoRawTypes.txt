package 

package test {
    internal fun foo(/*0*/ u: test.Usage): kotlin.Unit
    
    public open class Usage : java.lang.Object {
        public constructor Usage()
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
        public/*package*/ open fun foo(/*0*/ c: kotlin.Collection<kotlin.Any?>?): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
    }
}
