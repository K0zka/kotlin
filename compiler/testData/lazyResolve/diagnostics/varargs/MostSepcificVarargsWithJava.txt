package 

internal fun main(/*0*/ j: C, /*1*/ s: kotlin.Array<kotlin.String?>): kotlin.Unit

public open class C : java.lang.Object {
    public constructor C()
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
    public/*package*/ open fun from(): kotlin.Unit
    public/*package*/ open fun from(/*0*/ vararg s: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
    public/*package*/ open fun from(/*0*/ s: kotlin.String?): kotlin.Unit
    public/*package*/ open fun from(/*0*/ s1: kotlin.String?, /*1*/ vararg s: kotlin.String? /*kotlin.Array<kotlin.String?>*/): kotlin.Unit
    public/*package*/ open fun from(/*0*/ s: kotlin.String?, /*1*/ s1: kotlin.String?): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
}
