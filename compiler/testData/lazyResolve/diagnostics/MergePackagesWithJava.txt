package 

package java {
    internal val c: java.lang.Class<out kotlin.Any?>? = null
    internal val </*0*/ T> kotlin.Array<T>?.length: kotlin.Int
    
    package java.awt {
        
        public open class AWTKeyStroke : java.io.Serializable {
            protected/*protected and package*/ constructor AWTKeyStroke()
            protected/*protected and package*/ constructor AWTKeyStroke(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Boolean)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getKeyChar(): kotlin.Char
            public final fun getKeyCode(): kotlin.Int
            public final fun getKeyEventType(): kotlin.Int
            public final fun getModifiers(): kotlin.Int
            public open override /*1*/ fun hashCode(): kotlin.Int
            public final fun isOnKeyRelease(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            protected/*protected and package*/ open fun readResolve(): kotlin.Any
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public abstract class Component : java.io.Serializable {
            protected/*protected and package*/ constructor Component()
            public/*package*/ final var accessibleContext: [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ final var appContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final var background: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final var backgroundEraseDisabled: kotlin.Boolean
            public/*package*/ final var bufferStrategy: [ERROR : Unresolved java classifier: BufferStrategy]?
            public/*package*/ final var componentListener: [ERROR : Unresolved java classifier: ComponentListener]?
            public/*package*/ final var componentOrientation: [ERROR : Unresolved java classifier: ComponentOrientation]?
            public/*package*/ final var cursor: [ERROR : Unresolved java classifier: Cursor]?
            public/*package*/ final var dropTarget: [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ final var enabled: kotlin.Boolean
            public/*package*/ final var eventCache: kotlin.Array<[ERROR : Unresolved java classifier: EventQueueItem]>?
            public/*package*/ final var eventMask: kotlin.Long
            public/*package*/ final var focusListener: [ERROR : Unresolved java classifier: FocusListener]?
            public/*package*/ final var focusTraversalKeys: kotlin.Array<kotlin.Set<kotlin.Any?>>?
            public/*package*/ final var font: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final var foreground: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final var graphicsConfig: [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final var height: kotlin.Int
            public/*package*/ final var hierarchyBoundsListener: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?
            public/*package*/ final var hierarchyListener: [ERROR : Unresolved java classifier: HierarchyListener]?
            public/*package*/ final var ignoreRepaint: kotlin.Boolean
            public/*package*/ final var inputMethodListener: [ERROR : Unresolved java classifier: InputMethodListener]?
            public/*package*/ final var isPacked: kotlin.Boolean
            public/*package*/ final var keyListener: [ERROR : Unresolved java classifier: KeyListener]?
            public/*package*/ final var locale: java.util.Locale?
            public/*package*/ final var maxSize: java.awt.Dimension?
            public/*package*/ final var maxSizeSet: kotlin.Boolean
            public/*package*/ final var minSize: java.awt.Dimension?
            public/*package*/ final var minSizeSet: kotlin.Boolean
            public/*package*/ final var mouseListener: [ERROR : Unresolved java classifier: MouseListener]?
            public/*package*/ final var mouseMotionListener: [ERROR : Unresolved java classifier: MouseMotionListener]?
            public/*package*/ final var mouseWheelListener: [ERROR : Unresolved java classifier: MouseWheelListener]?
            public/*package*/ final var nativeInLightFixer: java.awt.Component.NativeInLightFixer?
            public/*package*/ final var newEventsOnly: kotlin.Boolean
            public/*package*/ final var parent: java.awt.Container?
            public/*package*/ final var peer: [ERROR : Unresolved java classifier: ComponentPeer]?
            public/*package*/ final var peerFont: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final var popups: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final var prefSize: java.awt.Dimension?
            public/*package*/ final var prefSizeSet: kotlin.Boolean
            public/*package*/ final var visible: kotlin.Boolean
            public/*package*/ final var width: kotlin.Int
            public/*package*/ final var windowClosingException: java.lang.RuntimeException?
            public/*package*/ final var x: kotlin.Int
            public/*package*/ final var y: kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun action(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Any?): kotlin.Boolean
            public open fun add(/*0*/ p0: [ERROR : Unresolved java classifier: PopupMenu]): kotlin.Unit
            public open fun addComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open fun addHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open fun addHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            public open fun addInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open fun addKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open fun addMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open fun addMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open fun addMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open fun addNotify(): kotlin.Unit
            public open fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open fun addPropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public/*package*/ open fun adjustListeningChildrenOnParent(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun applyComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]): kotlin.Unit
            public/*package*/ open fun applyCompoundShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ open fun applyCurrentShape(): kotlin.Unit
            public/*package*/ final fun areBoundsValid(): kotlin.Boolean
            public open fun areFocusTraversalKeysSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ open fun areInputMethodsEnabled(): kotlin.Boolean
            public/*package*/ open fun autoProcessMouseWheel(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public/*package*/ final fun autoTransferFocus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun bounds(): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ final fun canBeFocusOwner(): kotlin.Boolean
            public/*package*/ open fun checkGD(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public open fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public/*package*/ final fun checkTreeLock(): kotlin.Unit
            public/*package*/ open fun checkWindowClosingException(): kotlin.Boolean
            public/*package*/ open fun clearCurrentFocusCycleRootOnHide(): kotlin.Unit
            public/*package*/ open fun clearMostRecentFocusOwnerOnHide(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            protected/*protected and package*/ open fun coalesceEvents(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?, /*1*/ p1: [ERROR : Unresolved java classifier: AWTEvent]?): [ERROR : Unresolved java classifier: AWTEvent]?
            public/*package*/ open fun constructComponentName(): kotlin.String?
            public open fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
            public open fun contains(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public/*package*/ open fun containsFocus(): kotlin.Boolean
            public/*package*/ open fun countHierarchyMembers(): kotlin.Int
            public/*package*/ open fun createBufferStrategy(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open fun createBufferStrategy(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
            public/*package*/ open fun createHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: java.awt.Component?, /*2*/ p2: java.awt.Container?, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Boolean): kotlin.Int
            public open fun createImage(/*0*/ p0: [ERROR : Unresolved java classifier: ImageProducer]?): [ERROR : Unresolved java classifier: Image]?
            public open fun createImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: Image]?
            public open fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: VolatileImage]?
            public open fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: ImageCapabilities]?): [ERROR : Unresolved java classifier: VolatileImage]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun deliverEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun disable(): kotlin.Unit
            protected/*protected and package*/ final fun disableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final fun dispatchEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]): kotlin.Unit
            public/*package*/ open fun dispatchEventImpl(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open fun dispatchMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Boolean
            public open fun doLayout(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun enable(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun enable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            protected/*protected and package*/ final fun enableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun enableInputMethods(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open fun eventEnabled(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Boolean
            public/*package*/ open fun eventTypeEnabled(/*0*/ p0: kotlin.Int): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public/*package*/ open fun findUnderMouseInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: PointerInfo]?): java.awt.Component?
            protected/*protected and package*/ open fun firePropertyChange(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Any?): kotlin.Unit
            protected/*protected and package*/ open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Char, /*2*/ p2: kotlin.Char): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Unit
            protected/*protected and package*/ open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Unit
            public open fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short): kotlin.Unit
            public/*package*/ final fun getAccessControlContext(): [ERROR : Unresolved java classifier: AccessControlContext]?
            public open fun getAccessibleContext(): [ERROR : Unresolved java classifier: AccessibleContext]
            public/*package*/ open fun getAccessibleIndexInParent(): kotlin.Int
            public/*package*/ open fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
            public open fun getAlignmentX(): kotlin.Float
            public open fun getAlignmentY(): kotlin.Float
            public/*package*/ open fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
            public open fun getBackground(): [ERROR : Unresolved java classifier: Color]?
            public open fun getBaseline(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun getBaselineResizeBehavior(): java.awt.Component.BaselineResizeBehavior
            public open fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]
            public open fun getBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]?): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ open fun getBoundsOp(): kotlin.Int
            public/*package*/ open fun getBufferStrategy(): [ERROR : Unresolved java classifier: BufferStrategy]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getColorModel(): [ERROR : Unresolved java classifier: ColorModel]?
            public open fun getComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open fun getComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public open fun getComponentListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ComponentListener]>?
            public open fun getComponentOrientation(): [ERROR : Unresolved java classifier: ComponentOrientation]?
            public/*package*/ open fun getContainer(): java.awt.Container?
            public/*package*/ open fun getContainingWindow(): java.awt.Window?
            public open fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
            public open fun getDropTarget(): [ERROR : Unresolved java classifier: DropTarget]?
            public open fun getFocusCycleRootAncestor(): java.awt.Container?
            public open fun getFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: FocusListener]>?
            public open fun getFocusTraversalKeys(/*0*/ p0: kotlin.Int): kotlin.MutableSet<java.awt.AWTKeyStroke>?
            public open fun getFocusTraversalKeysEnabled(): kotlin.Boolean
            public/*package*/ final fun getFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int): kotlin.MutableSet<out kotlin.Any?>?
            public open fun getFont(): [ERROR : Unresolved java classifier: Font]?
            public open fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]
            public/*package*/ final fun getFont_NoClientCode(): [ERROR : Unresolved java classifier: Font]?
            public open fun getForeground(): [ERROR : Unresolved java classifier: Color]?
            public open fun getGraphics(): [ERROR : Unresolved java classifier: Graphics]?
            public open fun getGraphicsConfiguration(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final fun getGraphicsConfiguration_NoClientCode(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final fun getGraphics_NoClientCode(): [ERROR : Unresolved java classifier: Graphics]?
            public open fun getHeight(): kotlin.Int
            public open fun getHierarchyBoundsListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyBoundsListener]>?
            public open fun getHierarchyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyListener]>?
            public open fun getIgnoreRepaint(): kotlin.Boolean
            public open fun getInputContext(): [ERROR : Unresolved java classifier: InputContext]?
            public open fun getInputMethodListeners(): kotlin.Array<[ERROR : Unresolved java classifier: InputMethodListener]>?
            public open fun getInputMethodRequests(): [ERROR : Unresolved java classifier: InputMethodRequests]?
            public open fun getKeyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: KeyListener]>?
            public open fun </*0*/ T : java.util.EventListener?> getListeners(/*0*/ p0: java.lang.Class<T>): kotlin.Array<T>?
            public open fun getLocale(): java.util.Locale
            public open fun getLocation(): [ERROR : Unresolved java classifier: Point]
            public open fun getLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]
            public open fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final fun getLocationOnScreen_NoTreeLock(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ open fun getLocationOnWindow(): [ERROR : Unresolved java classifier: Point]?
            public open fun getMaximumSize(): java.awt.Dimension?
            public open fun getMinimumSize(): java.awt.Dimension?
            public open fun getMouseListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseListener]>?
            public open fun getMouseMotionListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseMotionListener]>?
            public open fun getMousePosition(): [ERROR : Unresolved java classifier: Point]?
            public open fun getMouseWheelListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseWheelListener]>?
            public open fun getName(): kotlin.String
            public/*package*/ open fun getNativeContainer(): java.awt.Container?
            public/*package*/ final fun getNormalShape(): [ERROR : Unresolved java classifier: Region]?
            public/*package*/ open fun getObjectLock(): kotlin.Any?
            public/*package*/ open fun getOpaqueShape(): [ERROR : Unresolved java classifier: Region]?
            public open fun getParent(): java.awt.Container?
            public/*package*/ final fun getParent_NoClientCode(): java.awt.Container?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getPeer(): [ERROR : Unresolved java classifier: ComponentPeer]?
            public open fun getPreferredSize(): java.awt.Dimension?
            public open fun getPropertyChangeListeners(): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public open fun getPropertyChangeListeners(/*0*/ p0: kotlin.String?): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public/*package*/ final fun getSiblingIndexAbove(): kotlin.Int
            public/*package*/ final fun getSiblingIndexBelow(): kotlin.Int
            public open fun getSize(): java.awt.Dimension
            public open fun getSize(/*0*/ p0: java.awt.Dimension?): java.awt.Dimension
            public open fun getToolkit(): [ERROR : Unresolved java classifier: Toolkit]?
            public/*package*/ final fun getToolkitImpl(): [ERROR : Unresolved java classifier: Toolkit]?
            public final fun getTreeLock(): kotlin.Any
            public open fun getWidth(): kotlin.Int
            public open fun getX(): kotlin.Int
            public open fun getY(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun gotFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun handleEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public open fun hasFocus(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun hide(): kotlin.Unit
            public open fun imageUpdate(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public/*package*/ open fun initializeFocusTraversalKeys(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun inside(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public open fun invalidate(): kotlin.Unit
            public/*package*/ final fun invalidateIfValid(): kotlin.Unit
            public open fun isBackgroundSet(): kotlin.Boolean
            public/*package*/ final fun isCoalescingEnabled(): kotlin.Boolean
            public open fun isCursorSet(): kotlin.Boolean
            public open fun isDisplayable(): kotlin.Boolean
            public open fun isDoubleBuffered(): kotlin.Boolean
            public open fun isEnabled(): kotlin.Boolean
            public/*package*/ final fun isEnabledImpl(): kotlin.Boolean
            public open fun isFocusCycleRoot(/*0*/ p0: java.awt.Container?): kotlin.Boolean
            public open fun isFocusOwner(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun isFocusTraversable(): kotlin.Boolean
            public/*package*/ final fun isFocusTraversableOverridden(): kotlin.Boolean
            public open fun isFocusable(): kotlin.Boolean
            public open fun isFontSet(): kotlin.Boolean
            public open fun isForegroundSet(): kotlin.Boolean
            public open fun isLightweight(): kotlin.Boolean
            public open fun isMaximumSizeSet(): kotlin.Boolean
            public open fun isMinimumSizeSet(): kotlin.Boolean
            public/*package*/ final fun isMixingNeeded(): kotlin.Boolean
            public/*package*/ final fun isNonOpaqueForMixing(): kotlin.Boolean
            public open fun isOpaque(): kotlin.Boolean
            public open fun isPreferredSizeSet(): kotlin.Boolean
            public/*package*/ open fun isRecursivelyVisible(): kotlin.Boolean
            public/*package*/ open fun isSameOrAncestorOf(/*0*/ p0: java.awt.Component?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open fun isShowing(): kotlin.Boolean
            public open fun isValid(): kotlin.Boolean
            public open fun isVisible(): kotlin.Boolean
            public/*package*/ final fun isVisible_NoClientCode(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun keyDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun keyUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun layout(): kotlin.Unit
            public/*package*/ open fun lightweightPaint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open fun lightweightPrint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open fun list(): kotlin.Unit
            public open fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter], /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open fun list(/*0*/ p0: java.io.PrintStream, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun locate(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun location(): [ERROR : Unresolved java classifier: Point]
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun lostFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun minimumSize(): java.awt.Dimension?
            public/*package*/ open fun mixOnHiding(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ open fun mixOnReshaping(): kotlin.Unit
            public/*package*/ open fun mixOnShowing(): kotlin.Unit
            public/*package*/ open fun mixOnValidating(): kotlin.Unit
            public/*package*/ open fun mixOnZOrderChanging(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseDrag(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseEnter(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseExit(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseMove(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun mouseUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun move(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun nextFocus(): kotlin.Unit
            public/*package*/ open fun nextFocusHelper(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open fun numListening(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun paint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public open fun paintAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open fun paintHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open fun paramString(): kotlin.String
            public/*package*/ open fun pointRelativeToComponent(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun postEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public/*package*/ open fun postsOldMouseEvents(): kotlin.Boolean
            public/*package*/ open fun preNextFocusHelper(): java.awt.Component?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun preferredSize(): java.awt.Dimension?
            public open fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open fun print(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open fun printAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open fun printHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open fun processComponentEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
            protected/*protected and package*/ open fun processHierarchyBoundsEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processHierarchyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processInputMethodEvent(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodEvent]): kotlin.Unit
            protected/*protected and package*/ open fun processKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]): kotlin.Unit
            protected/*protected and package*/ open fun processMouseEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]): kotlin.Unit
            protected/*protected and package*/ open fun processMouseMotionEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processMouseWheelEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public open fun remove(/*0*/ p0: [ERROR : Unresolved java classifier: MenuComponent]?): kotlin.Unit
            public open fun removeComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open fun removeHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open fun removeHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            public open fun removeInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open fun removeKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open fun removeMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open fun removeMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open fun removeMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open fun removeNotify(): kotlin.Unit
            public open fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open fun removePropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open fun repaint(): kotlin.Unit
            public open fun repaint(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open fun repaint(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun repaint(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public open fun requestFocus(): kotlin.Unit
            public/*package*/ open fun requestFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Unit
            protected/*protected and package*/ open fun requestFocus(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open fun requestFocus(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ final fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public/*package*/ final fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public open fun requestFocusInWindow(): kotlin.Boolean
            public/*package*/ open fun requestFocusInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            protected/*protected and package*/ open fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ open fun resetGC(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun reshape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun resize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun resize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public open fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
            public open fun setBounds(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public/*package*/ open fun setBoundsOp(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]?): kotlin.Unit
            public open fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
            public open fun setDropTarget(/*0*/ p0: [ERROR : Unresolved java classifier: DropTarget]?): kotlin.Unit
            public open fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setFocusTraversalKeys(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open fun setFocusTraversalKeysEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final fun setFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open fun setFocusable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
            public open fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public/*package*/ open fun setGCFromPeer(): kotlin.Unit
            public open fun setIgnoreRepaint(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setLocale(/*0*/ p0: java.util.Locale?): kotlin.Unit
            public open fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
            public open fun setLocation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setMaximumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open fun setMinimumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open fun setName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun setPreferredSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            public open fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun show(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun show(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun size(): java.awt.Dimension
            public/*package*/ final fun subtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final fun subtractAndApplyShapeBelowMe(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public open fun transferFocus(): kotlin.Unit
            public open fun transferFocusBackward(): kotlin.Unit
            public open fun transferFocusUpCycle(): kotlin.Unit
            public open fun update(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public/*package*/ final fun updateCursorImmediately(): kotlin.Unit
            public open fun validate(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ open class AWTTreeLock : java.lang.Object {
                public/*package*/ constructor AWTTreeLock()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            protected/*protected and package*/ abstract inner class AccessibleAWTComponent : java.io.Serializable {
                protected/*protected and package*/ constructor AccessibleAWTComponent()
                protected/*protected and package*/ final var accessibleAWTComponentHandler: [ERROR : Unresolved java classifier: ComponentListener]?
                protected/*protected and package*/ final var accessibleAWTFocusHandler: [ERROR : Unresolved java classifier: FocusListener]?
                public open fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): [ERROR : Unresolved java classifier: Accessible]?
                public open fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
                public open fun getAccessibleChildrenCount(): kotlin.Int
                public open fun getAccessibleComponent(): [ERROR : Unresolved java classifier: AccessibleComponent]
                public open fun getAccessibleDescription(): kotlin.String?
                public open fun getAccessibleIndexInParent(): kotlin.Int
                public open fun getAccessibleName(): kotlin.String?
                public open fun getAccessibleParent(): [ERROR : Unresolved java classifier: Accessible]?
                public open fun getAccessibleRole(): [ERROR : Unresolved java classifier: AccessibleRole]
                public open fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]
                public open fun getBackground(): [ERROR : Unresolved java classifier: Color]?
                public open fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
                public open fun getFont(): [ERROR : Unresolved java classifier: Font]?
                public open fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]?
                public open fun getForeground(): [ERROR : Unresolved java classifier: Color]?
                public open fun getLocale(): java.util.Locale?
                public open fun getLocation(): [ERROR : Unresolved java classifier: Point]?
                public open fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
                public open fun getSize(): java.awt.Dimension?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open fun isEnabled(): kotlin.Boolean
                public open fun isFocusTraversable(): kotlin.Boolean
                public open fun isShowing(): kotlin.Boolean
                public open fun isVisible(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                public open fun requestFocus(): kotlin.Unit
                public open fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
                public open fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
                public open fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
                public open fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
                public open fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
                public open fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                protected/*protected and package*/ open inner class AccessibleAWTComponentHandler {
                    protected/*protected and package*/ constructor AccessibleAWTComponentHandler()
                    public open fun componentHidden(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]): kotlin.Unit
                    public open fun componentMoved(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]): kotlin.Unit
                    public open fun componentResized(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]): kotlin.Unit
                    public open fun componentShown(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                protected/*protected and package*/ open inner class AccessibleAWTFocusHandler {
                    protected/*protected and package*/ constructor AccessibleAWTFocusHandler()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open fun focusGained(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
                    public open fun focusLost(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }
            
            public final enum class BaselineResizeBehavior : kotlin.Enum<java.awt.Component.BaselineResizeBehavior> {
                private constructor BaselineResizeBehavior()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                
                public class object <class-object-for-BaselineResizeBehavior> {
                    private constructor <class-object-for-BaselineResizeBehavior>()
                    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.awt.Component.BaselineResizeBehavior
                    public final /*synthesized*/ fun values(): kotlin.Array<java.awt.Component.BaselineResizeBehavior>
                }
                
                public enum entry CENTER_OFFSET : java.awt.Component.BaselineResizeBehavior {
                    private constructor CENTER_OFFSET()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-CENTER_OFFSET> : java.awt.Component.BaselineResizeBehavior.CENTER_OFFSET {
                        private constructor <class-object-for-CENTER_OFFSET>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry CONSTANT_ASCENT : java.awt.Component.BaselineResizeBehavior {
                    private constructor CONSTANT_ASCENT()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-CONSTANT_ASCENT> : java.awt.Component.BaselineResizeBehavior.CONSTANT_ASCENT {
                        private constructor <class-object-for-CONSTANT_ASCENT>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry CONSTANT_DESCENT : java.awt.Component.BaselineResizeBehavior {
                    private constructor CONSTANT_DESCENT()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-CONSTANT_DESCENT> : java.awt.Component.BaselineResizeBehavior.CONSTANT_DESCENT {
                        private constructor <class-object-for-CONSTANT_DESCENT>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry OTHER : java.awt.Component.BaselineResizeBehavior {
                    private constructor OTHER()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-OTHER> : java.awt.Component.BaselineResizeBehavior.OTHER {
                        private constructor <class-object-for-OTHER>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
            }
            
            protected/*protected and package*/ open inner class BltBufferStrategy {
                protected/*protected and package*/ constructor BltBufferStrategy(/*0*/ p2: kotlin.Int, /*1*/ p3: [ERROR : Unresolved java classifier: BufferCapabilities]?)
                protected/*protected and package*/ final var backBuffers: kotlin.Array<[ERROR : Unresolved java classifier: VolatileImage]>?
                protected/*protected and package*/ final var caps: [ERROR : Unresolved java classifier: BufferCapabilities]?
                protected/*protected and package*/ final var height: kotlin.Int
                protected/*protected and package*/ final var validatedContents: kotlin.Boolean
                protected/*protected and package*/ final var width: kotlin.Int
                public open fun contentsLost(): kotlin.Boolean
                public open fun contentsRestored(): kotlin.Boolean
                protected/*protected and package*/ open fun createBackBuffers(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open fun dispose(): kotlin.Unit
                public/*package*/ open fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
                public open fun getCapabilities(): [ERROR : Unresolved java classifier: BufferCapabilities]?
                public open fun getDrawGraphics(): [ERROR : Unresolved java classifier: Graphics]?
                protected/*protected and package*/ open fun revalidate(): kotlin.Unit
                public/*package*/ open fun revalidate(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open fun show(): kotlin.Unit
                public/*package*/ open fun showSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            }
            
            private open inner class BltSubRegionBufferStrategy : java.awt.Component.BltBufferStrategy {
                protected/*protected and package*/ constructor BltSubRegionBufferStrategy(/*0*/ p2: kotlin.Int, /*1*/ p3: [ERROR : Unresolved java classifier: BufferCapabilities]?)
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var backBuffers: kotlin.Array<[ERROR : Unresolved java classifier: VolatileImage]>?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var caps: [ERROR : Unresolved java classifier: BufferCapabilities]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var height: kotlin.Int
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var validatedContents: kotlin.Boolean
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var width: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun contentsLost(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun contentsRestored(): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun createBackBuffers(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun dispose(): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
                public open override /*1*/ /*fake_override*/ fun getCapabilities(): [ERROR : Unresolved java classifier: BufferCapabilities]?
                public open override /*1*/ /*fake_override*/ fun getDrawGraphics(): [ERROR : Unresolved java classifier: Graphics]?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun revalidate(): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun revalidate(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun show(): kotlin.Unit
                public open fun show(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
                public open fun showIfNotLost(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Boolean
                public/*package*/ open override /*1*/ /*fake_override*/ fun showSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            }
            
            private open class DummyRequestFocusController {
                private constructor DummyRequestFocusController()
                public open fun acceptRequestFocus(/*0*/ p0: java.awt.Component?, /*1*/ p1: java.awt.Component?, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Boolean, /*4*/ p4: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            protected/*protected and package*/ open inner class FlipBufferStrategy {
                protected/*protected and package*/ constructor FlipBufferStrategy(/*0*/ p2: kotlin.Int, /*1*/ p3: [ERROR : Unresolved java classifier: BufferCapabilities]?)
                protected/*protected and package*/ final var caps: [ERROR : Unresolved java classifier: BufferCapabilities]?
                protected/*protected and package*/ final var drawBuffer: [ERROR : Unresolved java classifier: Image]?
                protected/*protected and package*/ final var drawVBuffer: [ERROR : Unresolved java classifier: VolatileImage]?
                public/*package*/ final var height: kotlin.Int
                protected/*protected and package*/ final var numBuffers: kotlin.Int
                protected/*protected and package*/ final var validatedContents: kotlin.Boolean
                public/*package*/ final var width: kotlin.Int
                public open fun contentsLost(): kotlin.Boolean
                public open fun contentsRestored(): kotlin.Boolean
                protected/*protected and package*/ open fun createBuffers(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
                protected/*protected and package*/ open fun destroyBuffers(): kotlin.Unit
                public open fun dispose(): kotlin.Unit
                protected/*protected and package*/ open fun flip(/*0*/ p0: [ERROR : Unresolved java classifier: FlipContents]?): kotlin.Unit
                public/*package*/ open fun flipSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: [ERROR : Unresolved java classifier: FlipContents]?): kotlin.Unit
                protected/*protected and package*/ open fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
                public open fun getCapabilities(): [ERROR : Unresolved java classifier: BufferCapabilities]?
                public open fun getDrawGraphics(): [ERROR : Unresolved java classifier: Graphics]?
                protected/*protected and package*/ open fun revalidate(): kotlin.Unit
                public/*package*/ open fun revalidate(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open fun show(): kotlin.Unit
                public/*package*/ open fun showSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            }
            
            private open inner class FlipSubRegionBufferStrategy : java.awt.Component.FlipBufferStrategy {
                protected/*protected and package*/ constructor FlipSubRegionBufferStrategy(/*0*/ p2: kotlin.Int, /*1*/ p3: [ERROR : Unresolved java classifier: BufferCapabilities]?)
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var caps: [ERROR : Unresolved java classifier: BufferCapabilities]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var drawBuffer: [ERROR : Unresolved java classifier: Image]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var drawVBuffer: [ERROR : Unresolved java classifier: VolatileImage]?
                public/*package*/ final override /*1*/ /*fake_override*/ var height: kotlin.Int
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var numBuffers: kotlin.Int
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var validatedContents: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var width: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun contentsLost(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun contentsRestored(): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun createBuffers(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun destroyBuffers(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun dispose(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun flip(/*0*/ p0: [ERROR : Unresolved java classifier: FlipContents]?): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun flipSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: [ERROR : Unresolved java classifier: FlipContents]?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
                public open override /*1*/ /*fake_override*/ fun getCapabilities(): [ERROR : Unresolved java classifier: BufferCapabilities]?
                public open override /*1*/ /*fake_override*/ fun getDrawGraphics(): [ERROR : Unresolved java classifier: Graphics]?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun revalidate(): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun revalidate(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun show(): kotlin.Unit
                public open fun show(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
                public open fun showIfNotLost(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Boolean
                public/*package*/ open override /*1*/ /*fake_override*/ fun showSubRegion(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ final inner class NativeInLightFixer {
                public/*package*/ constructor NativeInLightFixer()
                public/*package*/ final var lightParents: [ERROR : Unresolved java classifier: Vector]?
                public/*package*/ final var nativeHost: java.awt.Container?
                public open fun componentAdded(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]?): kotlin.Unit
                public open fun componentHidden(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
                public open fun componentMoved(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
                public open fun componentRemoved(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]?): kotlin.Unit
                public open fun componentResized(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
                public open fun componentShown(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun install(/*0*/ p0: java.awt.Container?): kotlin.Unit
                public/*package*/ open fun removeReferences(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ open fun uninstall(): kotlin.Unit
            }
            
            private open inner class ProxyCapabilities {
                private constructor ProxyCapabilities(/*0*/ p2: [ERROR : Unresolved java classifier: BufferCapabilities]?)
            }
            
            private open inner class SingleBufferStrategy {
                public constructor SingleBufferStrategy(/*0*/ p2: [ERROR : Unresolved java classifier: BufferCapabilities]?)
                public open fun contentsLost(): kotlin.Boolean
                public open fun contentsRestored(): kotlin.Boolean
                public open fun getCapabilities(): [ERROR : Unresolved java classifier: BufferCapabilities]?
                public open fun getDrawGraphics(): [ERROR : Unresolved java classifier: Graphics]?
                public open fun show(): kotlin.Unit
            }
        }
        
        public open class Container : java.awt.Component {
            public constructor Container()
            public/*package*/ final override /*1*/ /*fake_override*/ var accessibleContext: [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var appContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var background: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var backgroundEraseDisabled: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var bufferStrategy: [ERROR : Unresolved java classifier: BufferStrategy]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentListener: [ERROR : Unresolved java classifier: ComponentListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentOrientation: [ERROR : Unresolved java classifier: ComponentOrientation]?
            public/*package*/ final var containerListener: [ERROR : Unresolved java classifier: ContainerListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var cursor: [ERROR : Unresolved java classifier: Cursor]?
            public/*package*/ final var descendantsCount: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var dropTarget: [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ final override /*1*/ /*fake_override*/ var enabled: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var eventCache: kotlin.Array<[ERROR : Unresolved java classifier: EventQueueItem]>?
            public/*package*/ final override /*1*/ /*fake_override*/ var eventMask: kotlin.Long
            public/*package*/ final override /*1*/ /*fake_override*/ var focusListener: [ERROR : Unresolved java classifier: FocusListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var focusTraversalKeys: kotlin.Array<kotlin.Set<kotlin.Any?>>?
            public/*package*/ final override /*1*/ /*fake_override*/ var font: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var foreground: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var graphicsConfig: [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ var height: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyBoundsListener: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyListener: [ERROR : Unresolved java classifier: HierarchyListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var ignoreRepaint: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var inputMethodListener: [ERROR : Unresolved java classifier: InputMethodListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var isPacked: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var keyListener: [ERROR : Unresolved java classifier: KeyListener]?
            public/*package*/ final var layoutMgr: [ERROR : Unresolved java classifier: LayoutManager]?
            public/*package*/ final var listeningBoundsChildren: kotlin.Int
            public/*package*/ final var listeningChildren: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var locale: java.util.Locale?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var minSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var minSizeSet: kotlin.Boolean
            public/*package*/ final var modalAppContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final var modalComp: java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseListener: [ERROR : Unresolved java classifier: MouseListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseMotionListener: [ERROR : Unresolved java classifier: MouseMotionListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseWheelListener: [ERROR : Unresolved java classifier: MouseWheelListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var nativeInLightFixer: java.awt.Component.NativeInLightFixer?
            public/*package*/ final override /*1*/ /*fake_override*/ var newEventsOnly: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var parent: java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ var peer: [ERROR : Unresolved java classifier: ComponentPeer]?
            public/*package*/ final override /*1*/ /*fake_override*/ var peerFont: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var popups: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSizeSet: kotlin.Boolean
            public/*package*/ final var preserveBackgroundColor: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var visible: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var width: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var windowClosingException: java.lang.RuntimeException?
            public/*package*/ final override /*1*/ /*fake_override*/ var x: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var y: kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun action(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: [ERROR : Unresolved java classifier: PopupMenu]): kotlin.Unit
            public open fun add(/*0*/ p0: java.awt.Component): java.awt.Component
            public open fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public open fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): java.awt.Component
            public open fun add(/*0*/ p0: kotlin.String?, /*1*/ p1: java.awt.Component): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun addComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open fun addContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            protected/*protected and package*/ open fun addImpl(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun addNotify(): kotlin.Unit
            public open override /*1*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ fun addPropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public/*package*/ open fun adjustDecendantsOnParent(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open fun adjustDescendants(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open fun adjustListeningChildren(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustListeningChildrenOnParent(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun applyComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun applyCompoundShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun applyCurrentShape(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun areBoundsValid(): kotlin.Boolean
            public open override /*1*/ fun areFocusTraversalKeysSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun areInputMethodsEnabled(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun autoProcessMouseWheel(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun autoTransferFocus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun bounds(): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ final override /*1*/ /*fake_override*/ fun canBeFocusOwner(): kotlin.Boolean
            public/*package*/ open fun canContainFocusOwner(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public/*package*/ open override /*1*/ fun checkGD(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun checkTreeLock(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkWindowClosingException(): kotlin.Boolean
            public/*package*/ open override /*1*/ fun clearCurrentFocusCycleRootOnHide(): kotlin.Unit
            public/*package*/ open override /*1*/ fun clearMostRecentFocusOwnerOnHide(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun coalesceEvents(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?, /*1*/ p1: [ERROR : Unresolved java classifier: AWTEvent]?): [ERROR : Unresolved java classifier: AWTEvent]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun constructComponentName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ fun containsFocus(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun countComponents(): kotlin.Int
            public/*package*/ open override /*1*/ fun countHierarchyMembers(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
            public/*package*/ final fun createChildHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ fun createHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: java.awt.Component?, /*2*/ p2: java.awt.Container?, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Boolean): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: [ERROR : Unresolved java classifier: ImageProducer]?): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: VolatileImage]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: ImageCapabilities]?): [ERROR : Unresolved java classifier: VolatileImage]?
            public/*package*/ final fun decreaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun deliverEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun disable(): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun disableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]): kotlin.Unit
            public/*package*/ open override /*1*/ fun dispatchEventImpl(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open fun dispatchEventToSelf(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun dispatchMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Boolean
            public open override /*1*/ fun doLayout(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun enableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun enableInputMethods(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ fun eventEnabled(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun eventTypeEnabled(/*0*/ p0: kotlin.Int): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun findComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public/*package*/ final fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ final fun findComponentAtImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun findUnderMouseInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: PointerInfo]?): java.awt.Component?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Any?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Char, /*2*/ p2: kotlin.Char): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun getAccessControlContext(): [ERROR : Unresolved java classifier: AccessControlContext]?
            public/*package*/ open fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open fun getAccessibleChildrenCount(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getAccessibleContext(): [ERROR : Unresolved java classifier: AccessibleContext]
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
            public open override /*1*/ fun getAlignmentX(): kotlin.Float
            public open override /*1*/ fun getAlignmentY(): kotlin.Float
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getBaseline(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getBaselineResizeBehavior(): java.awt.Component.BaselineResizeBehavior
            public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]
            public open override /*1*/ /*fake_override*/ fun getBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]?): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBoundsOp(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBufferStrategy(): [ERROR : Unresolved java classifier: BufferStrategy]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getColorModel(): [ERROR : Unresolved java classifier: ColorModel]?
            public open fun getComponent(/*0*/ p0: kotlin.Int): java.awt.Component?
            public open override /*1*/ fun getComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open override /*1*/ fun getComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public open fun getComponentCount(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getComponentListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ComponentListener]>?
            public open override /*1*/ /*fake_override*/ fun getComponentOrientation(): [ERROR : Unresolved java classifier: ComponentOrientation]?
            public open fun getComponentZOrder(/*0*/ p0: java.awt.Component?): kotlin.Int
            public open fun getComponents(): kotlin.Array<java.awt.Component>?
            public/*package*/ final fun getComponents_NoClientCode(): kotlin.Array<java.awt.Component>?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getContainer(): java.awt.Container?
            public open fun getContainerListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ContainerListener]>?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getContainingWindow(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
            public open override /*1*/ /*fake_override*/ fun getDropTarget(): [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ open fun getDropTargetEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getFocusCycleRootAncestor(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: FocusListener]>?
            public open override /*1*/ fun getFocusTraversalKeys(/*0*/ p0: kotlin.Int): kotlin.MutableSet<java.awt.AWTKeyStroke>?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeysEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int): kotlin.MutableSet<out kotlin.Any?>?
            public open fun getFocusTraversalPolicy(): [ERROR : Unresolved java classifier: FocusTraversalPolicy]?
            public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFont_NoClientCode(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getGraphics(): [ERROR : Unresolved java classifier: Graphics]?
            public open override /*1*/ /*fake_override*/ fun getGraphicsConfiguration(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphicsConfiguration_NoClientCode(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphics_NoClientCode(): [ERROR : Unresolved java classifier: Graphics]?
            public/*package*/ open fun getHeavyweightContainer(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getHeight(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getHierarchyBoundsListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyBoundsListener]>?
            public open override /*1*/ /*fake_override*/ fun getHierarchyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyListener]>?
            public open override /*1*/ /*fake_override*/ fun getIgnoreRepaint(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun getInputContext(): [ERROR : Unresolved java classifier: InputContext]?
            public open override /*1*/ /*fake_override*/ fun getInputMethodListeners(): kotlin.Array<[ERROR : Unresolved java classifier: InputMethodListener]>?
            public open override /*1*/ /*fake_override*/ fun getInputMethodRequests(): [ERROR : Unresolved java classifier: InputMethodRequests]?
            public open fun getInsets(): [ERROR : Unresolved java classifier: Insets]
            public open override /*1*/ /*fake_override*/ fun getKeyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: KeyListener]>?
            public open fun getLayout(): [ERROR : Unresolved java classifier: LayoutManager]?
            public open override /*1*/ fun </*0*/ T : java.util.EventListener?> getListeners(/*0*/ p0: java.lang.Class<T>): kotlin.Array<T>?
            public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale
            public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getLocationOnScreen_NoTreeLock(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getLocationOnWindow(): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ fun getMaximumSize(): java.awt.Dimension?
            public open override /*1*/ fun getMinimumSize(): java.awt.Dimension?
            public/*package*/ open fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getMouseListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseListener]>?
            public open override /*1*/ /*fake_override*/ fun getMouseMotionListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseMotionListener]>?
            public open override /*1*/ /*fake_override*/ fun getMousePosition(): [ERROR : Unresolved java classifier: Point]?
            public open fun getMousePosition(/*0*/ p0: kotlin.Boolean): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMouseWheelListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseWheelListener]>?
            public open override /*1*/ /*fake_override*/ fun getName(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun getNativeContainer(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getNormalShape(): [ERROR : Unresolved java classifier: Region]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getObjectLock(): kotlin.Any?
            public/*package*/ final override /*1*/ fun getOpaqueShape(): [ERROR : Unresolved java classifier: Region]?
            public open override /*1*/ /*fake_override*/ fun getParent(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getParent_NoClientCode(): java.awt.Container?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getPeer(): [ERROR : Unresolved java classifier: ComponentPeer]?
            public open override /*1*/ fun getPreferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(/*0*/ p0: kotlin.String?): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexAbove(): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexBelow(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension
            public open override /*1*/ /*fake_override*/ fun getSize(/*0*/ p0: java.awt.Dimension?): java.awt.Dimension
            public open override /*1*/ /*fake_override*/ fun getToolkit(): [ERROR : Unresolved java classifier: Toolkit]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getToolkitImpl(): [ERROR : Unresolved java classifier: Toolkit]?
            public final override /*1*/ /*fake_override*/ fun getTreeLock(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun getWidth(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getX(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getY(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun gotFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun handleEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hasFocus(): kotlin.Boolean
            public/*package*/ final fun hasHeavyweightDescendants(): kotlin.Boolean
            public/*package*/ final fun hasLightweightDescendants(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun hide(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun imageUpdate(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public/*package*/ final fun increaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            public/*package*/ open override /*1*/ fun initializeFocusTraversalKeys(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun insets(): [ERROR : Unresolved java classifier: Insets]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun inside(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public open override /*1*/ fun invalidate(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun invalidateIfValid(): kotlin.Unit
            public/*package*/ open fun invalidateTree(): kotlin.Unit
            public open fun isAncestorOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isBackgroundSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isCoalescingEnabled(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isCursorSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDisplayable(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDoubleBuffered(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isEnabledImpl(): kotlin.Boolean
            public open fun isFocusCycleRoot(): kotlin.Boolean
            public open override /*1*/ fun isFocusCycleRoot(/*0*/ p0: java.awt.Container?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusOwner(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isFocusTraversableOverridden(): kotlin.Boolean
            public final fun isFocusTraversalPolicyProvider(): kotlin.Boolean
            public open fun isFocusTraversalPolicySet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusable(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFontSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isForegroundSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isLightweight(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMaximumSizeSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMinimumSizeSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isMixingNeeded(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isNonOpaqueForMixing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isOpaque(): kotlin.Boolean
            public/*package*/ open fun isParentOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isPreferredSizeSet(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isRecursivelyVisible(): kotlin.Boolean
            public/*package*/ open override /*1*/ fun isSameOrAncestorOf(/*0*/ p0: java.awt.Component?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isValid(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isVisible_NoClientCode(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun layout(): kotlin.Unit
            public/*package*/ open override /*1*/ fun lightweightPaint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun lightweightPrint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open override /*1*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter], /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open override /*1*/ fun list(/*0*/ p0: java.io.PrintStream, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun locate(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun location(): [ERROR : Unresolved java classifier: Point]
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun lostFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun minimumSize(): java.awt.Dimension?
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnHiding(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ open override /*1*/ fun mixOnReshaping(): kotlin.Unit
            public/*package*/ open override /*1*/ fun mixOnShowing(): kotlin.Unit
            public/*package*/ open override /*1*/ fun mixOnValidating(): kotlin.Unit
            public/*package*/ open override /*1*/ fun mixOnZOrderChanging(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDrag(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseEnter(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseExit(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseMove(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun move(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun nextFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ fun nextFocusHelper(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open override /*1*/ fun numListening(/*0*/ p0: kotlin.Long): kotlin.Int
            public open override /*1*/ fun paint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paintAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open fun paintComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun paintHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun paramString(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun pointRelativeToComponent(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun postEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public/*package*/ open fun postProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun postsOldMouseEvents(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun preNextFocusHelper(): java.awt.Component?
            public/*package*/ open fun preProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun preferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ fun print(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun printAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open fun printComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun printHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processComponentEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processContainerEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun processEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyBoundsEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processInputMethodEvent(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseMotionEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseWheelEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public/*package*/ open fun proxyEnableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public/*package*/ final fun recursiveApplyCurrentShape(): kotlin.Unit
            public/*package*/ final fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ final fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: [ERROR : Unresolved java classifier: MenuComponent]?): kotlin.Unit
            public open fun remove(/*0*/ p0: java.awt.Component): kotlin.Unit
            public open fun remove(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun removeAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open fun removeContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun removeNotify(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun requestFocusInWindow(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun resetGC(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun reshape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setBoundsOp(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]?): kotlin.Unit
            public open fun setComponentZOrder(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setDropTarget(/*0*/ p0: [ERROR : Unresolved java classifier: DropTarget]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setFocusCycleRoot(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ fun setFocusTraversalKeys(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeysEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open fun setFocusTraversalPolicy(/*0*/ p0: [ERROR : Unresolved java classifier: FocusTraversalPolicy]?): kotlin.Unit
            public final fun setFocusTraversalPolicyProvider(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setGCFromPeer(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setIgnoreRepaint(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setLayout(/*0*/ p0: [ERROR : Unresolved java classifier: LayoutManager]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocale(/*0*/ p0: java.util.Locale?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMaximumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMinimumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setPreferredSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun show(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun show(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun size(): java.awt.Dimension
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShapeBelowMe(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun transferFocus(): kotlin.Unit
            public open override /*1*/ fun transferFocusBackward(): kotlin.Unit
            public open fun transferFocusDownCycle(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusUpCycle(): kotlin.Unit
            public open override /*1*/ fun update(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun updateCursorImmediately(): kotlin.Unit
            public open override /*1*/ fun validate(): kotlin.Unit
            protected/*protected and package*/ open fun validateTree(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            protected/*protected and package*/ open inner class AccessibleAWTContainer : java.awt.Component.AccessibleAWTComponent {
                protected/*protected and package*/ constructor AccessibleAWTContainer()
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTComponentHandler: [ERROR : Unresolved java classifier: ComponentListener]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTFocusHandler: [ERROR : Unresolved java classifier: FocusListener]?
                protected/*protected and package*/ final var accessibleContainerHandler: [ERROR : Unresolved java classifier: ContainerListener]?
                public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ fun getAccessibleChildrenCount(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleComponent(): [ERROR : Unresolved java classifier: AccessibleComponent]
                public open override /*1*/ /*fake_override*/ fun getAccessibleDescription(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleName(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleParent(): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ /*fake_override*/ fun getAccessibleRole(): [ERROR : Unresolved java classifier: AccessibleRole]
                public open override /*1*/ /*fake_override*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]
                public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
                public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
                public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]?
                public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale?
                public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                protected/*protected and package*/ open inner class AccessibleContainerHandler {
                    protected/*protected and package*/ constructor AccessibleContainerHandler()
                    public open fun componentAdded(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]): kotlin.Unit
                    public open fun componentRemoved(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }
            
            public/*package*/ open class DropTargetEventTargetFilter : java.awt.Container.EventTargetFilter {
                private constructor DropTargetEventTargetFilter()
                public open override /*1*/ fun accept(/*0*/ p0: java.awt.Component?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ trait EventTargetFilter : java.lang.Object {
                public abstract fun accept(/*0*/ p0: java.awt.Component?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class MouseEventTargetFilter : java.awt.Container.EventTargetFilter {
                private constructor MouseEventTargetFilter()
                public open override /*1*/ fun accept(/*0*/ p0: java.awt.Component?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ final class WakingRunnable : java.lang.Runnable {
                public/*package*/ constructor WakingRunnable()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun run(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class Dimension : java.io.Serializable {
            public constructor Dimension()
            public constructor Dimension(/*0*/ p0: java.awt.Dimension)
            public constructor Dimension(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int)
            public final var height: kotlin.Int
            public final var width: kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getHeight(): kotlin.Double
            public open fun getSize(): java.awt.Dimension
            public open fun getWidth(): kotlin.Double
            public open override /*1*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            public open fun setSize(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Unit
            public open fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Frame : java.awt.Window {
            public constructor Frame()
            public constructor Frame(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]?)
            public constructor Frame(/*0*/ p0: kotlin.String?)
            public constructor Frame(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: GraphicsConfiguration]?)
            public/*package*/ final override /*1*/ /*fake_override*/ var accessibleContext: [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var anchor: kotlin.Any?
            public/*package*/ final override /*1*/ /*fake_override*/ var appContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var background: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var backgroundEraseDisabled: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var beforeFirstShow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var bufferStrategy: [ERROR : Unresolved java classifier: BufferStrategy]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentListener: [ERROR : Unresolved java classifier: ComponentListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentOrientation: [ERROR : Unresolved java classifier: ComponentOrientation]?
            public/*package*/ final override /*1*/ /*fake_override*/ var containerListener: [ERROR : Unresolved java classifier: ContainerListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var cursor: [ERROR : Unresolved java classifier: Cursor]?
            public/*package*/ final override /*1*/ /*fake_override*/ var descendantsCount: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var dropTarget: [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ final override /*1*/ /*fake_override*/ var enabled: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var eventCache: kotlin.Array<[ERROR : Unresolved java classifier: EventQueueItem]>?
            public/*package*/ final override /*1*/ /*fake_override*/ var eventMask: kotlin.Long
            public/*package*/ final override /*1*/ /*fake_override*/ var focusListener: [ERROR : Unresolved java classifier: FocusListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var focusTraversalKeys: kotlin.Array<kotlin.Set<kotlin.Any?>>?
            public/*package*/ final override /*1*/ /*fake_override*/ var font: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var foreground: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var graphicsConfig: [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ var height: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyBoundsListener: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyListener: [ERROR : Unresolved java classifier: HierarchyListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var icons: kotlin.List<[ERROR : Unresolved java classifier: Image]>?
            public/*package*/ final override /*1*/ /*fake_override*/ var ignoreRepaint: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var inputContext: [ERROR : Unresolved java classifier: InputContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var inputMethodListener: [ERROR : Unresolved java classifier: InputMethodListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var isInShow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var isPacked: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var isTrayIconWindow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var keyListener: [ERROR : Unresolved java classifier: KeyListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var layoutMgr: [ERROR : Unresolved java classifier: LayoutManager]?
            public/*package*/ final override /*1*/ /*fake_override*/ var listeningBoundsChildren: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var listeningChildren: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var locale: java.util.Locale?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSizeSet: kotlin.Boolean
            public/*package*/ final var maximizedBounds: [ERROR : Unresolved java classifier: Rectangle]?
            public/*package*/ final var mbManagement: kotlin.Boolean
            public/*package*/ final var menuBar: [ERROR : Unresolved java classifier: MenuBar]?
            public/*package*/ final override /*1*/ /*fake_override*/ var minSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var minSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var modalAppContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var modalBlocker: [ERROR : Unresolved java classifier: Dialog]?
            public/*package*/ final override /*1*/ /*fake_override*/ var modalComp: java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ var modalExclusionType: [ERROR : Unresolved java classifier: ModalExclusionType]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseListener: [ERROR : Unresolved java classifier: MouseListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseMotionListener: [ERROR : Unresolved java classifier: MouseMotionListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseWheelListener: [ERROR : Unresolved java classifier: MouseWheelListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var nativeInLightFixer: java.awt.Component.NativeInLightFixer?
            public/*package*/ final override /*1*/ /*fake_override*/ var newEventsOnly: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var ownedWindowList: [ERROR : Unresolved java classifier: Vector<WeakReference<Window>>]?
            public/*package*/ final var ownedWindows: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final override /*1*/ /*fake_override*/ var parent: java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ var peer: [ERROR : Unresolved java classifier: ComponentPeer]?
            public/*package*/ final override /*1*/ /*fake_override*/ var peerFont: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var popups: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var preserveBackgroundColor: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final var resizable: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var showWithParent: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var state: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var syncLWRequests: kotlin.Boolean
            public/*package*/ final var title: kotlin.String?
            public/*package*/ final var undecorated: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var visible: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var warningString: kotlin.String?
            public/*package*/ final override /*1*/ /*fake_override*/ var width: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var windowClosingException: java.lang.RuntimeException?
            public/*package*/ final override /*1*/ /*fake_override*/ var windowFocusListener: [ERROR : Unresolved java classifier: WindowFocusListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var windowListener: [ERROR : Unresolved java classifier: WindowListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var windowStateListener: [ERROR : Unresolved java classifier: WindowStateListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var x: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var y: kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun action(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: [ERROR : Unresolved java classifier: PopupMenu]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: kotlin.String?, /*1*/ p1: java.awt.Component): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun addComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun addImpl(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun addNotify(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun addOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustDecendantsOnParent(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustDescendants(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustListeningChildren(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustListeningChildrenOnParent(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun applyComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun applyCompoundShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun applyCurrentShape(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun applyResourceBundle(/*0*/ p0: [ERROR : Unresolved java classifier: ResourceBundle]): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun applyResourceBundle(/*0*/ p0: kotlin.String): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun areBoundsValid(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun areFocusTraversalKeysSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun areInputMethodsEnabled(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun autoProcessMouseWheel(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun autoTransferFocus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun bounds(): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ final override /*1*/ /*fake_override*/ fun canBeFocusOwner(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun canContainFocusOwner(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkGD(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun checkTreeLock(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkWindowClosingException(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun clearCurrentFocusCycleRootOnHide(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun clearMostRecentFocusOwnerOnHide(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun coalesceEvents(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?, /*1*/ p1: [ERROR : Unresolved java classifier: AWTEvent]?): [ERROR : Unresolved java classifier: AWTEvent]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun connectOwnedWindow(/*0*/ p0: java.awt.Window?): kotlin.Unit
            public/*package*/ open override /*1*/ fun constructComponentName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun containsFocus(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun countComponents(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun countHierarchyMembers(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun createChildHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun createHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: java.awt.Component?, /*2*/ p2: java.awt.Container?, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Boolean): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: [ERROR : Unresolved java classifier: ImageProducer]?): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: VolatileImage]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: ImageCapabilities]?): [ERROR : Unresolved java classifier: VolatileImage]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun decreaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun deliverEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun deliverMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun disable(): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun disableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun dispatchEventImpl(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun dispatchEventToSelf(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun dispatchMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun dispose(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun disposeImpl(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun doDispose(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun doLayout(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun enableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun enableInputMethods(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun eventEnabled(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun eventTypeEnabled(/*0*/ p0: kotlin.Int): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ fun findComponentAtImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun findUnderMouseInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: PointerInfo]?): java.awt.Component?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Any?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Char, /*2*/ p2: kotlin.Char): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun getAccessControlContext(): [ERROR : Unresolved java classifier: AccessControlContext]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleChildrenCount(): kotlin.Int
            public open override /*1*/ fun getAccessibleContext(): [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
            public open override /*1*/ /*fake_override*/ fun getAlignmentX(): kotlin.Float
            public open override /*1*/ /*fake_override*/ fun getAlignmentY(): kotlin.Float
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getBaseline(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getBaselineResizeBehavior(): java.awt.Component.BaselineResizeBehavior
            public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]
            public open override /*1*/ /*fake_override*/ fun getBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]?): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBoundsOp(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getBufferStrategy(): [ERROR : Unresolved java classifier: BufferStrategy]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getColorModel(): [ERROR : Unresolved java classifier: ColorModel]?
            public open override /*1*/ /*fake_override*/ fun getComponent(/*0*/ p0: kotlin.Int): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentCount(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getComponentListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ComponentListener]>?
            public open override /*1*/ /*fake_override*/ fun getComponentOrientation(): [ERROR : Unresolved java classifier: ComponentOrientation]?
            public open override /*1*/ /*fake_override*/ fun getComponentZOrder(/*0*/ p0: java.awt.Component?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getComponents(): kotlin.Array<java.awt.Component>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getComponents_NoClientCode(): kotlin.Array<java.awt.Component>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getContainer(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getContainerListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ContainerListener]>?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getContainingWindow(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getCursorType(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getDocumentRoot(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getDropTarget(): [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getDropTargetEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public open fun getExtendedState(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getFocusCycleRootAncestor(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: FocusListener]>?
            public open override /*1*/ /*fake_override*/ fun getFocusOwner(): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeys(/*0*/ p0: kotlin.Int): kotlin.MutableSet<java.awt.AWTKeyStroke>?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeysEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int): kotlin.MutableSet<out kotlin.Any?>?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalPolicy(): [ERROR : Unresolved java classifier: FocusTraversalPolicy]?
            public open override /*1*/ /*fake_override*/ fun getFocusableWindowState(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFont_NoClientCode(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getGraphics(): [ERROR : Unresolved java classifier: Graphics]?
            public open override /*1*/ /*fake_override*/ fun getGraphicsConfiguration(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphicsConfiguration_NoClientCode(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphics_NoClientCode(): [ERROR : Unresolved java classifier: Graphics]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getHeavyweightContainer(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getHeight(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getHierarchyBoundsListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyBoundsListener]>?
            public open override /*1*/ /*fake_override*/ fun getHierarchyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyListener]>?
            public open fun getIconImage(): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun getIconImages(): kotlin.MutableList<[ERROR : Unresolved java classifier: Image]>
            public open override /*1*/ /*fake_override*/ fun getIgnoreRepaint(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun getInputContext(): [ERROR : Unresolved java classifier: InputContext]?
            public open override /*1*/ /*fake_override*/ fun getInputMethodListeners(): kotlin.Array<[ERROR : Unresolved java classifier: InputMethodListener]>?
            public open override /*1*/ /*fake_override*/ fun getInputMethodRequests(): [ERROR : Unresolved java classifier: InputMethodRequests]?
            public open override /*1*/ /*fake_override*/ fun getInsets(): [ERROR : Unresolved java classifier: Insets]
            public open override /*1*/ /*fake_override*/ fun getKeyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: KeyListener]>?
            public open override /*1*/ /*fake_override*/ fun getLayout(): [ERROR : Unresolved java classifier: LayoutManager]?
            public open override /*1*/ /*fake_override*/ fun </*0*/ T : java.util.EventListener?> getListeners(/*0*/ p0: java.lang.Class<T>): kotlin.Array<T>?
            public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale
            public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getLocationOnScreen_NoTreeLock(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getLocationOnWindow(): [ERROR : Unresolved java classifier: Point]?
            public open fun getMaximizedBounds(): [ERROR : Unresolved java classifier: Rectangle]?
            public open override /*1*/ /*fake_override*/ fun getMaximumSize(): java.awt.Dimension?
            public open fun getMenuBar(): [ERROR : Unresolved java classifier: MenuBar]?
            public open override /*1*/ /*fake_override*/ fun getMinimumSize(): java.awt.Dimension?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getModalBlocker(): [ERROR : Unresolved java classifier: Dialog]?
            public open override /*1*/ /*fake_override*/ fun getModalExclusionType(): [ERROR : Unresolved java classifier: ModalExclusionType]?
            public open override /*1*/ /*fake_override*/ fun getMostRecentFocusOwner(): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getMouseListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseListener]>?
            public open override /*1*/ /*fake_override*/ fun getMouseMotionListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseMotionListener]>?
            public open override /*1*/ /*fake_override*/ fun getMousePosition(): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMousePosition(/*0*/ p0: kotlin.Boolean): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMouseWheelListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseWheelListener]>?
            public open override /*1*/ /*fake_override*/ fun getName(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun getNativeContainer(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getNormalShape(): [ERROR : Unresolved java classifier: Region]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getObjectLock(): kotlin.Any?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getOpaqueShape(): [ERROR : Unresolved java classifier: Region]?
            public open override /*1*/ /*fake_override*/ fun getOwnedWindows(): kotlin.Array<java.awt.Window>
            public/*package*/ final override /*1*/ /*fake_override*/ fun getOwnedWindows_NoClientCode(): kotlin.Array<java.awt.Window>?
            public open override /*1*/ /*fake_override*/ fun getOwner(): java.awt.Window?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getOwner_NoClientCode(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getParent(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getParent_NoClientCode(): java.awt.Container?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getPeer(): [ERROR : Unresolved java classifier: ComponentPeer]?
            public open override /*1*/ /*fake_override*/ fun getPreferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(/*0*/ p0: kotlin.String?): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexAbove(): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexBelow(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension
            public open override /*1*/ /*fake_override*/ fun getSize(/*0*/ p0: java.awt.Dimension?): java.awt.Dimension
            public open fun getState(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getTemporaryLostComponent(): java.awt.Component?
            public open fun getTitle(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getToolkit(): [ERROR : Unresolved java classifier: Toolkit]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getToolkitImpl(): [ERROR : Unresolved java classifier: Toolkit]?
            public final override /*1*/ /*fake_override*/ fun getTreeLock(): kotlin.Any
            public final override /*1*/ /*fake_override*/ fun getWarningString(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getWidth(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getWindowFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowFocusListener]>?
            public open override /*1*/ /*fake_override*/ fun getWindowListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowListener]>?
            public open override /*1*/ /*fake_override*/ fun getWindowStateListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowStateListener]>?
            public open override /*1*/ /*fake_override*/ fun getX(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getY(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun gotFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun handleEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hasFocus(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun hasHeavyweightDescendants(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun hasLightweightDescendants(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun hide(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun imageUpdate(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun increaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun initializeFocusTraversalKeys(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun insets(): [ERROR : Unresolved java classifier: Insets]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun inside(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun invalidate(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun invalidateIfValid(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun invalidateTree(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun isActive(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isAlwaysOnTop(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isAlwaysOnTopSupported(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isAncestorOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isBackgroundSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isCoalescingEnabled(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isCursorSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDisplayable(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isDisposing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDoubleBuffered(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isEnabledImpl(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isFocusCycleRoot(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusCycleRoot(/*0*/ p0: java.awt.Container?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusOwner(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isFocusTraversableOverridden(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isFocusTraversalPolicyProvider(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusTraversalPolicySet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusable(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isFocusableWindow(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocused(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFontSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isForegroundSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isLightweight(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isLocationByPlatform(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMaximumSizeSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMinimumSizeSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isMixingNeeded(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isModalBlocked(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isModalExcluded(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]?): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isNonOpaqueForMixing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isOpaque(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isParentOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isPreferredSizeSet(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isRecursivelyVisible(): kotlin.Boolean
            public open fun isResizable(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isSameOrAncestorOf(/*0*/ p0: java.awt.Component?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
            public open fun isUndecorated(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isValid(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isVisible_NoClientCode(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun layout(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun lightweightPaint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun lightweightPrint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter], /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun locate(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun location(): [ERROR : Unresolved java classifier: Point]
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun lostFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun minimumSize(): java.awt.Dimension?
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnHiding(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun mixOnReshaping(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnShowing(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnValidating(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnZOrderChanging(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDrag(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseEnter(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseExit(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseMove(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun move(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun nextFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun nextFocusHelper(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun numListening(/*0*/ p0: kotlin.Long): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun pack(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paintAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paintComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun paintHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun paramString(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun pointRelativeToComponent(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun postEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public/*package*/ open override /*1*/ fun postProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun postWindowEvent(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun postsOldMouseEvents(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun preNextFocusHelper(): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun preProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun preferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun print(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun printAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun printComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun printHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processComponentEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processContainerEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyBoundsEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processInputMethodEvent(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseMotionEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseWheelEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processWindowStateEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun proxyEnableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun remove(/*0*/ p0: [ERROR : Unresolved java classifier: MenuComponent]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: java.awt.Component): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun removeNotify(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun removeOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun requestFocusInWindow(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun resetGC(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun reshape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun setAlwaysOnTop(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setBoundsOp(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setClientSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setComponentZOrder(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setCursor(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setDropTarget(/*0*/ p0: [ERROR : Unresolved java classifier: DropTarget]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setExtendedState(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun setFocusCycleRoot(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeys(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeysEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalPolicy(/*0*/ p0: [ERROR : Unresolved java classifier: FocusTraversalPolicy]?): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun setFocusTraversalPolicyProvider(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusableWindowState(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setGCFromPeer(): kotlin.Unit
            public open override /*1*/ fun setIconImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setIconImages(/*0*/ p0: kotlin.List<[ERROR : Unresolved java classifier: Image]?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setIgnoreRepaint(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLayout(/*0*/ p0: [ERROR : Unresolved java classifier: LayoutManager]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocale(/*0*/ p0: java.util.Locale?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocationByPlatform(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocationRelativeTo(/*0*/ p0: java.awt.Component?): kotlin.Unit
            public open fun setMaximizedBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMaximumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open fun setMenuBar(/*0*/ p0: [ERROR : Unresolved java classifier: MenuBar]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMinimumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setModalBlocked(/*0*/ p0: [ERROR : Unresolved java classifier: Dialog]?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setModalExclusionType(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setPreferredSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open fun setResizable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setTemporaryLostComponent(/*0*/ p0: java.awt.Component?): java.awt.Component?
            public open fun setTitle(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun setUndecorated(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun show(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun show(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun size(): java.awt.Dimension
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShapeBelowMe(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toBack(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun toBack_NoClientCode(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toFront(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun toFront_NoClientCode(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun transferFocus(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusBackward(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusDownCycle(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusUpCycle(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun update(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun updateChildrenBlocking(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun updateCursorImmediately(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun validate(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun validateTree(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            protected/*protected and package*/ open inner class AccessibleAWTFrame : java.awt.Window.AccessibleAWTWindow {
                protected/*protected and package*/ constructor AccessibleAWTFrame()
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTComponentHandler: [ERROR : Unresolved java classifier: ComponentListener]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTFocusHandler: [ERROR : Unresolved java classifier: FocusListener]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleContainerHandler: [ERROR : Unresolved java classifier: ContainerListener]?
                public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ /*fake_override*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ /*fake_override*/ fun getAccessibleChildrenCount(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleComponent(): [ERROR : Unresolved java classifier: AccessibleComponent]
                public open override /*1*/ /*fake_override*/ fun getAccessibleDescription(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleName(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleParent(): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ fun getAccessibleRole(): [ERROR : Unresolved java classifier: AccessibleRole]
                public open override /*1*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
                public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
                public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
                public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]?
                public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale?
                public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class GridBagConstraints : java.lang.Cloneable, java.io.Serializable {
            public constructor GridBagConstraints()
            public constructor GridBagConstraints(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Double, /*5*/ p5: kotlin.Double, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlin.Int, /*8*/ p8: [ERROR : Unresolved java classifier: Insets]?, /*9*/ p9: kotlin.Int, /*10*/ p10: kotlin.Int)
            public final var anchor: kotlin.Int
            public/*package*/ final var ascent: kotlin.Int
            public/*package*/ final var baselineResizeBehavior: java.awt.Component.BaselineResizeBehavior?
            public/*package*/ final var centerOffset: kotlin.Int
            public/*package*/ final var centerPadding: kotlin.Int
            public/*package*/ final var descent: kotlin.Int
            public final var fill: kotlin.Int
            public final var gridheight: kotlin.Int
            public final var gridwidth: kotlin.Int
            public final var gridx: kotlin.Int
            public final var gridy: kotlin.Int
            public final var insets: [ERROR : Unresolved java classifier: Insets]?
            public final var ipadx: kotlin.Int
            public final var ipady: kotlin.Int
            public/*package*/ final var minHeight: kotlin.Int
            public/*package*/ final var minWidth: kotlin.Int
            public/*package*/ final var tempHeight: kotlin.Int
            public/*package*/ final var tempWidth: kotlin.Int
            public/*package*/ final var tempX: kotlin.Int
            public/*package*/ final var tempY: kotlin.Int
            public final var weightx: kotlin.Double
            public final var weighty: kotlin.Double
            public open override /*2*/ fun clone(): kotlin.Any
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public/*package*/ open fun isVerticallyResizable(): kotlin.Boolean
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Window : java.awt.Container {
            public/*package*/ constructor Window()
            public/*package*/ constructor Window(/*0*/ p0: [ERROR : Unresolved java classifier: GraphicsConfiguration]?)
            public constructor Window(/*0*/ p0: java.awt.Frame?)
            public constructor Window(/*0*/ p0: java.awt.Window?)
            public constructor Window(/*0*/ p0: java.awt.Window?, /*1*/ p1: [ERROR : Unresolved java classifier: GraphicsConfiguration]?)
            public/*package*/ final override /*1*/ /*fake_override*/ var accessibleContext: [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ final var anchor: kotlin.Any?
            public/*package*/ final override /*1*/ /*fake_override*/ var appContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var background: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var backgroundEraseDisabled: kotlin.Boolean
            public/*package*/ final var beforeFirstShow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var bufferStrategy: [ERROR : Unresolved java classifier: BufferStrategy]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentListener: [ERROR : Unresolved java classifier: ComponentListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var componentOrientation: [ERROR : Unresolved java classifier: ComponentOrientation]?
            public/*package*/ final override /*1*/ /*fake_override*/ var containerListener: [ERROR : Unresolved java classifier: ContainerListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var cursor: [ERROR : Unresolved java classifier: Cursor]?
            public/*package*/ final override /*1*/ /*fake_override*/ var descendantsCount: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var dropTarget: [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ final override /*1*/ /*fake_override*/ var enabled: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var eventCache: kotlin.Array<[ERROR : Unresolved java classifier: EventQueueItem]>?
            public/*package*/ final override /*1*/ /*fake_override*/ var eventMask: kotlin.Long
            public/*package*/ final override /*1*/ /*fake_override*/ var focusListener: [ERROR : Unresolved java classifier: FocusListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var focusTraversalKeys: kotlin.Array<kotlin.Set<kotlin.Any?>>?
            public/*package*/ final override /*1*/ /*fake_override*/ var font: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var foreground: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final override /*1*/ /*fake_override*/ var graphicsConfig: [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ var height: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyBoundsListener: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var hierarchyListener: [ERROR : Unresolved java classifier: HierarchyListener]?
            public/*package*/ final var icons: kotlin.List<[ERROR : Unresolved java classifier: Image]>?
            public/*package*/ final override /*1*/ /*fake_override*/ var ignoreRepaint: kotlin.Boolean
            public/*package*/ final var inputContext: [ERROR : Unresolved java classifier: InputContext]?
            public/*package*/ final override /*1*/ /*fake_override*/ var inputMethodListener: [ERROR : Unresolved java classifier: InputMethodListener]?
            public/*package*/ final var isInShow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var isPacked: kotlin.Boolean
            public/*package*/ final var isTrayIconWindow: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var keyListener: [ERROR : Unresolved java classifier: KeyListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var layoutMgr: [ERROR : Unresolved java classifier: LayoutManager]?
            public/*package*/ final override /*1*/ /*fake_override*/ var listeningBoundsChildren: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var listeningChildren: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var locale: java.util.Locale?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var maxSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var minSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var minSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var modalAppContext: [ERROR : Unresolved java classifier: AppContext]?
            public/*package*/ final var modalBlocker: [ERROR : Unresolved java classifier: Dialog]?
            public/*package*/ final override /*1*/ /*fake_override*/ var modalComp: java.awt.Component?
            public/*package*/ final var modalExclusionType: [ERROR : Unresolved java classifier: ModalExclusionType]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseListener: [ERROR : Unresolved java classifier: MouseListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseMotionListener: [ERROR : Unresolved java classifier: MouseMotionListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var mouseWheelListener: [ERROR : Unresolved java classifier: MouseWheelListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var nativeInLightFixer: java.awt.Component.NativeInLightFixer?
            public/*package*/ final override /*1*/ /*fake_override*/ var newEventsOnly: kotlin.Boolean
            public/*package*/ final var ownedWindowList: [ERROR : Unresolved java classifier: Vector<WeakReference<Window>>]?
            public/*package*/ final override /*1*/ /*fake_override*/ var parent: java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ var peer: [ERROR : Unresolved java classifier: ComponentPeer]?
            public/*package*/ final override /*1*/ /*fake_override*/ var peerFont: [ERROR : Unresolved java classifier: Font]?
            public/*package*/ final override /*1*/ /*fake_override*/ var popups: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSize: java.awt.Dimension?
            public/*package*/ final override /*1*/ /*fake_override*/ var prefSizeSet: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var preserveBackgroundColor: [ERROR : Unresolved java classifier: Color]?
            public/*package*/ final var showWithParent: kotlin.Boolean
            public/*package*/ final var state: kotlin.Int
            public/*package*/ final var syncLWRequests: kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ var visible: kotlin.Boolean
            public/*package*/ final var warningString: kotlin.String?
            public/*package*/ final override /*1*/ /*fake_override*/ var width: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var windowClosingException: java.lang.RuntimeException?
            public/*package*/ final var windowFocusListener: [ERROR : Unresolved java classifier: WindowFocusListener]?
            public/*package*/ final var windowListener: [ERROR : Unresolved java classifier: WindowListener]?
            public/*package*/ final var windowStateListener: [ERROR : Unresolved java classifier: WindowStateListener]?
            public/*package*/ final override /*1*/ /*fake_override*/ var x: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var y: kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun action(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: [ERROR : Unresolved java classifier: PopupMenu]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ p0: kotlin.String?, /*1*/ p1: java.awt.Component): java.awt.Component
            public open override /*1*/ /*fake_override*/ fun addComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun addImpl(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun addNotify(): kotlin.Unit
            public/*package*/ open fun addOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]?): kotlin.Unit
            public open override /*1*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ fun addPropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open fun addWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]?): kotlin.Unit
            public open fun addWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]?): kotlin.Unit
            public open fun addWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun adjustDecendantsOnParent(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustDescendants(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun adjustListeningChildren(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ fun adjustListeningChildrenOnParent(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun applyComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]): kotlin.Unit
            public/*package*/ final override /*1*/ fun applyCompoundShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ fun applyCurrentShape(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun applyResourceBundle(/*0*/ p0: [ERROR : Unresolved java classifier: ResourceBundle]): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun applyResourceBundle(/*0*/ p0: kotlin.String): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun areBoundsValid(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun areFocusTraversalKeysSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun areInputMethodsEnabled(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun autoProcessMouseWheel(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun autoTransferFocus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun bounds(): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ final override /*1*/ /*fake_override*/ fun canBeFocusOwner(): kotlin.Boolean
            public/*package*/ open override /*1*/ fun canContainFocusOwner(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkGD(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun checkImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun checkTreeLock(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkWindowClosingException(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun clearCurrentFocusCycleRootOnHide(): kotlin.Unit
            public/*package*/ final override /*1*/ fun clearMostRecentFocusOwnerOnHide(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun coalesceEvents(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?, /*1*/ p1: [ERROR : Unresolved java classifier: AWTEvent]?): [ERROR : Unresolved java classifier: AWTEvent]?
            public/*package*/ open fun connectOwnedWindow(/*0*/ p0: java.awt.Window?): kotlin.Unit
            public/*package*/ open override /*1*/ fun constructComponentName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun containsFocus(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun countComponents(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun countHierarchyMembers(): kotlin.Int
            public open override /*1*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun createBufferStrategy(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BufferCapabilities]): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun createChildHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun createHierarchyEvents(/*0*/ p0: kotlin.Int, /*1*/ p1: java.awt.Component?, /*2*/ p2: java.awt.Container?, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Boolean): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: [ERROR : Unresolved java classifier: ImageProducer]?): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: VolatileImage]?
            public open override /*1*/ /*fake_override*/ fun createVolatileImage(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: ImageCapabilities]?): [ERROR : Unresolved java classifier: VolatileImage]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun decreaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun deliverEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Unit
            public/*package*/ open fun deliverMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun disable(): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun disableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun dispatchEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]): kotlin.Unit
            public/*package*/ open override /*1*/ fun dispatchEventImpl(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun dispatchEventToSelf(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ fun dispatchMouseWheelToAncestor(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Boolean
            public open fun dispose(): kotlin.Unit
            public/*package*/ open fun disposeImpl(): kotlin.Unit
            public/*package*/ open fun doDispose(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun doLayout(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun enable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun enableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun enableInputMethods(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ fun eventEnabled(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun eventTypeEnabled(/*0*/ p0: kotlin.Int): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ fun findComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ final override /*1*/ /*fake_override*/ fun findComponentAtImpl(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun findUnderMouseInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: PointerInfo]?): java.awt.Component?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Any?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Byte, /*2*/ p2: kotlin.Byte): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Char, /*2*/ p2: kotlin.Char): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.Double): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Float): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun firePropertyChange(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Short, /*2*/ p2: kotlin.Short): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun getAccessControlContext(): [ERROR : Unresolved java classifier: AccessControlContext]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleChildrenCount(): kotlin.Int
            public open override /*1*/ fun getAccessibleContext(): [ERROR : Unresolved java classifier: AccessibleContext]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
            public/*package*/ open override /*1*/ /*fake_override*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
            public open override /*1*/ /*fake_override*/ fun getAlignmentX(): kotlin.Float
            public open override /*1*/ /*fake_override*/ fun getAlignmentY(): kotlin.Float
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBackBuffer(): [ERROR : Unresolved java classifier: Image]?
            public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getBaseline(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getBaselineResizeBehavior(): java.awt.Component.BaselineResizeBehavior
            public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]
            public open override /*1*/ /*fake_override*/ fun getBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]?): [ERROR : Unresolved java classifier: Rectangle]
            public/*package*/ open override /*1*/ /*fake_override*/ fun getBoundsOp(): kotlin.Int
            public open override /*1*/ fun getBufferStrategy(): [ERROR : Unresolved java classifier: BufferStrategy]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getColorModel(): [ERROR : Unresolved java classifier: ColorModel]?
            public open override /*1*/ /*fake_override*/ fun getComponent(/*0*/ p0: kotlin.Int): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getComponentCount(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getComponentListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ComponentListener]>?
            public open override /*1*/ /*fake_override*/ fun getComponentOrientation(): [ERROR : Unresolved java classifier: ComponentOrientation]?
            public open override /*1*/ /*fake_override*/ fun getComponentZOrder(/*0*/ p0: java.awt.Component?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getComponents(): kotlin.Array<java.awt.Component>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getComponents_NoClientCode(): kotlin.Array<java.awt.Component>?
            public/*package*/ final override /*1*/ fun getContainer(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getContainerListeners(): kotlin.Array<[ERROR : Unresolved java classifier: ContainerListener]>?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getContainingWindow(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
            public/*package*/ open fun getDocumentRoot(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getDropTarget(): [ERROR : Unresolved java classifier: DropTarget]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getDropTargetEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public final override /*1*/ fun getFocusCycleRootAncestor(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: FocusListener]>?
            public open fun getFocusOwner(): java.awt.Component?
            public open override /*1*/ fun getFocusTraversalKeys(/*0*/ p0: kotlin.Int): kotlin.MutableSet<java.awt.AWTKeyStroke>?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalKeysEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int): kotlin.MutableSet<out kotlin.Any?>?
            public open override /*1*/ /*fake_override*/ fun getFocusTraversalPolicy(): [ERROR : Unresolved java classifier: FocusTraversalPolicy]?
            public open fun getFocusableWindowState(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]
            public/*package*/ final override /*1*/ /*fake_override*/ fun getFont_NoClientCode(): [ERROR : Unresolved java classifier: Font]?
            public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
            public open override /*1*/ /*fake_override*/ fun getGraphics(): [ERROR : Unresolved java classifier: Graphics]?
            public open override /*1*/ fun getGraphicsConfiguration(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphicsConfiguration_NoClientCode(): [ERROR : Unresolved java classifier: GraphicsConfiguration]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getGraphics_NoClientCode(): [ERROR : Unresolved java classifier: Graphics]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getHeavyweightContainer(): java.awt.Container?
            public open override /*1*/ /*fake_override*/ fun getHeight(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getHierarchyBoundsListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyBoundsListener]>?
            public open override /*1*/ /*fake_override*/ fun getHierarchyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: HierarchyListener]>?
            public open fun getIconImages(): kotlin.MutableList<[ERROR : Unresolved java classifier: Image]>
            public open override /*1*/ /*fake_override*/ fun getIgnoreRepaint(): kotlin.Boolean
            public open override /*1*/ fun getInputContext(): [ERROR : Unresolved java classifier: InputContext]?
            public open override /*1*/ /*fake_override*/ fun getInputMethodListeners(): kotlin.Array<[ERROR : Unresolved java classifier: InputMethodListener]>?
            public open override /*1*/ /*fake_override*/ fun getInputMethodRequests(): [ERROR : Unresolved java classifier: InputMethodRequests]?
            public open override /*1*/ /*fake_override*/ fun getInsets(): [ERROR : Unresolved java classifier: Insets]
            public open override /*1*/ /*fake_override*/ fun getKeyListeners(): kotlin.Array<[ERROR : Unresolved java classifier: KeyListener]>?
            public open override /*1*/ /*fake_override*/ fun getLayout(): [ERROR : Unresolved java classifier: LayoutManager]?
            public open override /*1*/ fun </*0*/ T : java.util.EventListener?> getListeners(/*0*/ p0: java.lang.Class<T>): kotlin.Array<T>?
            public open override /*1*/ fun getLocale(): java.util.Locale
            public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]
            public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getLocationOnScreen_NoTreeLock(): [ERROR : Unresolved java classifier: Point]?
            public/*package*/ final override /*1*/ fun getLocationOnWindow(): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMaximumSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun getMinimumSize(): java.awt.Dimension?
            public/*package*/ open fun getModalBlocker(): [ERROR : Unresolved java classifier: Dialog]?
            public open fun getModalExclusionType(): [ERROR : Unresolved java classifier: ModalExclusionType]?
            public open fun getMostRecentFocusOwner(): java.awt.Component?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getMouseEventTarget(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.Component?
            public open override /*1*/ /*fake_override*/ fun getMouseListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseListener]>?
            public open override /*1*/ /*fake_override*/ fun getMouseMotionListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseMotionListener]>?
            public open override /*1*/ /*fake_override*/ fun getMousePosition(): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMousePosition(/*0*/ p0: kotlin.Boolean): [ERROR : Unresolved java classifier: Point]?
            public open override /*1*/ /*fake_override*/ fun getMouseWheelListeners(): kotlin.Array<[ERROR : Unresolved java classifier: MouseWheelListener]>?
            public open override /*1*/ /*fake_override*/ fun getName(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun getNativeContainer(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getNormalShape(): [ERROR : Unresolved java classifier: Region]?
            public/*package*/ open override /*1*/ /*fake_override*/ fun getObjectLock(): kotlin.Any?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getOpaqueShape(): [ERROR : Unresolved java classifier: Region]?
            public open fun getOwnedWindows(): kotlin.Array<java.awt.Window>
            public/*package*/ final fun getOwnedWindows_NoClientCode(): kotlin.Array<java.awt.Window>?
            public open fun getOwner(): java.awt.Window?
            public/*package*/ final fun getOwner_NoClientCode(): java.awt.Window?
            public open override /*1*/ /*fake_override*/ fun getParent(): java.awt.Container?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getParent_NoClientCode(): java.awt.Container?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getPeer(): [ERROR : Unresolved java classifier: ComponentPeer]?
            public open override /*1*/ /*fake_override*/ fun getPreferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public open override /*1*/ /*fake_override*/ fun getPropertyChangeListeners(/*0*/ p0: kotlin.String?): kotlin.Array<[ERROR : Unresolved java classifier: PropertyChangeListener]>?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexAbove(): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSiblingIndexBelow(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension
            public open override /*1*/ /*fake_override*/ fun getSize(/*0*/ p0: java.awt.Dimension?): java.awt.Dimension
            public/*package*/ open fun getTemporaryLostComponent(): java.awt.Component?
            public open override /*1*/ fun getToolkit(): [ERROR : Unresolved java classifier: Toolkit]?
            public/*package*/ final override /*1*/ /*fake_override*/ fun getToolkitImpl(): [ERROR : Unresolved java classifier: Toolkit]?
            public final override /*1*/ /*fake_override*/ fun getTreeLock(): kotlin.Any
            public final fun getWarningString(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getWidth(): kotlin.Int
            public open fun getWindowFocusListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowFocusListener]>?
            public open fun getWindowListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowListener]>?
            public open fun getWindowStateListeners(): kotlin.Array<[ERROR : Unresolved java classifier: WindowStateListener]>?
            public open override /*1*/ /*fake_override*/ fun getX(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getY(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun gotFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun handleEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hasFocus(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun hasHeavyweightDescendants(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun hasLightweightDescendants(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun hide(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun imageUpdate(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun increaseComponentCount(/*0*/ p0: java.awt.Component?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun initializeFocusTraversalKeys(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun insets(): [ERROR : Unresolved java classifier: Insets]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun inside(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun invalidate(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun invalidateIfValid(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun invalidateTree(): kotlin.Unit
            public open fun isActive(): kotlin.Boolean
            public final fun isAlwaysOnTop(): kotlin.Boolean
            public open fun isAlwaysOnTopSupported(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isAncestorOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isBackgroundSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isCoalescingEnabled(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isCursorSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDisplayable(): kotlin.Boolean
            public/*package*/ open fun isDisposing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isDoubleBuffered(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isEnabledImpl(): kotlin.Boolean
            public final override /*1*/ fun isFocusCycleRoot(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusCycleRoot(/*0*/ p0: java.awt.Container?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusOwner(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isFocusTraversableOverridden(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isFocusTraversalPolicyProvider(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusTraversalPolicySet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFocusable(): kotlin.Boolean
            public final fun isFocusableWindow(): kotlin.Boolean
            public open fun isFocused(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isFontSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isForegroundSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isLightweight(): kotlin.Boolean
            public open fun isLocationByPlatform(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMaximumSizeSet(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isMinimumSizeSet(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isMixingNeeded(): kotlin.Boolean
            public/*package*/ open fun isModalBlocked(): kotlin.Boolean
            public/*package*/ open fun isModalExcluded(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]?): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isNonOpaqueForMixing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isOpaque(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isParentOf(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isPreferredSizeSet(): kotlin.Boolean
            public/*package*/ open override /*1*/ fun isRecursivelyVisible(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun isSameOrAncestorOf(/*0*/ p0: java.awt.Component?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open override /*1*/ fun isShowing(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isValid(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isVisible_NoClientCode(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun keyUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event], /*1*/ p1: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun layout(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun lightweightPaint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun lightweightPrint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter], /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun locate(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.Component?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun location(): [ERROR : Unresolved java classifier: Point]
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun lostFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun minimumSize(): java.awt.Dimension?
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnHiding(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ fun mixOnReshaping(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnShowing(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnValidating(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun mixOnZOrderChanging(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDown(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseDrag(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseEnter(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseExit(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseMove(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun mouseUp(/*0*/ p0: [ERROR : Unresolved java classifier: Event]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun move(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun nextFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun nextFocusHelper(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun numListening(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun pack(): kotlin.Unit
            public open override /*1*/ fun paint(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paintAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun paintComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun paintHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun paramString(): kotlin.String
            public/*package*/ open override /*1*/ /*fake_override*/ fun pointRelativeToComponent(/*0*/ p0: [ERROR : Unresolved java classifier: Point]?): [ERROR : Unresolved java classifier: Point]?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun postEvent(/*0*/ p0: [ERROR : Unresolved java classifier: Event]): kotlin.Boolean
            public/*package*/ open override /*1*/ fun postProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            public/*package*/ open fun postWindowEvent(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun postsOldMouseEvents(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun preNextFocusHelper(): java.awt.Component?
            public/*package*/ open override /*1*/ fun preProcessKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]?): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun preferredSize(): java.awt.Dimension?
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun prepareImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: ImageObserver]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun print(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun printAll(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun printComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun printHeavyweightComponents(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processComponentEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processContainerEvent(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun processEvent(/*0*/ p0: [ERROR : Unresolved java classifier: AWTEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: FocusEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyBoundsEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processHierarchyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processInputMethodEvent(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processKeyEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseMotionEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseEvent]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun processMouseWheelEvent(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processWindowEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]): kotlin.Unit
            protected/*protected and package*/ open fun processWindowFocusEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]?): kotlin.Unit
            protected/*protected and package*/ open fun processWindowStateEvent(/*0*/ p0: [ERROR : Unresolved java classifier: WindowEvent]?): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun proxyEnableEvents(/*0*/ p0: kotlin.Long): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveApplyCurrentShape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun recursiveSubtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: [ERROR : Unresolved java classifier: MenuComponent]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: java.awt.Component): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeComponentListener(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeContainerListener(/*0*/ p0: [ERROR : Unresolved java classifier: ContainerListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyBoundsListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyBoundsListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeHierarchyListener(/*0*/ p0: [ERROR : Unresolved java classifier: HierarchyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeInputMethodListener(/*0*/ p0: [ERROR : Unresolved java classifier: InputMethodListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeKeyListener(/*0*/ p0: [ERROR : Unresolved java classifier: KeyListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseMotionListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseMotionListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removeMouseWheelListener(/*0*/ p0: [ERROR : Unresolved java classifier: MouseWheelListener]?): kotlin.Unit
            public open override /*1*/ fun removeNotify(): kotlin.Unit
            public/*package*/ open fun removeOwnedWindow(/*0*/ p0: [ERROR : Unresolved java classifier: WeakReference]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
            public open fun removeWindowFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowFocusListener]?): kotlin.Unit
            public open fun removeWindowListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowListener]?): kotlin.Unit
            public open fun removeWindowStateListener(/*0*/ p0: [ERROR : Unresolved java classifier: WindowStateListener]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun repaint(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocus(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun requestFocusHelper(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean, /*2*/ p2: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun requestFocusInWindow(): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun requestFocusInWindow(/*0*/ p0: kotlin.Boolean, /*1*/ p1: [ERROR : Unresolved java classifier: Cause]?): kotlin.Boolean
            public/*package*/ open override /*1*/ fun resetGC(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun reshape(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun resize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public final fun setAlwaysOnTop(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public open override /*1*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
            public open override /*1*/ fun setBounds(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setBoundsOp(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open fun setClientSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setComponentOrientation(/*0*/ p0: [ERROR : Unresolved java classifier: ComponentOrientation]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setComponentZOrder(/*0*/ p0: java.awt.Component, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setDropTarget(/*0*/ p0: [ERROR : Unresolved java classifier: DropTarget]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public final override /*1*/ fun setFocusCycleRoot(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeys(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalKeysEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setFocusTraversalKeys_NoIDCheck(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Set<java.awt.AWTKeyStroke?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusTraversalPolicy(/*0*/ p0: [ERROR : Unresolved java classifier: FocusTraversalPolicy]?): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun setFocusTraversalPolicyProvider(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFocusable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setFocusableWindowState(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setGCFromPeer(): kotlin.Unit
            public open fun setIconImage(/*0*/ p0: [ERROR : Unresolved java classifier: Image]?): kotlin.Unit
            public open fun setIconImages(/*0*/ p0: kotlin.List<[ERROR : Unresolved java classifier: Image]?>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setIgnoreRepaint(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLayout(/*0*/ p0: [ERROR : Unresolved java classifier: LayoutManager]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocale(/*0*/ p0: java.util.Locale?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setLocationByPlatform(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setLocationRelativeTo(/*0*/ p0: java.awt.Component?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMaximumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open override /*1*/ fun setMinimumSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public/*package*/ open fun setModalBlocked(/*0*/ p0: [ERROR : Unresolved java classifier: Dialog]?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            public open fun setModalExclusionType(/*0*/ p0: [ERROR : Unresolved java classifier: ModalExclusionType]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setPreferredSize(/*0*/ p0: java.awt.Dimension?): kotlin.Unit
            public open override /*1*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
            public open override /*1*/ fun setSize(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open fun setTemporaryLostComponent(/*0*/ p0: java.awt.Component?): java.awt.Component?
            public open override /*1*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun show(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun show(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun size(): java.awt.Dimension
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShape(/*0*/ p0: [ERROR : Unresolved java classifier: Region]?): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun subtractAndApplyShapeBelowMe(): kotlin.Unit
            public open fun toBack(): kotlin.Unit
            public/*package*/ final fun toBack_NoClientCode(): kotlin.Unit
            public open fun toFront(): kotlin.Unit
            public/*package*/ final fun toFront_NoClientCode(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun transferFocus(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusBackward(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusDownCycle(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun transferFocusUpCycle(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun update(/*0*/ p0: [ERROR : Unresolved java classifier: Graphics]): kotlin.Unit
            public/*package*/ open fun updateChildrenBlocking(): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun updateCursorImmediately(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun validate(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun validateTree(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            protected/*protected and package*/ open inner class AccessibleAWTWindow : java.awt.Container.AccessibleAWTContainer {
                protected/*protected and package*/ constructor AccessibleAWTWindow()
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTComponentHandler: [ERROR : Unresolved java classifier: ComponentListener]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleAWTFocusHandler: [ERROR : Unresolved java classifier: FocusListener]?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var accessibleContainerHandler: [ERROR : Unresolved java classifier: ContainerListener]?
                public open override /*1*/ /*fake_override*/ fun addFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addPropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun getAccessibleAt(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ /*fake_override*/ fun getAccessibleChild(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ /*fake_override*/ fun getAccessibleChildrenCount(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleComponent(): [ERROR : Unresolved java classifier: AccessibleComponent]
                public open override /*1*/ /*fake_override*/ fun getAccessibleDescription(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleIndexInParent(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun getAccessibleName(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun getAccessibleParent(): [ERROR : Unresolved java classifier: Accessible]?
                public open override /*1*/ fun getAccessibleRole(): [ERROR : Unresolved java classifier: AccessibleRole]
                public open override /*1*/ fun getAccessibleStateSet(): [ERROR : Unresolved java classifier: AccessibleStateSet]?
                public open override /*1*/ /*fake_override*/ fun getBackground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getBounds(): [ERROR : Unresolved java classifier: Rectangle]?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun getCursor(): [ERROR : Unresolved java classifier: Cursor]?
                public open override /*1*/ /*fake_override*/ fun getFont(): [ERROR : Unresolved java classifier: Font]?
                public open override /*1*/ /*fake_override*/ fun getFontMetrics(/*0*/ p0: [ERROR : Unresolved java classifier: Font]): [ERROR : Unresolved java classifier: FontMetrics]?
                public open override /*1*/ /*fake_override*/ fun getForeground(): [ERROR : Unresolved java classifier: Color]?
                public open override /*1*/ /*fake_override*/ fun getLocale(): java.util.Locale?
                public open override /*1*/ /*fake_override*/ fun getLocation(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getLocationOnScreen(): [ERROR : Unresolved java classifier: Point]?
                public open override /*1*/ /*fake_override*/ fun getSize(): java.awt.Dimension?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEnabled(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isFocusTraversable(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isShowing(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isVisible(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removeFocusListener(/*0*/ p0: [ERROR : Unresolved java classifier: FocusListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun removePropertyChangeListener(/*0*/ p0: [ERROR : Unresolved java classifier: PropertyChangeListener]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun requestFocus(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBackground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setBounds(/*0*/ p0: [ERROR : Unresolved java classifier: Rectangle]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setCursor(/*0*/ p0: [ERROR : Unresolved java classifier: Cursor]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setEnabled(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setFont(/*0*/ p0: [ERROR : Unresolved java classifier: Font]?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setForeground(/*0*/ p0: [ERROR : Unresolved java classifier: Color]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setLocation(/*0*/ p0: [ERROR : Unresolved java classifier: Point]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setSize(/*0*/ p0: java.awt.Dimension): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setVisible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class WindowDisposerRecord {
                public/*package*/ constructor WindowDisposerRecord(/*0*/ p0: [ERROR : Unresolved java classifier: AppContext]?, /*1*/ p1: java.awt.Window?)
                public/*package*/ final val context: [ERROR : Unresolved java classifier: WeakReference<AppContext>]?
                public/*package*/ final val owner: [ERROR : Unresolved java classifier: WeakReference<Window>]?
                public/*package*/ final val weakThis: [ERROR : Unresolved java classifier: WeakReference]?
                public open fun dispose(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        package java.awt.AWTKeyStroke {
            public/*package*/ val serialVersionUID: kotlin.Long = -6430539691155161871.toLong()
            public open fun getAWTKeyStroke(/*0*/ p0: kotlin.Char): java.awt.AWTKeyStroke
            public open fun getAWTKeyStroke(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Int): java.awt.AWTKeyStroke
            public open fun getAWTKeyStroke(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.awt.AWTKeyStroke
            public open fun getAWTKeyStroke(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): java.awt.AWTKeyStroke
            public open fun getAWTKeyStroke(/*0*/ p0: kotlin.String): java.awt.AWTKeyStroke
            public open fun getAWTKeyStrokeForEvent(/*0*/ p0: [ERROR : Unresolved java classifier: KeyEvent]): java.awt.AWTKeyStroke?
            public/*package*/ open fun getModifiersText(/*0*/ p0: kotlin.Int): kotlin.String?
            public/*package*/ open fun getVKText(/*0*/ p0: kotlin.Int): kotlin.String?
            protected/*protected static*/ open fun registerSubclass(/*0*/ p0: java.lang.Class<out kotlin.Any?>): kotlin.Unit
        }
        
        package java.awt.Component {
            public val BOTTOM_ALIGNMENT: kotlin.Float = 1.0.toFloat()
            public val CENTER_ALIGNMENT: kotlin.Float = 0.5.toFloat()
            public val LEFT_ALIGNMENT: kotlin.Float = 0.0.toFloat()
            public/*package*/ val LOCK: kotlin.Any
            public val RIGHT_ALIGNMENT: kotlin.Float = 1.0.toFloat()
            public val TOP_ALIGNMENT: kotlin.Float = 0.0.toFloat()
            public/*package*/ val actionListenerK: kotlin.String = "actionL"
            public/*package*/ val adjustmentListenerK: kotlin.String = "adjustmentL"
            public/*package*/ val componentListenerK: kotlin.String = "componentL"
            public/*package*/ val containerListenerK: kotlin.String = "containerL"
            public/*package*/ val focusListenerK: kotlin.String = "focusL"
            public/*package*/ val hierarchyBoundsListenerK: kotlin.String = "hierarchyBoundsL"
            public/*package*/ val hierarchyListenerK: kotlin.String = "hierarchyL"
            public/*package*/ var incRate: kotlin.Int
            public/*package*/ val inputMethodListenerK: kotlin.String = "inputMethodL"
            public/*package*/ var isInc: kotlin.Boolean
            public/*package*/ val itemListenerK: kotlin.String = "itemL"
            public/*package*/ val keyListenerK: kotlin.String = "keyL"
            public/*package*/ val mouseListenerK: kotlin.String = "mouseL"
            public/*package*/ val mouseMotionListenerK: kotlin.String = "mouseMotionL"
            public/*package*/ val mouseWheelListenerK: kotlin.String = "mouseWheelL"
            public/*package*/ val ownedWindowK: kotlin.String = "ownedL"
            public/*package*/ val textListenerK: kotlin.String = "textL"
            public/*package*/ val windowFocusListenerK: kotlin.String = "windowFocusL"
            public/*package*/ val windowListenerK: kotlin.String = "windowL"
            public/*package*/ val windowStateListenerK: kotlin.String = "windowStateL"
            public/*package*/ open fun getContainingWindow(/*0*/ p0: java.awt.Component?): java.awt.Window?
            public/*package*/ open fun isInstanceOf(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.String?): kotlin.Boolean
            public/*package*/ open fun postNextFocusHelper(/*0*/ p0: java.awt.Component?): kotlin.Boolean
            public/*package*/ open fun setRequestFocusController(/*0*/ p0: [ERROR : Unresolved java classifier: RequestFocusController]?): kotlin.Unit
        }
        
        package java.awt.Container {
            public/*package*/ val INCLUDE_SELF: kotlin.Boolean = true
            public/*package*/ val SEARCH_HEAVYWEIGHTS: kotlin.Boolean = true
            public/*package*/ /*synthesized*/ fun EventTargetFilter(/*0*/ function: (java.awt.Component?) -> kotlin.Boolean): java.awt.Container.EventTargetFilter
            
            package java.awt.Container.DropTargetEventTargetFilter {
                public/*package*/ val FILTER: java.awt.Container.EventTargetFilter
            }
            
            package java.awt.Container.MouseEventTargetFilter {
                public/*package*/ val FILTER: java.awt.Container.EventTargetFilter
            }
        }
        
        package java.awt.Dimension {
        }
        
        package java.awt.Frame {
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val CROSSHAIR_CURSOR: kotlin.Int = 1
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val DEFAULT_CURSOR: kotlin.Int = 0
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val E_RESIZE_CURSOR: kotlin.Int = 11
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val HAND_CURSOR: kotlin.Int = 12
            public val ICONIFIED: kotlin.Int = 1
            public val MAXIMIZED_BOTH: kotlin.Int = 6
            public val MAXIMIZED_HORIZ: kotlin.Int = 2
            public val MAXIMIZED_VERT: kotlin.Int = 4
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val MOVE_CURSOR: kotlin.Int = 13
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val NE_RESIZE_CURSOR: kotlin.Int = 7
            public val NORMAL: kotlin.Int = 0
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val NW_RESIZE_CURSOR: kotlin.Int = 6
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val N_RESIZE_CURSOR: kotlin.Int = 8
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val SE_RESIZE_CURSOR: kotlin.Int = 5
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val SW_RESIZE_CURSOR: kotlin.Int = 4
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val S_RESIZE_CURSOR: kotlin.Int = 9
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val TEXT_CURSOR: kotlin.Int = 2
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val WAIT_CURSOR: kotlin.Int = 3
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val W_RESIZE_CURSOR: kotlin.Int = 10
            public open fun getFrames(): kotlin.Array<java.awt.Frame>
        }
        
        package java.awt.GridBagConstraints {
            public val ABOVE_BASELINE: kotlin.Int = 1024
            public val ABOVE_BASELINE_LEADING: kotlin.Int = 1280
            public val ABOVE_BASELINE_TRAILING: kotlin.Int = 1536
            public val BASELINE: kotlin.Int = 256
            public val BASELINE_LEADING: kotlin.Int = 512
            public val BASELINE_TRAILING: kotlin.Int = 768
            public val BELOW_BASELINE: kotlin.Int = 1792
            public val BELOW_BASELINE_LEADING: kotlin.Int = 2048
            public val BELOW_BASELINE_TRAILING: kotlin.Int = 2304
            public val BOTH: kotlin.Int = 1
            public val CENTER: kotlin.Int = 10
            public val EAST: kotlin.Int = 13
            public val FIRST_LINE_END: kotlin.Int = 24
            public val FIRST_LINE_START: kotlin.Int = 23
            public val HORIZONTAL: kotlin.Int = 2
            public val LAST_LINE_END: kotlin.Int = 26
            public val LAST_LINE_START: kotlin.Int = 25
            public val LINE_END: kotlin.Int = 22
            public val LINE_START: kotlin.Int = 21
            public val NONE: kotlin.Int = 0
            public val NORTH: kotlin.Int = 11
            public val NORTHEAST: kotlin.Int = 12
            public val NORTHWEST: kotlin.Int = 18
            public val PAGE_END: kotlin.Int = 20
            public val PAGE_START: kotlin.Int = 19
            public val RELATIVE: kotlin.Int = -1
            public val REMAINDER: kotlin.Int = 0
            public val SOUTH: kotlin.Int = 15
            public val SOUTHEAST: kotlin.Int = 14
            public val SOUTHWEST: kotlin.Int = 16
            public val VERTICAL: kotlin.Int = 3
            public val WEST: kotlin.Int = 17
        }
        
        package java.awt.Window {
            public/*package*/ val OPENED: kotlin.Int = 1
            public/*package*/ var systemSyncLWRequests: kotlin.Boolean
            public/*package*/ open fun getAllUnblockedWindows(): [ERROR : Unresolved java classifier: IdentityArrayList<Window>]?
            public/*package*/ open fun getAllWindows(): [ERROR : Unresolved java classifier: IdentityArrayList<Window>]?
            public open fun getOwnerlessWindows(): kotlin.Array<java.awt.Window>
            public open fun getWindows(): kotlin.Array<java.awt.Window>
            public/*package*/ open fun updateChildFocusableWindowState(/*0*/ p0: java.awt.Window?): kotlin.Unit
        }
        
        package java.awt.event {
            public /*synthesized*/ fun ActionListener(/*0*/ function: (java.awt.event.ActionEvent) -> kotlin.Unit): java.awt.event.ActionListener
            
            public open class ActionEvent {
                public constructor ActionEvent(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?)
                public constructor ActionEvent(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Int)
                public constructor ActionEvent(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Long, /*4*/ p4: kotlin.Int)
                public/*package*/ final var actionCommand: kotlin.String?
                public/*package*/ final var modifiers: kotlin.Int
                public/*package*/ final var `when`: kotlin.Long
                public open fun getActionCommand(): kotlin.String?
                public open fun getModifiers(): kotlin.Int
                public open fun getWhen(): kotlin.Long
                public open fun paramString(): kotlin.String
            }
            
            public trait ActionListener : java.util.EventListener {
                public abstract fun actionPerformed(/*0*/ p0: java.awt.event.ActionEvent): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            package java.awt.event.ActionEvent {
                public val ACTION_FIRST: kotlin.Int = 1001
                public val ACTION_LAST: kotlin.Int = 1001
                public val ACTION_PERFORMED: kotlin.Int = 1001
                public val ALT_MASK: kotlin.Int = 8
                public val CTRL_MASK: kotlin.Int = 2
                public val META_MASK: kotlin.Int = 4
                public val SHIFT_MASK: kotlin.Int = 1
            }
        }
    }
    
    package java.beans {
        
        package java.beans.beancontext {
            public /*synthesized*/ fun BeanContextServiceRevokedListener(/*0*/ function: ([ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]) -> kotlin.Unit): java.beans.beancontext.BeanContextServiceRevokedListener
            
            public trait BeanContextServiceRevokedListener : java.util.EventListener {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public abstract fun serviceRevoked(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public open class BeanContextServicesSupport {
                public constructor BeanContextServicesSupport()
                public constructor BeanContextServicesSupport(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?)
                public constructor BeanContextServicesSupport(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: java.util.Locale?)
                public constructor BeanContextServicesSupport(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: java.util.Locale?, /*2*/ p2: kotlin.Boolean)
                public constructor BeanContextServicesSupport(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: java.util.Locale?, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Boolean)
                protected/*protected and package*/ final var bcsListeners: java.util.ArrayList<out kotlin.Any?>?
                protected/*protected and package*/ final var proxy: java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider?
                protected/*protected and package*/ final var serializable: kotlin.Int
                protected/*protected and package*/ final var services: java.util.HashMap<out kotlin.Any?, out kotlin.Any?>?
                public open fun addBeanContextServicesListener(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServicesListener]): kotlin.Unit
                public open fun addService(/*0*/ p0: java.lang.Class<out kotlin.Any?>, /*1*/ p1: [ERROR : Unresolved java classifier: BeanContextServiceProvider]): kotlin.Boolean
                protected/*protected and package*/ open fun addService(/*0*/ p0: java.lang.Class<out kotlin.Any?>, /*1*/ p1: [ERROR : Unresolved java classifier: BeanContextServiceProvider], /*2*/ p2: kotlin.Boolean): kotlin.Boolean
                protected/*protected and package*/ open fun bcsPreDeserializationHook(/*0*/ p0: java.io.ObjectInputStream): kotlin.Unit
                protected/*protected and package*/ open fun bcsPreSerializationHook(/*0*/ p0: java.io.ObjectOutputStream): kotlin.Unit
                protected/*protected and package*/ open fun childJustRemovedHook(/*0*/ p0: kotlin.Any?, /*1*/ p1: [ERROR : Unresolved java classifier: BCSChild]): kotlin.Unit
                protected/*protected and package*/ open fun createBCSChild(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): [ERROR : Unresolved java classifier: BCSChild]
                protected/*protected and package*/ open fun createBCSSServiceProvider(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?): java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider
                protected/*protected and package*/ final fun fireServiceAdded(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceAvailableEvent]?): kotlin.Unit
                protected/*protected and package*/ final fun fireServiceAdded(/*0*/ p0: java.lang.Class<out kotlin.Any?>?): kotlin.Unit
                protected/*protected and package*/ final fun fireServiceRevoked(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]?): kotlin.Unit
                protected/*protected and package*/ final fun fireServiceRevoked(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                public open fun getBeanContextServicesPeer(): [ERROR : Unresolved java classifier: BeanContextServices]?
                public open fun getCurrentServiceClasses(): kotlin.MutableIterator<kotlin.Any?>
                public open fun getCurrentServiceSelectors(/*0*/ p0: java.lang.Class<out kotlin.Any?>?): kotlin.MutableIterator<kotlin.Any?>?
                public final /*synthesized*/ fun getService(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextChild], /*1*/ p1: kotlin.Any, /*2*/ p2: java.lang.Class<out kotlin.Any?>, /*3*/ p3: kotlin.Any?, /*4*/ p4: ([ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]) -> kotlin.Unit): kotlin.Any?
                public open fun getService(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextChild], /*1*/ p1: kotlin.Any, /*2*/ p2: java.lang.Class<out kotlin.Any?>, /*3*/ p3: kotlin.Any?, /*4*/ p4: java.beans.beancontext.BeanContextServiceRevokedListener): kotlin.Any?
                public open fun hasService(/*0*/ p0: java.lang.Class<out kotlin.Any?>): kotlin.Boolean
                public open fun initialize(): kotlin.Unit
                protected/*protected and package*/ open fun initializeBeanContextResources(): kotlin.Unit
                protected/*protected and package*/ open fun releaseBeanContextResources(): kotlin.Unit
                public open fun releaseService(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextChild], /*1*/ p1: kotlin.Any, /*2*/ p2: kotlin.Any): kotlin.Unit
                public open fun removeBeanContextServicesListener(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServicesListener]): kotlin.Unit
                public open fun revokeService(/*0*/ p0: java.lang.Class<out kotlin.Any?>, /*1*/ p1: [ERROR : Unresolved java classifier: BeanContextServiceProvider], /*2*/ p2: kotlin.Boolean): kotlin.Unit
                public open fun serviceAvailable(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceAvailableEvent]): kotlin.Unit
                public open fun serviceRevoked(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]): kotlin.Unit
                
                protected/*protected and package*/ open inner class BCSSChild {
                    public/*package*/ constructor BCSSChild(/*0*/ p2: kotlin.Any?, /*1*/ p3: kotlin.Any?)
                    public/*package*/ open fun cleanupReferences(): kotlin.Unit
                    public/*package*/ open fun releaseService(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Unit
                    public/*package*/ open fun revokeAllDelegatedServicesNow(): kotlin.Unit
                    public/*package*/ open fun revokeService(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean): kotlin.Unit
                    public/*package*/ final /*synthesized*/ fun usingService(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?, /*2*/ p2: java.lang.Class<out kotlin.Any?>?, /*3*/ p3: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?, /*4*/ p4: kotlin.Boolean, /*5*/ p5: (([ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]) -> kotlin.Unit)?): kotlin.Unit
                    public/*package*/ open fun usingService(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?, /*2*/ p2: java.lang.Class<out kotlin.Any?>?, /*3*/ p3: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?, /*4*/ p4: kotlin.Boolean, /*5*/ p5: java.beans.beancontext.BeanContextServiceRevokedListener?): kotlin.Unit
                    
                    public/*package*/ open inner class BCSSCServiceClassRef : java.lang.Object {
                        public/*package*/ constructor BCSSCServiceClassRef(/*0*/ p2: java.lang.Class<out kotlin.Any?>?, /*1*/ p3: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?, /*2*/ p4: kotlin.Boolean)
                        public/*package*/ final var delegateProvider: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                        public/*package*/ final var delegateRefs: kotlin.Int
                        public/*package*/ final var requestors: java.util.HashMap<out kotlin.Any?, out kotlin.Any?>?
                        public/*package*/ final var serviceClass: java.lang.Class<out kotlin.Any?>?
                        public/*package*/ final var serviceProvider: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                        public/*package*/ final var serviceRefs: kotlin.Int
                        public/*package*/ open fun addRef(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                        public/*package*/ final /*synthesized*/ fun addRequestor(/*0*/ p0: kotlin.Any?, /*1*/ p1: (([ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]) -> kotlin.Unit)?): kotlin.Unit
                        public/*package*/ open fun addRequestor(/*0*/ p0: kotlin.Any?, /*1*/ p1: java.beans.beancontext.BeanContextServiceRevokedListener?): kotlin.Unit
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public/*package*/ open fun cloneOfEntries(): kotlin.MutableIterator<kotlin.Any?>?
                        public/*package*/ open fun entries(): kotlin.MutableIterator<kotlin.Any?>?
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public/*package*/ open fun getDelegateProvider(): [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                        public/*package*/ open fun getDelegateRefs(): kotlin.Int
                        public/*package*/ open fun getRefs(): kotlin.Int
                        public/*package*/ open fun getServiceClass(): java.lang.Class<out kotlin.Any?>?
                        public/*package*/ open fun getServiceProvider(): [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                        public/*package*/ open fun getServiceRefs(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ open fun isDelegated(): kotlin.Boolean
                        public/*package*/ open fun isEmpty(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public/*package*/ open fun releaseRef(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                        public/*package*/ open fun removeRequestor(/*0*/ p0: kotlin.Any?): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public/*package*/ open fun verifyAndMaybeSetProvider(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                        public/*package*/ final /*synthesized*/ fun verifyRequestor(/*0*/ p0: kotlin.Any?, /*1*/ p1: (([ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]) -> kotlin.Unit)?): kotlin.Unit
                        public/*package*/ open fun verifyRequestor(/*0*/ p0: kotlin.Any?, /*1*/ p1: java.beans.beancontext.BeanContextServiceRevokedListener?): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                    
                    public/*package*/ open inner class BCSSCServiceRef : java.lang.Object {
                        public/*package*/ constructor BCSSCServiceRef(/*0*/ p2: java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef?, /*1*/ p3: kotlin.Boolean)
                        public/*package*/ final var delegated: kotlin.Boolean
                        public/*package*/ final var refCnt: kotlin.Int
                        public/*package*/ final var serviceClassRef: java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef?
                        public/*package*/ open fun addRef(): kotlin.Unit
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public/*package*/ open fun getServiceClassRef(): java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef?
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ open fun isDelegated(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public/*package*/ open fun release(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                protected/*protected and package*/ open inner class BCSSProxyServiceProvider : java.beans.beancontext.BeanContextServiceRevokedListener {
                    public/*package*/ constructor BCSSProxyServiceProvider(/*0*/ p2: [ERROR : Unresolved java classifier: BeanContextServices]?)
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open fun getCurrentServiceSelectors(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: java.lang.Class<out kotlin.Any?>?): kotlin.MutableIterator<kotlin.Any?>?
                    public open fun getService(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: kotlin.Any?, /*2*/ p2: java.lang.Class<out kotlin.Any?>?, /*3*/ p3: kotlin.Any?): kotlin.Any?
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open fun releaseService(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServices]?, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Any?): kotlin.Unit
                    public open override /*1*/ fun serviceRevoked(/*0*/ p0: [ERROR : Unresolved java classifier: BeanContextServiceRevokedEvent]): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
                
                protected/*protected static*/ open class BCSSServiceProvider : java.io.Serializable {
                    public/*package*/ constructor BCSSServiceProvider(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?)
                    protected/*protected and package*/ final var serviceProvider: [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    protected/*protected and package*/ open fun getServiceProvider(): [ERROR : Unresolved java classifier: BeanContextServiceProvider]?
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
            }
            
            package java.beans.beancontext.BeanContextServicesSupport {
                protected/*protected static*/ fun getChildBeanContextServicesListener(/*0*/ p0: kotlin.Any?): [ERROR : Unresolved java classifier: BeanContextServicesListener]?
            }
        }
    }
    
    package java.io {
        public /*synthesized*/ fun Closeable(/*0*/ function: () -> kotlin.Unit): java.io.Closeable
        public /*synthesized*/ fun FileFilter(/*0*/ function: (java.io.File) -> kotlin.Boolean): java.io.FileFilter
        public /*synthesized*/ fun FilenameFilter(/*0*/ function: (java.io.File, kotlin.String) -> kotlin.Boolean): java.io.FilenameFilter
        
        public open class BufferedInputStream {
            public constructor BufferedInputStream(/*0*/ p0: java.io.InputStream)
            public constructor BufferedInputStream(/*0*/ p0: java.io.InputStream, /*1*/ p1: kotlin.Int)
            protected/*protected and package*/ final var buf: kotlin.ByteArray?
            protected/*protected and package*/ final var count: kotlin.Int
            protected/*protected and package*/ final var marklimit: kotlin.Int
            protected/*protected and package*/ final var markpos: kotlin.Int
            protected/*protected and package*/ final var pos: kotlin.Int
            public open fun available(): kotlin.Int
            public open fun close(): kotlin.Unit
            public open fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun markSupported(): kotlin.Boolean
            public open fun read(): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun reset(): kotlin.Unit
            public open fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
        }
        
        public open class BufferedOutputStream : java.io.FilterOutputStream {
            public constructor BufferedOutputStream(/*0*/ p0: java.io.OutputStream)
            public constructor BufferedOutputStream(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.Int)
            protected/*protected and package*/ final var buf: kotlin.ByteArray?
            protected/*protected and package*/ final var count: kotlin.Int
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var out: java.io.OutputStream?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun flush(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public open class BufferedReader : java.io.Reader {
            public constructor BufferedReader(/*0*/ p0: java.io.Reader)
            public constructor BufferedReader(/*0*/ p0: java.io.Reader, /*1*/ p1: kotlin.Int)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun read(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.CharArray): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun readLine(): kotlin.String?
            public/*package*/ open fun readLine(/*0*/ p0: kotlin.Boolean): kotlin.String?
            public open override /*1*/ fun ready(): kotlin.Boolean
            public open override /*1*/ fun reset(): kotlin.Unit
            public open override /*1*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class BufferedWriter : java.io.Writer {
            public constructor BufferedWriter(/*0*/ p0: java.io.Writer)
            public constructor BufferedWriter(/*0*/ p0: java.io.Writer, /*1*/ p1: kotlin.Int)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.Char): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.io.Writer
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun flush(): kotlin.Unit
            public/*package*/ open fun flushBuffer(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun newLine(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.String): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        }
        
        public open class ByteArrayInputStream : java.io.InputStream {
            public constructor ByteArrayInputStream(/*0*/ p0: kotlin.ByteArray)
            public constructor ByteArrayInputStream(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            protected/*protected and package*/ final var buf: kotlin.ByteArray?
            protected/*protected and package*/ final var count: kotlin.Int
            protected/*protected and package*/ final var mark: kotlin.Int
            protected/*protected and package*/ final var pos: kotlin.Int
            public open override /*1*/ fun available(): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun read(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open override /*1*/ fun reset(): kotlin.Unit
            public open override /*1*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class ByteArrayOutputStream : java.io.OutputStream {
            public constructor ByteArrayOutputStream()
            public constructor ByteArrayOutputStream(/*0*/ p0: kotlin.Int)
            protected/*protected and package*/ final var buf: kotlin.ByteArray?
            protected/*protected and package*/ final var count: kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun flush(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun reset(): kotlin.Unit
            public open fun size(): kotlin.Int
            public open fun toByteArray(): kotlin.ByteArray
            public open override /*1*/ fun toString(): kotlin.String
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun toString(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.String): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun writeTo(/*0*/ p0: java.io.OutputStream): kotlin.Unit
        }
        
        public trait Closeable : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class DataInputStream {
            public constructor DataInputStream(/*0*/ p0: java.io.InputStream)
            public final fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public final fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public final fun readBoolean(): kotlin.Boolean
            public final fun readByte(): kotlin.Byte
            public final fun readChar(): kotlin.Char
            public final fun readDouble(): kotlin.Double
            public final fun readFloat(): kotlin.Float
            public final fun readFully(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public final fun readFully(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public final fun readInt(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public final fun readLine(): kotlin.String?
            public final fun readLong(): kotlin.Long
            public final fun readShort(): kotlin.Short
            public final fun readUTF(): kotlin.String
            public final fun readUnsignedByte(): kotlin.Int
            public final fun readUnsignedShort(): kotlin.Int
            public final fun skipBytes(/*0*/ p0: kotlin.Int): kotlin.Int
        }
        
        public open class EOFException : java.io.IOException {
            public constructor EOFException()
            public constructor EOFException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait Externalizable : java.io.Serializable {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun readExternal(/*0*/ p0: java.io.ObjectInput): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun writeExternal(/*0*/ p0: java.io.ObjectOutput): kotlin.Unit
        }
        
        public open class File : java.io.Serializable, kotlin.Comparable<java.io.File> {
            public constructor File(/*0*/ p0: java.io.File?, /*1*/ p1: kotlin.String)
            public constructor File(/*0*/ p0: java.net.URI)
            public constructor File(/*0*/ p0: kotlin.String)
            private constructor File(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.File?)
            private constructor File(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int)
            public constructor File(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String)
            public open fun canExecute(): kotlin.Boolean
            public open fun canRead(): kotlin.Boolean
            public open fun canWrite(): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun compareTo(/*0*/ other: java.io.File): kotlin.Int
            public open fun createNewFile(): kotlin.Boolean
            public open fun delete(): kotlin.Boolean
            public open fun deleteOnExit(): kotlin.Unit
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun exists(): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAbsoluteFile(): java.io.File
            public open fun getAbsolutePath(): kotlin.String
            public open fun getCanonicalFile(): java.io.File
            public open fun getCanonicalPath(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getFreeSpace(): kotlin.Long
            public open fun getName(): kotlin.String
            public open fun getParent(): kotlin.String?
            public open fun getParentFile(): java.io.File?
            public open fun getPath(): kotlin.String
            public/*package*/ open fun getPrefixLength(): kotlin.Int
            public open fun getTotalSpace(): kotlin.Long
            public open fun getUsableSpace(): kotlin.Long
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun isAbsolute(): kotlin.Boolean
            public open fun isDirectory(): kotlin.Boolean
            public open fun isFile(): kotlin.Boolean
            public open fun isHidden(): kotlin.Boolean
            public open fun lastModified(): kotlin.Long
            public open fun length(): kotlin.Long
            public open fun list(): kotlin.Array<kotlin.String>?
            public final /*synthesized*/ fun list(/*0*/ filter: ((java.io.File, kotlin.String) -> kotlin.Boolean)?): kotlin.Array<kotlin.String>?
            public open fun list(/*0*/ filter: java.io.FilenameFilter?): kotlin.Array<kotlin.String>?
            public open fun listFiles(): kotlin.Array<java.io.File>?
            public final /*synthesized*/ fun listFiles(/*0*/ filter: ((java.io.File) -> kotlin.Boolean)?): kotlin.Array<java.io.File>?
            public final /*synthesized*/ fun listFiles(/*0*/ filter: ((java.io.File, kotlin.String) -> kotlin.Boolean)?): kotlin.Array<java.io.File>?
            public open fun listFiles(/*0*/ filter: java.io.FileFilter?): kotlin.Array<java.io.File>?
            public open fun listFiles(/*0*/ filter: java.io.FilenameFilter?): kotlin.Array<java.io.File>?
            public open fun mkdir(): kotlin.Boolean
            public open fun mkdirs(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun renameTo(/*0*/ p0: java.io.File): kotlin.Boolean
            public open fun setExecutable(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open fun setExecutable(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open fun setLastModified(/*0*/ p0: kotlin.Long): kotlin.Boolean
            public open fun setReadOnly(): kotlin.Boolean
            public open fun setReadable(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open fun setReadable(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open fun setWritable(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open fun setWritable(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
            public open override /*2*/ fun toString(): kotlin.String
            public open fun toURI(): java.net.URI
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun toURL(): java.net.URL
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class LazyInitialization : java.lang.Object {
                private constructor LazyInitialization()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public trait FileFilter : java.lang.Object {
            public abstract fun accept(/*0*/ p0: java.io.File): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class FileInputStream : java.io.InputStream {
            public constructor FileInputStream(/*0*/ p0: [ERROR : Unresolved java classifier: FileDescriptor])
            public constructor FileInputStream(/*0*/ p0: java.io.File)
            public constructor FileInputStream(/*0*/ p0: kotlin.String)
            public open override /*1*/ fun available(): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ fun finalize(): kotlin.Unit
            public open fun getChannel(): [ERROR : Unresolved java classifier: FileChannel]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getFD(): [ERROR : Unresolved java classifier: FileDescriptor]
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun read(): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
            public open override /*1*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class FileNotFoundException : java.io.IOException {
            public constructor FileNotFoundException()
            public constructor FileNotFoundException(/*0*/ p0: kotlin.String?)
            private constructor FileNotFoundException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class FileOutputStream : java.io.OutputStream {
            public constructor FileOutputStream(/*0*/ p0: [ERROR : Unresolved java classifier: FileDescriptor])
            public constructor FileOutputStream(/*0*/ p0: java.io.File)
            public constructor FileOutputStream(/*0*/ p0: java.io.File, /*1*/ p1: kotlin.Boolean)
            public constructor FileOutputStream(/*0*/ p0: kotlin.String)
            public constructor FileOutputStream(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun flush(): kotlin.Unit
            public open fun getChannel(): [ERROR : Unresolved java classifier: FileChannel]
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getFD(): [ERROR : Unresolved java classifier: FileDescriptor]
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public open class FileReader : java.io.InputStreamReader {
            public constructor FileReader(/*0*/ p0: [ERROR : Unresolved java classifier: FileDescriptor])
            public constructor FileReader(/*0*/ p0: java.io.File)
            public constructor FileReader(/*0*/ p0: kotlin.String)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getEncoding(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun read(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.CharArray): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun ready(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class FileWriter : java.io.OutputStreamWriter {
            public constructor FileWriter(/*0*/ p0: [ERROR : Unresolved java classifier: FileDescriptor])
            public constructor FileWriter(/*0*/ p0: java.io.File)
            public constructor FileWriter(/*0*/ p0: java.io.File, /*1*/ p1: kotlin.Boolean)
            public constructor FileWriter(/*0*/ p0: kotlin.String)
            public constructor FileWriter(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.Char): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.io.Writer
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun flush(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun flushBuffer(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getEncoding(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.String): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        }
        
        public trait FilenameFilter : java.lang.Object {
            public abstract fun accept(/*0*/ p0: java.io.File, /*1*/ p1: kotlin.String): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class FilterOutputStream : java.io.OutputStream {
            public constructor FilterOutputStream(/*0*/ p0: java.io.OutputStream)
            protected/*protected and package*/ final var out: java.io.OutputStream?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun flush(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public open class IOException : java.lang.Exception {
            public constructor IOException()
            public constructor IOException(/*0*/ p0: kotlin.String?)
            public constructor IOException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor IOException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class InputStream : java.io.Closeable {
            public constructor InputStream()
            public open fun available(): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun read(): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun reset(): kotlin.Unit
            public open fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class InputStreamReader : java.io.Reader {
            public constructor InputStreamReader(/*0*/ p0: java.io.InputStream)
            public constructor InputStreamReader(/*0*/ p0: java.io.InputStream, /*1*/ p1: [ERROR : Unresolved java classifier: CharsetDecoder])
            public constructor InputStreamReader(/*0*/ p0: java.io.InputStream, /*1*/ p1: java.nio.charset.Charset)
            public constructor InputStreamReader(/*0*/ p0: java.io.InputStream, /*1*/ p1: kotlin.String)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getEncoding(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun read(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.CharArray): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open override /*1*/ fun ready(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait ObjectInput {
            public abstract fun available(): kotlin.Int
            public abstract fun close(): kotlin.Unit
            public abstract fun read(): kotlin.Int
            public abstract fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public abstract fun read(/*0*/ p0: kotlin.ByteArray?): kotlin.Int
            public abstract fun readObject(): kotlin.Any?
            public abstract fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
        }
        
        public open class ObjectInputStream : java.io.InputStream, java.io.ObjectInput {
            protected/*protected and package*/ constructor ObjectInputStream()
            public constructor ObjectInputStream(/*0*/ p0: java.io.InputStream?)
            public open override /*2*/ fun available(): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*2*/ fun close(): kotlin.Unit
            public open fun defaultReadObject(): kotlin.Unit
            protected/*protected and package*/ open fun enableResolveObject(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun read(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public open override /*2*/ fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.ByteArray?): kotlin.Int
            public open fun readBoolean(): kotlin.Boolean
            public open fun readByte(): kotlin.Byte
            public open fun readChar(): kotlin.Char
            protected/*protected and package*/ open fun readClassDescriptor(): [ERROR : Unresolved java classifier: ObjectStreamClass]
            public open fun readDouble(): kotlin.Double
            public open fun readFields(): java.io.ObjectInputStream.GetField
            public open fun readFloat(): kotlin.Float
            public open fun readFully(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open fun readFully(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun readInt(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun readLine(): kotlin.String?
            public open fun readLong(): kotlin.Long
            public final override /*1*/ fun readObject(): kotlin.Any?
            protected/*protected and package*/ open fun readObjectOverride(): kotlin.Any?
            public open fun readShort(): kotlin.Short
            protected/*protected and package*/ open fun readStreamHeader(): kotlin.Unit
            public/*package*/ open fun readTypeString(): kotlin.String?
            public open fun readUTF(): kotlin.String
            public open fun readUnshared(): kotlin.Any?
            public open fun readUnsignedByte(): kotlin.Int
            public open fun readUnsignedShort(): kotlin.Int
            public open fun registerValidation(/*0*/ p0: [ERROR : Unresolved java classifier: ObjectInputValidation], /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
            protected/*protected and package*/ open fun resolveClass(/*0*/ p0: [ERROR : Unresolved java classifier: ObjectStreamClass]): java.lang.Class<out kotlin.Any?>
            protected/*protected and package*/ open fun resolveObject(/*0*/ p0: kotlin.Any?): kotlin.Any?
            protected/*protected and package*/ open fun resolveProxyClass(/*0*/ p0: kotlin.Array<out kotlin.String>): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ /*fake_override*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun skipBytes(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open inner class BlockDataInputStream : java.io.InputStream {
                public/*package*/ constructor BlockDataInputStream(/*0*/ p2: java.io.InputStream?)
                public open override /*1*/ fun available(): kotlin.Int
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun close(): kotlin.Unit
                public/*package*/ open fun currentBlockRemaining(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public/*package*/ open fun getBlockDataMode(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun peek(): kotlin.Int
                public/*package*/ open fun peekByte(): kotlin.Byte
                public open override /*1*/ fun read(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
                public open override /*1*/ fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
                public/*package*/ open fun read(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Boolean): kotlin.Int
                public open fun readBoolean(): kotlin.Boolean
                public/*package*/ open fun readBooleans(/*0*/ p0: kotlin.BooleanArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readByte(): kotlin.Byte
                public open fun readChar(): kotlin.Char
                public/*package*/ open fun readChars(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readDouble(): kotlin.Double
                public/*package*/ open fun readDoubles(/*0*/ p0: kotlin.DoubleArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readFloat(): kotlin.Float
                public/*package*/ open fun readFloats(/*0*/ p0: kotlin.FloatArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readFully(/*0*/ p0: kotlin.ByteArray?): kotlin.Unit
                public open fun readFully(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readFully(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Boolean): kotlin.Unit
                public open fun readInt(): kotlin.Int
                public/*package*/ open fun readInts(/*0*/ p0: kotlin.IntArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readLine(): kotlin.String?
                public open fun readLong(): kotlin.Long
                public/*package*/ open fun readLongUTF(): kotlin.String?
                public/*package*/ open fun readLongs(/*0*/ p0: kotlin.LongArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readShort(): kotlin.Short
                public/*package*/ open fun readShorts(/*0*/ p0: kotlin.ShortArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun readUTF(): kotlin.String?
                public open fun readUnsignedByte(): kotlin.Int
                public open fun readUnsignedShort(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
                public/*package*/ open fun setBlockDataMode(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
                public/*package*/ open fun skipBlockData(): kotlin.Unit
                public open fun skipBytes(/*0*/ p0: kotlin.Int): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class Caches : java.lang.Object {
                private constructor Caches()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public abstract class GetField : java.lang.Object {
                public constructor GetField()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public abstract fun defaulted(/*0*/ p0: kotlin.String): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?): kotlin.Any?
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Byte): kotlin.Byte
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Char): kotlin.Char
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Double): kotlin.Double
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Float): kotlin.Float
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Long): kotlin.Long
                public abstract fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Short): kotlin.Short
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public abstract fun getObjectStreamClass(): [ERROR : Unresolved java classifier: ObjectStreamClass]?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open inner class GetFieldImpl : java.io.ObjectInputStream.GetField {
                public/*package*/ constructor GetFieldImpl(/*0*/ p2: [ERROR : Unresolved java classifier: ObjectStreamClass]?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun defaulted(/*0*/ p0: kotlin.String): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?): kotlin.Any?
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Byte): kotlin.Byte
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Char): kotlin.Char
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Double): kotlin.Double
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Float): kotlin.Float
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Long): kotlin.Long
                public open override /*1*/ fun get(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Short): kotlin.Short
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getObjectStreamClass(): [ERROR : Unresolved java classifier: ObjectStreamClass]?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun readFields(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class HandleTable : java.lang.Object {
                public/*package*/ constructor HandleTable(/*0*/ p0: kotlin.Int)
                public/*package*/ final var deps: kotlin.Array<java.io.ObjectInputStream.HandleTable.HandleList>?
                public/*package*/ final var entries: kotlin.Array<kotlin.Any>?
                public/*package*/ final var lowDep: kotlin.Int
                public/*package*/ final var size: kotlin.Int
                public/*package*/ final var status: kotlin.ByteArray?
                public/*package*/ open fun assign(/*0*/ p0: kotlin.Any?): kotlin.Int
                public/*package*/ open fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public/*package*/ open fun finish(/*0*/ p0: kotlin.Int): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun lookupException(/*0*/ p0: kotlin.Int): java.lang.ClassNotFoundException?
                public/*package*/ open fun lookupObject(/*0*/ p0: kotlin.Int): kotlin.Any?
                public/*package*/ open fun markDependency(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open fun markException(/*0*/ p0: kotlin.Int, /*1*/ p1: java.lang.ClassNotFoundException?): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): kotlin.Unit
                public/*package*/ open fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                private open class HandleList : java.lang.Object {
                    public constructor HandleList()
                    public open fun add(/*0*/ p0: kotlin.Int): kotlin.Unit
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public open fun get(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open fun size(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
            }
            
            private open class PeekInputStream : java.io.InputStream {
                public/*package*/ constructor PeekInputStream(/*0*/ p0: java.io.InputStream?)
                public open override /*1*/ fun available(): kotlin.Int
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun close(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun markSupported(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun peek(): kotlin.Int
                public open override /*1*/ fun read(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
                public open override /*1*/ fun read(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
                public/*package*/ open fun readFully(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun reset(): kotlin.Unit
                public open override /*1*/ fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class ValidationList : java.lang.Object {
                public/*package*/ constructor ValidationList()
                public open fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public/*package*/ open fun doCallbacks(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun register(/*0*/ p0: [ERROR : Unresolved java classifier: ObjectInputValidation]?, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                private open class Callback : java.lang.Object {
                    public/*package*/ constructor Callback(/*0*/ p0: [ERROR : Unresolved java classifier: ObjectInputValidation]?, /*1*/ p1: kotlin.Int, /*2*/ p2: java.io.ObjectInputStream.ValidationList.Callback?, /*3*/ p3: [ERROR : Unresolved java classifier: AccessControlContext]?)
                    public/*package*/ final val acc: [ERROR : Unresolved java classifier: AccessControlContext]?
                    public/*package*/ final var next: java.io.ObjectInputStream.ValidationList.Callback?
                    public/*package*/ final val obj: [ERROR : Unresolved java classifier: ObjectInputValidation]?
                    public/*package*/ final val priority: kotlin.Int
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
            }
        }
        
        public trait ObjectOutput {
            public abstract fun close(): kotlin.Unit
            public abstract fun flush(): kotlin.Unit
            public abstract fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public abstract fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun writeObject(/*0*/ p0: kotlin.Any?): kotlin.Unit
        }
        
        public open class ObjectOutputStream : java.io.OutputStream, java.io.ObjectOutput {
            protected/*protected and package*/ constructor ObjectOutputStream()
            public constructor ObjectOutputStream(/*0*/ p0: java.io.OutputStream?)
            protected/*protected and package*/ open fun annotateClass(/*0*/ p0: java.lang.Class<out kotlin.Any?>): kotlin.Unit
            protected/*protected and package*/ open fun annotateProxyClass(/*0*/ p0: java.lang.Class<out kotlin.Any?>): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*2*/ fun close(): kotlin.Unit
            public open fun defaultWriteObject(): kotlin.Unit
            protected/*protected and package*/ open fun drain(): kotlin.Unit
            protected/*protected and package*/ open fun enableReplaceObject(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*2*/ fun flush(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getProtocolVersion(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun putFields(): java.io.ObjectOutputStream.PutField?
            protected/*protected and package*/ open fun replaceObject(/*0*/ p0: kotlin.Any?): kotlin.Any?
            public open fun reset(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
            public open fun useProtocolVersion(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*2*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*2*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*2*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun writeBoolean(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun writeByte(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun writeBytes(/*0*/ p0: kotlin.String): kotlin.Unit
            public open fun writeChar(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun writeChars(/*0*/ p0: kotlin.String): kotlin.Unit
            protected/*protected and package*/ open fun writeClassDescriptor(/*0*/ p0: [ERROR : Unresolved java classifier: ObjectStreamClass]): kotlin.Unit
            public open fun writeDouble(/*0*/ p0: kotlin.Double): kotlin.Unit
            public open fun writeFields(): kotlin.Unit
            public open fun writeFloat(/*0*/ p0: kotlin.Float): kotlin.Unit
            public open fun writeInt(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun writeLong(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ fun writeObject(/*0*/ p0: kotlin.Any?): kotlin.Unit
            protected/*protected and package*/ open fun writeObjectOverride(/*0*/ p0: kotlin.Any?): kotlin.Unit
            public open fun writeShort(/*0*/ p0: kotlin.Int): kotlin.Unit
            protected/*protected and package*/ open fun writeStreamHeader(): kotlin.Unit
            public/*package*/ open fun writeTypeString(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun writeUTF(/*0*/ p0: kotlin.String): kotlin.Unit
            public open fun writeUnshared(/*0*/ p0: kotlin.Any?): kotlin.Unit
            
            private open class BlockDataOutputStream : java.io.OutputStream {
                public/*package*/ constructor BlockDataOutputStream(/*0*/ p0: java.io.OutputStream?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun close(): kotlin.Unit
                public/*package*/ open fun drain(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun flush(): kotlin.Unit
                public/*package*/ open fun getBlockDataMode(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public/*package*/ open fun getUTFLength(/*0*/ p0: kotlin.String?): kotlin.Long
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun setBlockDataMode(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
                public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public/*package*/ open fun write(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open fun writeBoolean(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public/*package*/ open fun writeBooleans(/*0*/ p0: kotlin.BooleanArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeByte(/*0*/ p0: kotlin.Int): kotlin.Unit
                public open fun writeBytes(/*0*/ p0: kotlin.String?): kotlin.Unit
                public open fun writeChar(/*0*/ p0: kotlin.Int): kotlin.Unit
                public/*package*/ open fun writeChars(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeChars(/*0*/ p0: kotlin.String?): kotlin.Unit
                public open fun writeDouble(/*0*/ p0: kotlin.Double): kotlin.Unit
                public/*package*/ open fun writeDoubles(/*0*/ p0: kotlin.DoubleArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeFloat(/*0*/ p0: kotlin.Float): kotlin.Unit
                public/*package*/ open fun writeFloats(/*0*/ p0: kotlin.FloatArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeInt(/*0*/ p0: kotlin.Int): kotlin.Unit
                public/*package*/ open fun writeInts(/*0*/ p0: kotlin.IntArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeLong(/*0*/ p0: kotlin.Long): kotlin.Unit
                public/*package*/ open fun writeLongUTF(/*0*/ p0: kotlin.String?): kotlin.Unit
                public/*package*/ open fun writeLongUTF(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Unit
                public/*package*/ open fun writeLongs(/*0*/ p0: kotlin.LongArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeShort(/*0*/ p0: kotlin.Int): kotlin.Unit
                public/*package*/ open fun writeShorts(/*0*/ p0: kotlin.ShortArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun writeUTF(/*0*/ p0: kotlin.String?): kotlin.Unit
                public/*package*/ open fun writeUTF(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Unit
            }
            
            private open class Caches : java.lang.Object {
                private constructor Caches()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class DebugTraceInfoStack : java.lang.Object {
                public/*package*/ constructor DebugTraceInfoStack()
                public/*package*/ open fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun pop(): kotlin.Unit
                public/*package*/ open fun push(/*0*/ p0: kotlin.String?): kotlin.Unit
                public open override /*1*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class HandleTable : java.lang.Object {
                public/*package*/ constructor HandleTable(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float)
                public/*package*/ open fun assign(/*0*/ p0: kotlin.Any?): kotlin.Int
                public/*package*/ open fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun lookup(/*0*/ p0: kotlin.Any?): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public abstract class PutField : java.lang.Object {
                public constructor PutField()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Byte): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Char): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Double): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Float): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Long): kotlin.Unit
                public abstract fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Short): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public abstract fun write(/*0*/ p0: java.io.ObjectOutput): kotlin.Unit
            }
            
            private open inner class PutFieldImpl : java.io.ObjectOutputStream.PutField {
                public/*package*/ constructor PutFieldImpl(/*0*/ p2: [ERROR : Unresolved java classifier: ObjectStreamClass]?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Byte): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Char): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Double): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Float): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Long): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Short): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ fun write(/*0*/ p0: java.io.ObjectOutput): kotlin.Unit
                public/*package*/ open fun writeFields(): kotlin.Unit
            }
            
            private open class ReplaceTable : java.lang.Object {
                public/*package*/ constructor ReplaceTable(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float)
                public/*package*/ open fun assign(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Unit
                public/*package*/ open fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun lookup(/*0*/ p0: kotlin.Any?): kotlin.Any?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public abstract class ObjectStreamException : java.io.IOException {
            protected/*protected and package*/ constructor ObjectStreamException()
            protected/*protected and package*/ constructor ObjectStreamException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class OutputStream : java.io.Closeable {
            public constructor OutputStream()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun flush(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public open class OutputStreamWriter : java.io.Writer {
            public constructor OutputStreamWriter(/*0*/ p0: java.io.OutputStream)
            public constructor OutputStreamWriter(/*0*/ p0: java.io.OutputStream, /*1*/ p1: [ERROR : Unresolved java classifier: CharsetEncoder])
            public constructor OutputStreamWriter(/*0*/ p0: java.io.OutputStream, /*1*/ p1: java.nio.charset.Charset)
            public constructor OutputStreamWriter(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var lock: kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.Char): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.io.Writer
            public open override /*1*/ /*fake_override*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.io.Writer
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun flush(): kotlin.Unit
            public/*package*/ open fun flushBuffer(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getEncoding(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.String): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        }
        
        public open class PrintStream : java.io.FilterOutputStream, java.lang.Appendable, java.io.Closeable {
            public constructor PrintStream(/*0*/ p0: java.io.File)
            public constructor PrintStream(/*0*/ p0: java.io.File, /*1*/ p1: kotlin.String)
            public constructor PrintStream(/*0*/ p0: java.io.OutputStream)
            public constructor PrintStream(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.Boolean)
            public constructor PrintStream(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.String)
            private constructor PrintStream(/*0*/ p0: kotlin.Boolean, /*1*/ p1: java.io.OutputStream?)
            public constructor PrintStream(/*0*/ p0: kotlin.String)
            public constructor PrintStream(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var out: java.io.OutputStream?
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Char): java.io.PrintStream
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.io.PrintStream
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.io.PrintStream
            public open fun checkError(): kotlin.Boolean
            protected/*protected and package*/ open fun clearError(): kotlin.Unit
            protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*2*/ fun close(): kotlin.Unit
            public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun flush(): kotlin.Unit
            public open fun format(/*0*/ p0: java.util.Locale?, /*1*/ p1: kotlin.String, /*2*/ vararg p2: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): java.io.PrintStream
            public open fun format(/*0*/ p0: kotlin.String, /*1*/ vararg p1: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): java.io.PrintStream
            public final override /*3*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*3*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Any?): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Char): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Double): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Float): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun print(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun printf(/*0*/ p0: java.util.Locale?, /*1*/ p1: kotlin.String, /*2*/ vararg p2: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): java.io.PrintStream
            public open fun printf(/*0*/ p0: kotlin.String, /*1*/ vararg p1: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): java.io.PrintStream
            public open fun println(): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Any?): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Char): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Double): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Float): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.String?): kotlin.Unit
            protected/*protected and package*/ open fun setError(): kotlin.Unit
            public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*3*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public open class RandomAccessFile : java.io.Closeable {
            public constructor RandomAccessFile(/*0*/ p0: java.io.File?, /*1*/ p1: kotlin.String)
            public constructor RandomAccessFile(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun close(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final fun getChannel(): [ERROR : Unresolved java classifier: FileChannel]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getFD(): [ERROR : Unresolved java classifier: FileDescriptor]?
            public open fun getFilePointer(): kotlin.Long
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun length(): kotlin.Long
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun read(): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.ByteArray): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public final fun readBoolean(): kotlin.Boolean
            public final fun readByte(): kotlin.Byte
            public final fun readChar(): kotlin.Char
            public final fun readDouble(): kotlin.Double
            public final fun readFloat(): kotlin.Float
            public final fun readFully(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public final fun readFully(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public final fun readInt(): kotlin.Int
            public final fun readLine(): kotlin.String?
            public final fun readLong(): kotlin.Long
            public final fun readShort(): kotlin.Short
            public final fun readUTF(): kotlin.String
            public final fun readUnsignedByte(): kotlin.Int
            public final fun readUnsignedShort(): kotlin.Int
            public open fun seek(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun setLength(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun skipBytes(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun writeBoolean(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public final fun writeByte(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun writeBytes(/*0*/ p0: kotlin.String): kotlin.Unit
            public final fun writeChar(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun writeChars(/*0*/ p0: kotlin.String): kotlin.Unit
            public final fun writeDouble(/*0*/ p0: kotlin.Double): kotlin.Unit
            public final fun writeFloat(/*0*/ p0: kotlin.Float): kotlin.Unit
            public final fun writeInt(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun writeLong(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final fun writeShort(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun writeUTF(/*0*/ p0: kotlin.String): kotlin.Unit
        }
        
        public abstract class Reader : java.lang.Readable, java.io.Closeable {
            protected/*protected and package*/ constructor Reader()
            protected/*protected and package*/ constructor Reader(/*0*/ p0: kotlin.Any)
            protected/*protected and package*/ final var lock: kotlin.Any?
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract override /*1*/ fun close(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun mark(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun markSupported(): kotlin.Boolean
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun read(): kotlin.Int
            public open override /*1*/ fun read(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): kotlin.Int
            public open fun read(/*0*/ p0: kotlin.CharArray): kotlin.Int
            public abstract fun read(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun ready(): kotlin.Boolean
            public open fun reset(): kotlin.Unit
            public open fun skip(/*0*/ p0: kotlin.Long): kotlin.Long
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Serializable : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public abstract class Writer : java.lang.Appendable, java.io.Closeable {
            protected/*protected and package*/ constructor Writer()
            protected/*protected and package*/ constructor Writer(/*0*/ p0: kotlin.Any)
            protected/*protected and package*/ final var lock: kotlin.Any?
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Char): java.io.Writer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.io.Writer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.io.Writer
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract override /*1*/ fun close(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun flush(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.CharArray): kotlin.Unit
            public abstract fun write(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.String): kotlin.Unit
            public open fun write(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
        }
        
        package java.io.BufferedInputStream {
        }
        
        package java.io.BufferedReader {
        }
        
        package java.io.BufferedWriter {
        }
        
        package java.io.DataInputStream {
            public fun readUTF(/*0*/ p0: [ERROR : Unresolved java classifier: DataInput]): kotlin.String
        }
        
        package java.io.File {
            public val pathSeparator: kotlin.String
            public val pathSeparatorChar: kotlin.Char
            public val separator: kotlin.String
            public val separatorChar: kotlin.Char
            public open fun createTempFile(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): java.io.File
            public open fun createTempFile(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?, /*2*/ p2: java.io.File?): java.io.File
            public open fun listRoots(): kotlin.Array<java.io.File>?
            
            package java.io.File.LazyInitialization {
                public/*package*/ val random: [ERROR : Unresolved java classifier: SecureRandom]
                public/*package*/ val temporaryDirectory: kotlin.String
                public/*package*/ open fun temporaryDirectory(): kotlin.String?
            }
        }
        
        package java.io.FileInputStream {
        }
        
        package java.io.FileOutputStream {
        }
        
        package java.io.IOException {
            public/*package*/ val serialVersionUID: kotlin.Long = 7818375828146090155.toLong()
        }
        
        package java.io.InputStream {
        }
        
        package java.io.ObjectInputStream {
            
            package java.io.ObjectInputStream.Caches {
                public/*package*/ val subclassAudits: [ERROR : Unresolved java classifier: ConcurrentMap<WeakClassKey, Boolean>]
                public/*package*/ val subclassAuditsQueue: [ERROR : Unresolved java classifier: ReferenceQueue<Class<?>>]
            }
            
            package java.io.ObjectInputStream.HandleTable {
            }
        }
        
        package java.io.ObjectOutputStream {
            
            package java.io.ObjectOutputStream.BlockDataOutputStream {
            }
            
            package java.io.ObjectOutputStream.Caches {
                public/*package*/ val subclassAudits: [ERROR : Unresolved java classifier: ConcurrentMap<WeakClassKey, Boolean>]
                public/*package*/ val subclassAuditsQueue: [ERROR : Unresolved java classifier: ReferenceQueue<Class<?>>]
            }
        }
        
        package java.io.ObjectStreamException {
        }
        
        package java.io.RandomAccessFile {
        }
        
        package java.io.Reader {
        }
    }
    
    package java.lang {
        public /*synthesized*/ fun </*0*/ T> Comparable(/*0*/ function: (T) -> kotlin.Int): java.lang.Comparable<T>
        public /*synthesized*/ fun </*0*/ T> Iterable(/*0*/ function: () -> kotlin.Iterator<T>): java.lang.Iterable<T>
        public /*synthesized*/ fun Readable(/*0*/ function: ([ERROR : Unresolved java classifier: CharBuffer]) -> kotlin.Int): java.lang.Readable
        public /*synthesized*/ fun Runnable(/*0*/ function: () -> kotlin.Unit): java.lang.Runnable
        
        public/*package*/ abstract class AbstractStringBuilder : java.lang.Appendable, kotlin.CharSequence {
            public/*package*/ constructor AbstractStringBuilder()
            public/*package*/ constructor AbstractStringBuilder(/*0*/ p0: kotlin.Int)
            public/*package*/ final var count: kotlin.Int
            public/*package*/ final var value: kotlin.CharArray?
            public open fun append(/*0*/ p0: java.lang.StringBuffer?): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Any?): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Boolean): java.lang.AbstractStringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Char): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.CharArray): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.AbstractStringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.lang.AbstractStringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Double): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Float): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.Long): java.lang.AbstractStringBuilder
            public open fun append(/*0*/ p0: kotlin.String?): java.lang.AbstractStringBuilder
            public open fun appendCodePoint(/*0*/ p0: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun capacity(): kotlin.Int
            public open fun charAt(/*0*/ p0: kotlin.Int): kotlin.Char
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun codePointAt(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun codePointBefore(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun codePointCount(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun delete(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun deleteCharAt(/*0*/ p0: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun ensureCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open fun expandCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray, /*3*/ p3: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ final fun getValue(): kotlin.CharArray?
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): java.lang.AbstractStringBuilder
            public open fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): java.lang.AbstractStringBuilder
            public open fun lastIndexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun lastIndexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun length(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun offsetByCodePoints(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun replace(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String): java.lang.AbstractStringBuilder
            public open fun reverse(): java.lang.AbstractStringBuilder
            public open fun setCharAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): kotlin.Unit
            public open fun setLength(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun subSequence(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.CharSequence
            public open fun substring(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun substring(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.String
            public abstract override /*2*/ fun toString(): kotlin.String
            public open fun trimToSize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Appendable : java.lang.Object {
            public abstract fun append(/*0*/ p0: kotlin.Char): java.lang.Appendable
            public abstract fun append(/*0*/ p0: kotlin.CharSequence?): java.lang.Appendable
            public abstract fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.Appendable
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class ArithmeticException : java.lang.RuntimeException {
            public constructor ArithmeticException()
            public constructor ArithmeticException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class ArrayIndexOutOfBoundsException : java.lang.IndexOutOfBoundsException {
            public constructor ArrayIndexOutOfBoundsException()
            public constructor ArrayIndexOutOfBoundsException(/*0*/ p0: kotlin.Int)
            public constructor ArrayIndexOutOfBoundsException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class ArrayStoreException : java.lang.RuntimeException {
            public constructor ArrayStoreException()
            public constructor ArrayStoreException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class AssertionError : java.lang.Error {
            public constructor AssertionError()
            public constructor AssertionError(/*0*/ p0: kotlin.Any?)
            public constructor AssertionError(/*0*/ p0: kotlin.Boolean)
            public constructor AssertionError(/*0*/ p0: kotlin.Char)
            public constructor AssertionError(/*0*/ p0: kotlin.Double)
            public constructor AssertionError(/*0*/ p0: kotlin.Float)
            public constructor AssertionError(/*0*/ p0: kotlin.Int)
            public constructor AssertionError(/*0*/ p0: kotlin.Long)
            private constructor AssertionError(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Boolean : java.io.Serializable, kotlin.Comparable<kotlin.Boolean> {
            public constructor Boolean(/*0*/ p0: kotlin.Boolean)
            public constructor Boolean(/*0*/ p0: kotlin.String?)
            public open fun booleanValue(): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Boolean): kotlin.Int
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public final class Byte : kotlin.Number, kotlin.Comparable<kotlin.Byte> {
            public constructor Byte(/*0*/ p0: kotlin.Byte)
            public constructor Byte(/*0*/ p0: kotlin.String)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Byte): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
            
            private open class ByteCache : java.lang.Object {
                private constructor ByteCache()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public trait CharSequence : java.lang.Object {
            public abstract fun charAt(/*0*/ p0: kotlin.Int): kotlin.Char
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun length(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun subSequence(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.CharSequence
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public final class Character : java.io.Serializable, kotlin.Comparable<kotlin.Char> {
            public constructor Character(/*0*/ p0: kotlin.Char)
            public open fun charValue(): kotlin.Char
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Char): kotlin.Int
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*2*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class CharacterCache : java.lang.Object {
                private constructor CharacterCache()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public open class Subset : java.lang.Object {
                protected/*protected and package*/ constructor Subset(/*0*/ p0: kotlin.String)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public final override /*1*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public final override /*1*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public final class UnicodeBlock : java.lang.Character.Subset {
                private constructor UnicodeBlock(/*0*/ p0: kotlin.String?)
                private constructor UnicodeBlock(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?)
                private constructor UnicodeBlock(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public final override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class Class</*0*/ T> : java.io.Serializable, java.lang.reflect.GenericDeclaration, java.lang.reflect.Type, java.lang.reflect.AnnotatedElement {
            private constructor Class</*0*/ T>()
            public open fun </*0*/ U> asSubclass(/*0*/ p0: java.lang.Class<U>): java.lang.Class<out U>
            public open fun cast(/*0*/ p0: kotlin.Any?): T?
            protected/*protected and package*/ open override /*4*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun desiredAssertionStatus(): kotlin.Boolean
            public/*package*/ open fun enumConstantDirectory(): kotlin.MutableMap<kotlin.String, T>?
            public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*4*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun </*0*/ A : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<A>): A?
            public/*package*/ open fun getAnnotationType(): [ERROR : Unresolved java classifier: AnnotationType]?
            public open override /*1*/ fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
            public open fun getCanonicalName(): kotlin.String?
            public final override /*4*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getClassLoader(): java.lang.ClassLoader?
            public/*package*/ open fun getClassLoader0(): java.lang.ClassLoader?
            public open fun getClasses(): kotlin.Array<java.lang.Class<out kotlin.Any?>>
            public open fun getComponentType(): java.lang.Class<out kotlin.Any?>?
            public/*package*/ open fun getConstantPool(): [ERROR : Unresolved java classifier: ConstantPool]?
            public open fun getConstructor(/*0*/ vararg parameterTypes: java.lang.Class<out kotlin.Any?> /*kotlin.Array<java.lang.Class<out kotlin.Any?>>*/): java.lang.reflect.Constructor<T>
            public open fun getConstructors(): kotlin.Array<java.lang.reflect.Constructor<out kotlin.Any?>>
            public open override /*1*/ fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
            public open fun getDeclaredClasses(): kotlin.Array<java.lang.Class<out kotlin.Any?>>
            public open fun getDeclaredConstructor(/*0*/ vararg parameterTypes: java.lang.Class<out kotlin.Any?> /*kotlin.Array<java.lang.Class<out kotlin.Any?>>*/): java.lang.reflect.Constructor<T>
            public open fun getDeclaredConstructors(): kotlin.Array<java.lang.reflect.Constructor<out kotlin.Any?>>
            public open fun getDeclaredField(/*0*/ name: kotlin.String): java.lang.reflect.Field
            public open fun getDeclaredFields(): kotlin.Array<java.lang.reflect.Field>
            public open fun getDeclaredMethod(/*0*/ name: kotlin.String, /*1*/ vararg parameterTypes: java.lang.Class<out kotlin.Any?> /*kotlin.Array<java.lang.Class<out kotlin.Any?>>*/): java.lang.reflect.Method
            public open fun getDeclaredMethods(): kotlin.Array<java.lang.reflect.Method>
            public open fun getDeclaringClass(): java.lang.Class<out kotlin.Any?>?
            public open fun getEnclosingClass(): java.lang.Class<out kotlin.Any?>?
            public open fun getEnclosingConstructor(): java.lang.reflect.Constructor<out kotlin.Any?>?
            public open fun getEnclosingMethod(): java.lang.reflect.Method?
            public open fun getEnumConstants(): kotlin.Array<T>?
            public/*package*/ open fun getEnumConstantsShared(): kotlin.Array<T>?
            public open fun getField(/*0*/ p0: kotlin.String): java.lang.reflect.Field
            public open fun getFields(): kotlin.Array<java.lang.reflect.Field>
            public open fun getGenericInterfaces(): kotlin.Array<java.lang.reflect.Type>
            public open fun getGenericSuperclass(): java.lang.reflect.Type?
            public open fun getInterfaces(): kotlin.Array<java.lang.Class<out kotlin.Any?>>
            public open fun getMethod(/*0*/ name: kotlin.String, /*1*/ vararg parameterTypes: java.lang.Class<out kotlin.Any?> /*kotlin.Array<java.lang.Class<out kotlin.Any?>>*/): java.lang.reflect.Method
            public open fun getMethods(): kotlin.Array<java.lang.reflect.Method>
            public open fun getModifiers(): kotlin.Int
            public open fun getName(): kotlin.String
            public open fun getPackage(): [ERROR : Unresolved java classifier: Package]?
            public open fun getProtectionDomain(): [ERROR : Unresolved java classifier: ProtectionDomain]?
            public open fun getResource(/*0*/ name: kotlin.String): java.net.URL?
            public open fun getResourceAsStream(/*0*/ name: kotlin.String): java.io.InputStream?
            public open fun getSigners(): kotlin.Array<kotlin.Any>?
            public open fun getSimpleName(): kotlin.String
            public open fun getSuperclass(): java.lang.Class<in T>?
            public open override /*1*/ fun getTypeParameters(): kotlin.Array<out [ERROR : Unresolved java classifier: TypeVariable<Class<T>>]>
            public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun isAnnotation(): kotlin.Boolean
            public open override /*1*/ fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
            public open fun isAnonymousClass(): kotlin.Boolean
            public open fun isArray(): kotlin.Boolean
            public open fun isAssignableFrom(/*0*/ p0: java.lang.Class<out kotlin.Any?>): kotlin.Boolean
            public open fun isEnum(): kotlin.Boolean
            public open fun isInstance(/*0*/ obj: kotlin.Any?): kotlin.Boolean
            public open fun isInterface(): kotlin.Boolean
            public open fun isLocalClass(): kotlin.Boolean
            public open fun isMemberClass(): kotlin.Boolean
            public open fun isPrimitive(): kotlin.Boolean
            public open fun isSynthetic(): kotlin.Boolean
            public open fun newInstance(): T
            public final override /*4*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*4*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open fun setAnnotationType(/*0*/ p0: [ERROR : Unresolved java classifier: AnnotationType]?): kotlin.Unit
            public/*package*/ open fun setProtectionDomain0(/*0*/ p0: [ERROR : Unresolved java classifier: ProtectionDomain]?): kotlin.Unit
            public/*package*/ open fun setSigners(/*0*/ p0: kotlin.Array<out kotlin.Any>?): kotlin.Unit
            public open override /*4*/ fun toString(): kotlin.String
            public final override /*4*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*4*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*4*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private final class EnclosingMethodInfo : java.lang.Object {
                private constructor EnclosingMethodInfo(/*0*/ p0: kotlin.Array<out kotlin.Any>?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public/*package*/ open fun getDescriptor(): kotlin.String?
                public/*package*/ open fun getEnclosingClass(): java.lang.Class<out kotlin.Any?>?
                public/*package*/ open fun getName(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun isConstructor(): kotlin.Boolean
                public/*package*/ open fun isMethod(): kotlin.Boolean
                public/*package*/ open fun isPartial(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class MethodArray : java.lang.Object {
                public/*package*/ constructor MethodArray()
                public/*package*/ open fun add(/*0*/ p0: java.lang.reflect.Method?): kotlin.Unit
                public/*package*/ open fun addAll(/*0*/ p0: java.lang.Class.MethodArray?): kotlin.Unit
                public/*package*/ open fun addAll(/*0*/ p0: kotlin.Array<out java.lang.reflect.Method>?): kotlin.Unit
                public/*package*/ open fun addAllIfNotPresent(/*0*/ p0: java.lang.Class.MethodArray?): kotlin.Unit
                public/*package*/ open fun addIfNotPresent(/*0*/ p0: java.lang.reflect.Method?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public/*package*/ open fun compactAndTrim(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public/*package*/ open fun get(/*0*/ p0: kotlin.Int): java.lang.reflect.Method?
                public/*package*/ open fun getArray(): kotlin.Array<java.lang.reflect.Method>?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun length(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun removeByNameAndSignature(/*0*/ p0: java.lang.reflect.Method?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class ClassCastException : java.lang.RuntimeException {
            public constructor ClassCastException()
            public constructor ClassCastException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class ClassLoader : java.lang.Object {
            protected/*protected and package*/ constructor ClassLoader()
            protected/*protected and package*/ constructor ClassLoader(/*0*/ p0: java.lang.ClassLoader?)
            private constructor ClassLoader(/*0*/ p0: java.lang.Void?, /*1*/ p1: java.lang.ClassLoader?)
            public/*package*/ final var classAssertionStatus: kotlin.Map<out kotlin.Any?, kotlin.Any?>?
            public/*package*/ final var nocerts: kotlin.Array<[ERROR : Unresolved java classifier: Certificate]>?
            public/*package*/ open fun addClass(/*0*/ p0: java.lang.Class<out kotlin.Any?>?): kotlin.Unit
            public open fun clearAssertionStatus(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) protected/*protected and package*/ final fun defineClass(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ final fun defineClass(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: ByteBuffer], /*2*/ p2: [ERROR : Unresolved java classifier: ProtectionDomain]?): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ final fun defineClass(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.ByteArray?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ final fun defineClass(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.ByteArray?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: [ERROR : Unresolved java classifier: ProtectionDomain]?): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ open fun definePackage(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?, /*4*/ p4: kotlin.String?, /*5*/ p5: kotlin.String?, /*6*/ p6: kotlin.String?, /*7*/ p7: java.net.URL?): [ERROR : Unresolved java classifier: Package]
            public/*package*/ open fun desiredAssertionStatus(/*0*/ p0: kotlin.String?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            protected/*protected and package*/ open fun findClass(/*0*/ p0: kotlin.String): java.lang.Class<out kotlin.Any?>
            protected/*protected and package*/ open fun findLibrary(/*0*/ p0: kotlin.String?): kotlin.String?
            protected/*protected and package*/ final fun findLoadedClass(/*0*/ p0: kotlin.String?): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ open fun findResource(/*0*/ p0: kotlin.String): java.net.URL?
            protected/*protected and package*/ open fun findResources(/*0*/ p0: kotlin.String): java.util.Enumeration<java.net.URL>
            protected/*protected and package*/ final fun findSystemClass(/*0*/ p0: kotlin.String?): java.lang.Class<out kotlin.Any?>?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            protected/*protected and package*/ open fun getPackage(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: Package]?
            protected/*protected and package*/ open fun getPackages(): kotlin.Array<[ERROR : Unresolved java classifier: Package]>?
            public final fun getParent(): java.lang.ClassLoader?
            public open fun getResource(/*0*/ p0: kotlin.String?): java.net.URL?
            public open fun getResourceAsStream(/*0*/ p0: kotlin.String): java.io.InputStream?
            public open fun getResources(/*0*/ p0: kotlin.String?): java.util.Enumeration<java.net.URL>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public/*package*/ open fun isAncestor(/*0*/ p0: java.lang.ClassLoader?): kotlin.Boolean
            public open fun loadClass(/*0*/ p0: kotlin.String): java.lang.Class<out kotlin.Any?>?
            protected/*protected and package*/ open fun loadClass(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): java.lang.Class<out kotlin.Any?>?
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            protected/*protected and package*/ final fun resolveClass(/*0*/ p0: java.lang.Class<out kotlin.Any?>?): kotlin.Unit
            public open fun setClassAssertionStatus(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public open fun setDefaultAssertionStatus(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setPackageAssertionStatus(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            protected/*protected and package*/ final fun setSigners(/*0*/ p0: java.lang.Class<out kotlin.Any?>, /*1*/ p1: kotlin.Array<out kotlin.Any>?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ open class NativeLibrary : java.lang.Object {
                public constructor NativeLibrary(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.String?)
                public/*package*/ final var handle: kotlin.Long
                public/*package*/ final var name: kotlin.String?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ fun finalize(): kotlin.Unit
                public/*package*/ open fun find(/*0*/ p0: kotlin.String?): kotlin.Long
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun load(/*0*/ p0: kotlin.String?): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public/*package*/ open fun unload(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class ClassNotFoundException : java.lang.Exception {
            public constructor ClassNotFoundException()
            public constructor ClassNotFoundException(/*0*/ p0: kotlin.String?)
            public constructor ClassNotFoundException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun getCause(): kotlin.Throwable?
            public open fun getException(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class CloneNotSupportedException : java.lang.Exception {
            public constructor CloneNotSupportedException()
            public constructor CloneNotSupportedException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait Cloneable : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Comparable</*0*/ T> : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun compareTo(/*0*/ p0: T): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        java.lang.annotation.Documented() java.lang.annotation.Retention(value = RetentionPolicy.RUNTIME: java.lang.annotation.RetentionPolicy) public final annotation class Deprecated : kotlin.Annotation {
            public constructor Deprecated()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Double : kotlin.Number, kotlin.Comparable<kotlin.Double> {
            public constructor Double(/*0*/ p0: kotlin.Double)
            public constructor Double(/*0*/ p0: kotlin.String?)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Double): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun isInfinite(): kotlin.Boolean
            public open fun isNaN(): kotlin.Boolean
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
        }
        
        public abstract class Enum</*0*/ E : kotlin.Enum<E>?> : kotlin.Comparable<E>, java.io.Serializable {
            protected/*protected and package*/ constructor Enum</*0*/ E : kotlin.Enum<E>?>(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int)
            protected/*protected and package*/ final override /*1*/ fun clone(): kotlin.Any?
            public final override /*1*/ fun compareTo(/*0*/ other: E): kotlin.Int
            public final override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ final override /*1*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getDeclaringClass(): java.lang.Class<E>?
            public final override /*2*/ fun hashCode(): kotlin.Int
            public final fun name(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public final fun ordinal(): kotlin.Int
            public open override /*2*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Error : kotlin.Throwable {
            public constructor Error()
            public constructor Error(/*0*/ p0: kotlin.String?)
            public constructor Error(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor Error(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class Exception : kotlin.Throwable {
            public constructor Exception()
            public constructor Exception(/*0*/ p0: kotlin.String?)
            public constructor Exception(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor Exception(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Float : kotlin.Number, kotlin.Comparable<kotlin.Float> {
            public constructor Float(/*0*/ p0: kotlin.Double)
            public constructor Float(/*0*/ p0: kotlin.Float)
            public constructor Float(/*0*/ p0: kotlin.String?)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Float): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun isInfinite(): kotlin.Boolean
            public open fun isNaN(): kotlin.Boolean
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
        }
        
        public open class IllegalAccessException : java.lang.Exception {
            public constructor IllegalAccessException()
            public constructor IllegalAccessException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class IllegalArgumentException : java.lang.RuntimeException {
            public constructor IllegalArgumentException()
            public constructor IllegalArgumentException(/*0*/ p0: kotlin.String?)
            public constructor IllegalArgumentException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor IllegalArgumentException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class IllegalStateException : java.lang.RuntimeException {
            public constructor IllegalStateException()
            public constructor IllegalStateException(/*0*/ p0: kotlin.String?)
            public constructor IllegalStateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor IllegalStateException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class IndexOutOfBoundsException : java.lang.RuntimeException {
            public constructor IndexOutOfBoundsException()
            public constructor IndexOutOfBoundsException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Integer : kotlin.Number, kotlin.Comparable<kotlin.Int> {
            public constructor Integer(/*0*/ p0: kotlin.Int)
            public constructor Integer(/*0*/ p0: kotlin.String)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Int): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
            
            private open class IntegerCache : java.lang.Object {
                private constructor IntegerCache()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public trait Iterable</*0*/ T> : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun iterator(): kotlin.Iterator<T>
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public final class Long : kotlin.Number, kotlin.Comparable<kotlin.Long> {
            public constructor Long(/*0*/ p0: kotlin.Long)
            public constructor Long(/*0*/ p0: kotlin.String)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Long): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
            
            private open class LongCache : java.lang.Object {
                private constructor LongCache()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class Math : java.lang.Object {
            private constructor Math()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class NegativeArraySizeException : java.lang.RuntimeException {
            public constructor NegativeArraySizeException()
            public constructor NegativeArraySizeException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class NoSuchFieldException : java.lang.Exception {
            public constructor NoSuchFieldException()
            public constructor NoSuchFieldException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class NullPointerException : java.lang.RuntimeException {
            public constructor NullPointerException()
            public constructor NullPointerException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class Number : java.io.Serializable {
            public constructor Number()
            public open fun byteValue(): kotlin.Byte
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun doubleValue(): kotlin.Double
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun floatValue(): kotlin.Float
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun intValue(): kotlin.Int
            public abstract fun longValue(): kotlin.Long
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun shortValue(): kotlin.Short
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class NumberFormatException : java.lang.IllegalArgumentException {
            public constructor NumberFormatException()
            public constructor NumberFormatException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class Object {
            public constructor Object()
            protected/*protected and package*/ open fun clone(): kotlin.Any
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open fun finalize(): kotlin.Unit
            public final fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ fun hashCode(): kotlin.Int
            public final fun notify(): kotlin.Unit
            public final fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String?
            public final fun wait(): kotlin.Unit
            public final fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        java.lang.annotation.Target(value = {ElementType.METHOD}: kotlin.Array<java.lang.annotation.ElementType>) java.lang.annotation.Retention(value = RetentionPolicy.SOURCE: java.lang.annotation.RetentionPolicy) public final annotation class Override : kotlin.Annotation {
            public constructor Override()
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait Readable : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun read(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Runnable : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun run(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class RuntimeException : java.lang.Exception {
            public constructor RuntimeException()
            public constructor RuntimeException(/*0*/ p0: kotlin.String?)
            public constructor RuntimeException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor RuntimeException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Short : kotlin.Number, kotlin.Comparable<kotlin.Short> {
            public constructor Short(/*0*/ p0: kotlin.Short)
            public constructor Short(/*0*/ p0: kotlin.String)
            public open fun byteValue(): kotlin.Byte
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.Short): kotlin.Int
            public open fun doubleValue(): kotlin.Double
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun floatValue(): kotlin.Float
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun intValue(): kotlin.Int
            public open fun longValue(): kotlin.Long
            public open fun shortValue(): kotlin.Short
            public open override /*2*/ fun toString(): kotlin.String
            
            private open class ShortCache : java.lang.Object {
                private constructor ShortCache()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class String : java.io.Serializable, kotlin.Comparable<kotlin.String>, kotlin.CharSequence {
            public constructor String()
            public constructor String(/*0*/ p0: java.lang.StringBuffer)
            public constructor String(/*0*/ p0: java.lang.StringBuilder)
            public constructor String(/*0*/ p0: kotlin.ByteArray)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: java.nio.charset.Charset)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: java.nio.charset.Charset)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.String)
            public constructor String(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.String)
            public constructor String(/*0*/ p0: kotlin.CharArray)
            public constructor String(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public/*package*/ constructor String(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray?)
            public constructor String(/*0*/ p0: kotlin.IntArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor String(/*0*/ p0: kotlin.String)
            public open fun charAt(/*0*/ p0: kotlin.Int): kotlin.Char
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun codePointAt(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun codePointBefore(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun codePointCount(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun compareTo(/*0*/ other: kotlin.String): kotlin.Int
            public open fun compareToIgnoreCase(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun concat(/*0*/ p0: kotlin.String): kotlin.String
            public open fun contains(/*0*/ p0: kotlin.CharSequence): kotlin.Boolean
            public open fun contentEquals(/*0*/ p0: java.lang.StringBuffer): kotlin.Boolean
            public open fun contentEquals(/*0*/ p0: kotlin.CharSequence): kotlin.Boolean
            public open fun endsWith(/*0*/ p0: kotlin.String): kotlin.Boolean
            public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun equalsIgnoreCase(/*0*/ p0: kotlin.String?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getBytes(): kotlin.ByteArray
            public open fun getBytes(/*0*/ p0: java.nio.charset.Charset): kotlin.ByteArray
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getBytes(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.ByteArray, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open fun getBytes(/*0*/ p0: kotlin.String): kotlin.ByteArray
            public/*package*/ open fun getChars(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun getChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray, /*3*/ p3: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*3*/ fun hashCode(): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun indexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun intern(): kotlin.String
            public open fun isEmpty(): kotlin.Boolean
            public open fun lastIndexOf(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun lastIndexOf(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun lastIndexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun lastIndexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun length(): kotlin.Int
            public open fun matches(/*0*/ p0: kotlin.String): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun offsetByCodePoints(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun regionMatches(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Boolean
            public open fun regionMatches(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Boolean
            public open fun replace(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Char): kotlin.String
            public open fun replace(/*0*/ p0: kotlin.CharSequence, /*1*/ p1: kotlin.CharSequence): kotlin.String
            public open fun replaceAll(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String): kotlin.String
            public open fun replaceFirst(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String): kotlin.String
            public open fun split(/*0*/ regex: kotlin.String): kotlin.Array<kotlin.String>
            public open fun split(/*0*/ regex: kotlin.String, /*1*/ limit: kotlin.Int): kotlin.Array<kotlin.String>
            public open fun startsWith(/*0*/ p0: kotlin.String): kotlin.Boolean
            public open fun startsWith(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public open fun subSequence(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.CharSequence
            public open fun substring(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun substring(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.String
            public open fun toCharArray(): kotlin.CharArray
            public open fun toLowerCase(): kotlin.String
            public open fun toLowerCase(/*0*/ locale: java.util.Locale): kotlin.String
            public open override /*3*/ fun toString(): kotlin.String
            public open fun toUpperCase(): kotlin.String
            public open fun toUpperCase(/*0*/ locale: java.util.Locale): kotlin.String
            public open fun trim(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class CaseInsensitiveComparator : java.util.Comparator<kotlin.String>, java.io.Serializable {
                private constructor CaseInsensitiveComparator()
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun compare(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class StringBuffer : java.lang.AbstractStringBuilder, java.io.Serializable, kotlin.CharSequence {
            public constructor StringBuffer()
            public constructor StringBuffer(/*0*/ p0: kotlin.CharSequence)
            public constructor StringBuffer(/*0*/ p0: kotlin.Int)
            public constructor StringBuffer(/*0*/ p0: kotlin.String)
            public/*package*/ final override /*1*/ /*fake_override*/ var count: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var value: kotlin.CharArray?
            public open override /*1*/ fun append(/*0*/ p0: java.lang.StringBuffer?): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Any?): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Boolean): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Char): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharArray): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Double): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Float): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Long): java.lang.StringBuffer
            public open override /*1*/ fun append(/*0*/ p0: kotlin.String?): java.lang.StringBuffer
            public open override /*1*/ fun appendCodePoint(/*0*/ p0: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun capacity(): kotlin.Int
            public open override /*1*/ fun charAt(/*0*/ p0: kotlin.Int): kotlin.Char
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun codePointAt(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ fun codePointBefore(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ fun codePointCount(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun delete(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun deleteCharAt(/*0*/ p0: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun ensureCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun expandCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ fun getChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray, /*3*/ p3: kotlin.Int): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ final override /*1*/ /*fake_override*/ fun getValue(): kotlin.CharArray?
            public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun indexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open override /*1*/ fun indexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): java.lang.StringBuffer
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): java.lang.StringBuffer
            public open override /*1*/ fun lastIndexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open override /*1*/ fun lastIndexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun length(): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun offsetByCodePoints(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun replace(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String): java.lang.StringBuffer
            public open override /*1*/ fun reverse(): java.lang.StringBuffer
            public open override /*1*/ fun setCharAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): kotlin.Unit
            public open override /*1*/ fun setLength(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun subSequence(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.CharSequence
            public open override /*1*/ fun substring(/*0*/ p0: kotlin.Int): kotlin.String
            public open override /*1*/ fun substring(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.String
            public open override /*3*/ fun toString(): kotlin.String
            public open override /*1*/ fun trimToSize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public final class StringBuilder : java.lang.AbstractStringBuilder, java.io.Serializable, kotlin.CharSequence {
            public constructor StringBuilder()
            public constructor StringBuilder(/*0*/ p0: kotlin.CharSequence)
            public constructor StringBuilder(/*0*/ p0: kotlin.Int)
            public constructor StringBuilder(/*0*/ p0: kotlin.String)
            public/*package*/ final override /*1*/ /*fake_override*/ var count: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var value: kotlin.CharArray?
            public open override /*1*/ fun append(/*0*/ p0: java.lang.StringBuffer?): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Any?): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Boolean): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Char): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharArray): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.CharSequence?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Double): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Float): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.Long): java.lang.StringBuilder
            public open override /*1*/ fun append(/*0*/ p0: kotlin.String?): java.lang.StringBuilder
            public open override /*1*/ fun appendCodePoint(/*0*/ p0: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ /*fake_override*/ fun capacity(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun charAt(/*0*/ p0: kotlin.Int): kotlin.Char
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun codePointAt(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun codePointBefore(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun codePointCount(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun delete(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun deleteCharAt(/*0*/ p0: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ /*fake_override*/ fun ensureCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun expandCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun getChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray, /*3*/ p3: kotlin.Int): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ final override /*1*/ /*fake_override*/ fun getValue(): kotlin.CharArray?
            public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun indexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open override /*1*/ fun indexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharSequence?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): java.lang.StringBuilder
            public open override /*1*/ fun insert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): java.lang.StringBuilder
            public open override /*1*/ fun lastIndexOf(/*0*/ p0: kotlin.String): kotlin.Int
            public open override /*1*/ fun lastIndexOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun length(): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun offsetByCodePoints(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open override /*1*/ fun replace(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String): java.lang.StringBuilder
            public open override /*1*/ fun reverse(): java.lang.StringBuilder
            public open override /*1*/ /*fake_override*/ fun setCharAt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Char): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLength(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun subSequence(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.CharSequence
            public open override /*1*/ /*fake_override*/ fun substring(/*0*/ p0: kotlin.Int): kotlin.String
            public open override /*1*/ /*fake_override*/ fun substring(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.String
            public open override /*3*/ fun toString(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun trimToSize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        java.lang.annotation.Target(value = {ElementType.TYPE, ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.CONSTRUCTOR, ElementType.LOCAL_VARIABLE}: kotlin.Array<java.lang.annotation.ElementType>) java.lang.annotation.Retention(value = RetentionPolicy.SOURCE: java.lang.annotation.RetentionPolicy) public final annotation class SuppressWarnings : kotlin.Annotation {
            public constructor SuppressWarnings(/*0*/ vararg value: kotlin.String /*kotlin.Array<kotlin.String>*/)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public abstract fun value(): kotlin.Array<kotlin.String>
        }
        
        public final class System : java.lang.Object {
            private constructor System()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Thread : java.lang.Runnable {
            public constructor Thread()
            public /*synthesized*/ constructor Thread(/*0*/ p0: (() -> kotlin.Unit)?)
            public /*synthesized*/ constructor Thread(/*0*/ p0: (() -> kotlin.Unit)?, /*1*/ p1: kotlin.String)
            public /*synthesized*/ constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: (() -> kotlin.Unit)?)
            private /*synthesized*/ constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: (() -> kotlin.Unit)?, /*2*/ p2: kotlin.Boolean)
            public /*synthesized*/ constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: (() -> kotlin.Unit)?, /*2*/ p2: kotlin.String)
            public /*synthesized*/ constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: (() -> kotlin.Unit)?, /*2*/ p2: kotlin.String, /*3*/ p3: kotlin.Long)
            public constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: java.lang.Runnable?)
            private constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: java.lang.Runnable?, /*2*/ p2: kotlin.Boolean)
            public constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: java.lang.Runnable?, /*2*/ p2: kotlin.String)
            public constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: java.lang.Runnable?, /*2*/ p2: kotlin.String, /*3*/ p3: kotlin.Long)
            public constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: kotlin.String)
            private constructor Thread(/*0*/ p0: [ERROR : Unresolved java classifier: ThreadGroup]?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Boolean)
            public constructor Thread(/*0*/ p0: java.lang.Runnable?)
            public constructor Thread(/*0*/ p0: java.lang.Runnable?, /*1*/ p1: kotlin.String)
            public constructor Thread(/*0*/ p0: kotlin.String)
            public/*package*/ final var inheritableThreadLocals: java.lang.ThreadLocal.ThreadLocalMap?
            public/*package*/ final var parkBlocker: kotlin.Any?
            public/*package*/ final var threadLocals: java.lang.ThreadLocal.ThreadLocalMap?
            public/*package*/ open fun blockedOn(/*0*/ p0: [ERROR : Unresolved java classifier: Interruptible]?): kotlin.Unit
            public final fun checkAccess(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun clone(): kotlin.Any?
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun countStackFrames(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun destroy(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getContextClassLoader(): java.lang.ClassLoader?
            public open fun getId(): kotlin.Long
            public final fun getName(): kotlin.String
            public final fun getPriority(): kotlin.Int
            public open fun getStackTrace(): kotlin.Array<[ERROR : Unresolved java classifier: StackTraceElement]>
            public open fun getState(): java.lang.Thread.State
            public final fun getThreadGroup(): [ERROR : Unresolved java classifier: ThreadGroup]?
            public open fun getUncaughtExceptionHandler(): java.lang.Thread.UncaughtExceptionHandler?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun interrupt(): kotlin.Unit
            public final fun isAlive(): kotlin.Boolean
            public final fun isDaemon(): kotlin.Boolean
            public open fun isInterrupted(): kotlin.Boolean
            public final fun join(): kotlin.Unit
            public final fun join(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final fun join(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public final fun resume(): kotlin.Unit
            public open override /*1*/ fun run(): kotlin.Unit
            public open fun setContextClassLoader(/*0*/ p0: java.lang.ClassLoader?): kotlin.Unit
            public final fun setDaemon(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public final fun setName(/*0*/ p0: kotlin.String): kotlin.Unit
            public final fun setPriority(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final /*synthesized*/ fun setUncaughtExceptionHandler(/*0*/ p0: ((java.lang.Thread, kotlin.Throwable) -> kotlin.Unit)?): kotlin.Unit
            public open fun setUncaughtExceptionHandler(/*0*/ p0: java.lang.Thread.UncaughtExceptionHandler?): kotlin.Unit
            public open fun start(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public final fun stop(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public final fun stop(/*0*/ p0: kotlin.Throwable): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public final fun suspend(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public final enum class State : kotlin.Enum<java.lang.Thread.State> {
                private constructor State()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                
                public class object <class-object-for-State> {
                    private constructor <class-object-for-State>()
                    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.lang.Thread.State
                    public final /*synthesized*/ fun values(): kotlin.Array<java.lang.Thread.State>
                }
                
                public enum entry BLOCKED : java.lang.Thread.State {
                    private constructor BLOCKED()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-BLOCKED> : java.lang.Thread.State.BLOCKED {
                        private constructor <class-object-for-BLOCKED>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry NEW : java.lang.Thread.State {
                    private constructor NEW()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-NEW> : java.lang.Thread.State.NEW {
                        private constructor <class-object-for-NEW>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry RUNNABLE : java.lang.Thread.State {
                    private constructor RUNNABLE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-RUNNABLE> : java.lang.Thread.State.RUNNABLE {
                        private constructor <class-object-for-RUNNABLE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry TERMINATED : java.lang.Thread.State {
                    private constructor TERMINATED()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-TERMINATED> : java.lang.Thread.State.TERMINATED {
                        private constructor <class-object-for-TERMINATED>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry TIMED_WAITING : java.lang.Thread.State {
                    private constructor TIMED_WAITING()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-TIMED_WAITING> : java.lang.Thread.State.TIMED_WAITING {
                        private constructor <class-object-for-TIMED_WAITING>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry WAITING : java.lang.Thread.State {
                    private constructor WAITING()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-WAITING> : java.lang.Thread.State.WAITING {
                        private constructor <class-object-for-WAITING>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
            }
            
            public trait UncaughtExceptionHandler : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public abstract fun uncaughtException(/*0*/ p0: java.lang.Thread, /*1*/ p1: kotlin.Throwable): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class ThreadLocal</*0*/ T> : java.lang.Object {
            public constructor ThreadLocal</*0*/ T>()
            public/*package*/ open fun childValue(/*0*/ p0: T?): T?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public/*package*/ open fun createMap(/*0*/ p0: java.lang.Thread?, /*1*/ p1: T?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun get(): T?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getMap(/*0*/ p0: java.lang.Thread?): java.lang.ThreadLocal.ThreadLocalMap?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ open fun initialValue(): T?
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun remove(): kotlin.Unit
            public open fun set(/*0*/ p0: T?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ open class ThreadLocalMap : java.lang.Object {
                private constructor ThreadLocalMap(/*0*/ p0: java.lang.ThreadLocal.ThreadLocalMap?)
                public/*package*/ constructor ThreadLocalMap(/*0*/ p0: java.lang.ThreadLocal<out kotlin.Any?>?, /*1*/ p1: kotlin.Any?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ open class Entry {
                    public/*package*/ constructor Entry(/*0*/ p0: java.lang.ThreadLocal<out kotlin.Any?>?, /*1*/ p1: kotlin.Any?)
                    public/*package*/ final var value: kotlin.Any?
                }
            }
        }
        
        public open class Throwable : java.io.Serializable {
            public constructor Throwable()
            public constructor Throwable(/*0*/ p0: kotlin.String?)
            public constructor Throwable(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor Throwable(/*0*/ p0: kotlin.Throwable?)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open fun fillInStackTrace(): kotlin.Throwable
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getLocalizedMessage(): kotlin.String
            public open fun getMessage(): kotlin.String?
            public open fun getStackTrace(): kotlin.Array<[ERROR : Unresolved java classifier: StackTraceElement]>?
            public/*package*/ open fun getStackTraceDepth(): kotlin.Int
            public/*package*/ open fun getStackTraceElement(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: StackTraceElement]?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun initCause(/*0*/ p0: kotlin.Throwable?): kotlin.Throwable
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun printStackTrace(): kotlin.Unit
            public open fun printStackTrace(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]?): kotlin.Unit
            public open fun printStackTrace(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open fun setStackTrace(/*0*/ p0: kotlin.Array<out [ERROR : Unresolved java classifier: StackTraceElement]>): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class UnsupportedOperationException : java.lang.RuntimeException {
            public constructor UnsupportedOperationException()
            public constructor UnsupportedOperationException(/*0*/ p0: kotlin.String?)
            public constructor UnsupportedOperationException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor UnsupportedOperationException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Void : java.lang.Object {
            private constructor Void()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        package java.lang.AbstractStringBuilder {
            public/*package*/ val sizeTable: kotlin.IntArray
            public/*package*/ open fun stringSizeOfInt(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ open fun stringSizeOfLong(/*0*/ p0: kotlin.Long): kotlin.Int
        }
        
        package java.lang.Boolean {
            public val FALSE: kotlin.Boolean
            public val TRUE: kotlin.Boolean
            public val TYPE: java.lang.Class<kotlin.Boolean>
            public open fun getBoolean(/*0*/ p0: kotlin.String?): kotlin.Boolean
            public open fun parseBoolean(/*0*/ p0: kotlin.String?): kotlin.Boolean
            public open fun toString(/*0*/ p0: kotlin.Boolean): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
            public open fun valueOf(/*0*/ p0: kotlin.String?): kotlin.Boolean
        }
        
        package java.lang.Byte {
            public val MAX_VALUE: kotlin.Byte = 127.toByte()
            public val MIN_VALUE: kotlin.Byte = -128.toByte()
            public val SIZE: kotlin.Int = 8
            public val TYPE: java.lang.Class<kotlin.Byte>
            public open fun decode(/*0*/ p0: kotlin.String): kotlin.Byte?
            public open fun parseByte(/*0*/ p0: kotlin.String): kotlin.Byte
            public open fun parseByte(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Byte
            public open fun toString(/*0*/ p0: kotlin.Byte): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Byte): kotlin.Byte?
            public open fun valueOf(/*0*/ p0: kotlin.String): kotlin.Byte?
            public open fun valueOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Byte?
            
            package java.lang.Byte.ByteCache {
                public/*package*/ val cache: kotlin.Array<kotlin.Byte>
            }
        }
        
        package java.lang.Character {
            public val COMBINING_SPACING_MARK: kotlin.Byte = 8.toByte()
            public val CONNECTOR_PUNCTUATION: kotlin.Byte = 23.toByte()
            public val CONTROL: kotlin.Byte = 15.toByte()
            public val CURRENCY_SYMBOL: kotlin.Byte = 26.toByte()
            public val DASH_PUNCTUATION: kotlin.Byte = 20.toByte()
            public val DECIMAL_DIGIT_NUMBER: kotlin.Byte = 9.toByte()
            public val DIRECTIONALITY_ARABIC_NUMBER: kotlin.Byte = 6.toByte()
            public val DIRECTIONALITY_BOUNDARY_NEUTRAL: kotlin.Byte = 9.toByte()
            public val DIRECTIONALITY_COMMON_NUMBER_SEPARATOR: kotlin.Byte = 7.toByte()
            public val DIRECTIONALITY_EUROPEAN_NUMBER: kotlin.Byte = 3.toByte()
            public val DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR: kotlin.Byte = 4.toByte()
            public val DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR: kotlin.Byte = 5.toByte()
            public val DIRECTIONALITY_LEFT_TO_RIGHT: kotlin.Byte = 0.toByte()
            public val DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING: kotlin.Byte = 14.toByte()
            public val DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE: kotlin.Byte = 15.toByte()
            public val DIRECTIONALITY_NONSPACING_MARK: kotlin.Byte = 8.toByte()
            public val DIRECTIONALITY_OTHER_NEUTRALS: kotlin.Byte = 13.toByte()
            public val DIRECTIONALITY_PARAGRAPH_SEPARATOR: kotlin.Byte = 10.toByte()
            public val DIRECTIONALITY_POP_DIRECTIONAL_FORMAT: kotlin.Byte = 18.toByte()
            public val DIRECTIONALITY_RIGHT_TO_LEFT: kotlin.Byte = 1.toByte()
            public val DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC: kotlin.Byte = 2.toByte()
            public val DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING: kotlin.Byte = 16.toByte()
            public val DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE: kotlin.Byte = 17.toByte()
            public val DIRECTIONALITY_SEGMENT_SEPARATOR: kotlin.Byte = 11.toByte()
            public val DIRECTIONALITY_UNDEFINED: kotlin.Byte = -1.toByte()
            public val DIRECTIONALITY_WHITESPACE: kotlin.Byte = 12.toByte()
            public val ENCLOSING_MARK: kotlin.Byte = 7.toByte()
            public val END_PUNCTUATION: kotlin.Byte = 22.toByte()
            public/*package*/ val ERROR: kotlin.Int = -1
            public val FINAL_QUOTE_PUNCTUATION: kotlin.Byte = 30.toByte()
            public val FORMAT: kotlin.Byte = 16.toByte()
            public val INITIAL_QUOTE_PUNCTUATION: kotlin.Byte = 29.toByte()
            public val LETTER_NUMBER: kotlin.Byte = 10.toByte()
            public val LINE_SEPARATOR: kotlin.Byte = 13.toByte()
            public val LOWERCASE_LETTER: kotlin.Byte = 2.toByte()
            public val MATH_SYMBOL: kotlin.Byte = 25.toByte()
            public val MAX_CODE_POINT: kotlin.Int = 1114111
            public val MAX_HIGH_SURROGATE: kotlin.Char = #56319(?)
            public val MAX_LOW_SURROGATE: kotlin.Char = #57343(?)
            public val MAX_RADIX: kotlin.Int = 36
            public val MAX_SURROGATE: kotlin.Char = #57343(?)
            public val MAX_VALUE: kotlin.Char = #65535(￿)
            public val MIN_CODE_POINT: kotlin.Int = 0
            public val MIN_HIGH_SURROGATE: kotlin.Char = #55296(?)
            public val MIN_LOW_SURROGATE: kotlin.Char = #56320(?)
            public val MIN_RADIX: kotlin.Int = 2
            public val MIN_SUPPLEMENTARY_CODE_POINT: kotlin.Int = 65536
            public val MIN_SURROGATE: kotlin.Char = #55296(?)
            public val MIN_VALUE: kotlin.Char = #0( )
            public val MODIFIER_LETTER: kotlin.Byte = 4.toByte()
            public val MODIFIER_SYMBOL: kotlin.Byte = 27.toByte()
            public val NON_SPACING_MARK: kotlin.Byte = 6.toByte()
            public val OTHER_LETTER: kotlin.Byte = 5.toByte()
            public val OTHER_NUMBER: kotlin.Byte = 11.toByte()
            public val OTHER_PUNCTUATION: kotlin.Byte = 24.toByte()
            public val OTHER_SYMBOL: kotlin.Byte = 28.toByte()
            public val PARAGRAPH_SEPARATOR: kotlin.Byte = 14.toByte()
            public val PRIVATE_USE: kotlin.Byte = 18.toByte()
            public val SIZE: kotlin.Int = 16
            public val SPACE_SEPARATOR: kotlin.Byte = 12.toByte()
            public val START_PUNCTUATION: kotlin.Byte = 21.toByte()
            public val SURROGATE: kotlin.Byte = 19.toByte()
            public val TITLECASE_LETTER: kotlin.Byte = 3.toByte()
            public val TYPE: java.lang.Class<kotlin.Char>
            public val UNASSIGNED: kotlin.Byte = 0.toByte()
            public val UPPERCASE_LETTER: kotlin.Byte = 1.toByte()
            public open fun charCount(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun codePointAt(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun codePointAt(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun codePointAt(/*0*/ p0: kotlin.CharSequence, /*1*/ p1: kotlin.Int): kotlin.Int
            public/*package*/ open fun codePointAtImpl(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun codePointBefore(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun codePointBefore(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun codePointBefore(/*0*/ p0: kotlin.CharSequence, /*1*/ p1: kotlin.Int): kotlin.Int
            public/*package*/ open fun codePointBeforeImpl(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun codePointCount(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun codePointCount(/*0*/ p0: kotlin.CharSequence, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public/*package*/ open fun codePointCountImpl(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun digit(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun digit(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun forDigit(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Char
            public open fun getDirectionality(/*0*/ p0: kotlin.Char): kotlin.Byte
            public open fun getDirectionality(/*0*/ p0: kotlin.Int): kotlin.Byte
            public open fun getNumericValue(/*0*/ p0: kotlin.Char): kotlin.Int
            public open fun getNumericValue(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun getType(/*0*/ p0: kotlin.Char): kotlin.Int
            public open fun getType(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun isDefined(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isDefined(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isDigit(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isDigit(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isHighSurrogate(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isISOControl(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isISOControl(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isIdentifierIgnorable(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isIdentifierIgnorable(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isJavaIdentifierPart(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isJavaIdentifierPart(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isJavaIdentifierStart(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isJavaIdentifierStart(/*0*/ p0: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun isJavaLetter(/*0*/ p0: kotlin.Char): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun isJavaLetterOrDigit(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isLetter(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isLetter(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isLetterOrDigit(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isLetterOrDigit(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isLowSurrogate(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isLowerCase(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isLowerCase(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isMirrored(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isMirrored(/*0*/ p0: kotlin.Int): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun isSpace(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isSpaceChar(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isSpaceChar(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isSupplementaryCodePoint(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isSurrogatePair(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Char): kotlin.Boolean
            public open fun isTitleCase(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isTitleCase(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isUnicodeIdentifierPart(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isUnicodeIdentifierPart(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isUnicodeIdentifierStart(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isUnicodeIdentifierStart(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isUpperCase(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isUpperCase(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isValidCodePoint(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isWhitespace(/*0*/ p0: kotlin.Char): kotlin.Boolean
            public open fun isWhitespace(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun offsetByCodePoints(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Int
            public open fun offsetByCodePoints(/*0*/ p0: kotlin.CharSequence, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Int
            public/*package*/ open fun offsetByCodePointsImpl(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Int
            public open fun reverseBytes(/*0*/ p0: kotlin.Char): kotlin.Char
            public open fun toChars(/*0*/ p0: kotlin.Int): kotlin.CharArray
            public open fun toChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray, /*2*/ p2: kotlin.Int): kotlin.Int
            public open fun toCodePoint(/*0*/ p0: kotlin.Char, /*1*/ p1: kotlin.Char): kotlin.Int
            public open fun toLowerCase(/*0*/ p0: kotlin.Char): kotlin.Char
            public open fun toLowerCase(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun toString(/*0*/ p0: kotlin.Char): kotlin.String
            public/*package*/ open fun toSurrogates(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.CharArray?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun toTitleCase(/*0*/ p0: kotlin.Char): kotlin.Char
            public open fun toTitleCase(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun toUpperCase(/*0*/ p0: kotlin.Char): kotlin.Char
            public open fun toUpperCase(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ open fun toUpperCaseCharArray(/*0*/ p0: kotlin.Int): kotlin.CharArray?
            public/*package*/ open fun toUpperCaseEx(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun valueOf(/*0*/ p0: kotlin.Char): kotlin.Char?
            
            package java.lang.Character.CharacterCache {
                public/*package*/ val cache: kotlin.Array<kotlin.Char>
            }
            
            package java.lang.Character.UnicodeBlock {
                public val AEGEAN_NUMBERS: java.lang.Character.UnicodeBlock
                public val ALPHABETIC_PRESENTATION_FORMS: java.lang.Character.UnicodeBlock
                public val ARABIC: java.lang.Character.UnicodeBlock
                public val ARABIC_PRESENTATION_FORMS_A: java.lang.Character.UnicodeBlock
                public val ARABIC_PRESENTATION_FORMS_B: java.lang.Character.UnicodeBlock
                public val ARMENIAN: java.lang.Character.UnicodeBlock
                public val ARROWS: java.lang.Character.UnicodeBlock
                public val BASIC_LATIN: java.lang.Character.UnicodeBlock
                public val BENGALI: java.lang.Character.UnicodeBlock
                public val BLOCK_ELEMENTS: java.lang.Character.UnicodeBlock
                public val BOPOMOFO: java.lang.Character.UnicodeBlock
                public val BOPOMOFO_EXTENDED: java.lang.Character.UnicodeBlock
                public val BOX_DRAWING: java.lang.Character.UnicodeBlock
                public val BRAILLE_PATTERNS: java.lang.Character.UnicodeBlock
                public val BUHID: java.lang.Character.UnicodeBlock
                public val BYZANTINE_MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock
                public val CHEROKEE: java.lang.Character.UnicodeBlock
                public val CJK_COMPATIBILITY: java.lang.Character.UnicodeBlock
                public val CJK_COMPATIBILITY_FORMS: java.lang.Character.UnicodeBlock
                public val CJK_COMPATIBILITY_IDEOGRAPHS: java.lang.Character.UnicodeBlock
                public val CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT: java.lang.Character.UnicodeBlock
                public val CJK_RADICALS_SUPPLEMENT: java.lang.Character.UnicodeBlock
                public val CJK_SYMBOLS_AND_PUNCTUATION: java.lang.Character.UnicodeBlock
                public val CJK_UNIFIED_IDEOGRAPHS: java.lang.Character.UnicodeBlock
                public val CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A: java.lang.Character.UnicodeBlock
                public val CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B: java.lang.Character.UnicodeBlock
                public val COMBINING_DIACRITICAL_MARKS: java.lang.Character.UnicodeBlock
                public val COMBINING_HALF_MARKS: java.lang.Character.UnicodeBlock
                public val COMBINING_MARKS_FOR_SYMBOLS: java.lang.Character.UnicodeBlock
                public val CONTROL_PICTURES: java.lang.Character.UnicodeBlock
                public val CURRENCY_SYMBOLS: java.lang.Character.UnicodeBlock
                public val CYPRIOT_SYLLABARY: java.lang.Character.UnicodeBlock
                public val CYRILLIC: java.lang.Character.UnicodeBlock
                public val CYRILLIC_SUPPLEMENTARY: java.lang.Character.UnicodeBlock
                public val DESERET: java.lang.Character.UnicodeBlock
                public val DEVANAGARI: java.lang.Character.UnicodeBlock
                public val DINGBATS: java.lang.Character.UnicodeBlock
                public val ENCLOSED_ALPHANUMERICS: java.lang.Character.UnicodeBlock
                public val ENCLOSED_CJK_LETTERS_AND_MONTHS: java.lang.Character.UnicodeBlock
                public val ETHIOPIC: java.lang.Character.UnicodeBlock
                public val GENERAL_PUNCTUATION: java.lang.Character.UnicodeBlock
                public val GEOMETRIC_SHAPES: java.lang.Character.UnicodeBlock
                public val GEORGIAN: java.lang.Character.UnicodeBlock
                public val GOTHIC: java.lang.Character.UnicodeBlock
                public val GREEK: java.lang.Character.UnicodeBlock
                public val GREEK_EXTENDED: java.lang.Character.UnicodeBlock
                public val GUJARATI: java.lang.Character.UnicodeBlock
                public val GURMUKHI: java.lang.Character.UnicodeBlock
                public val HALFWIDTH_AND_FULLWIDTH_FORMS: java.lang.Character.UnicodeBlock
                public val HANGUL_COMPATIBILITY_JAMO: java.lang.Character.UnicodeBlock
                public val HANGUL_JAMO: java.lang.Character.UnicodeBlock
                public val HANGUL_SYLLABLES: java.lang.Character.UnicodeBlock
                public val HANUNOO: java.lang.Character.UnicodeBlock
                public val HEBREW: java.lang.Character.UnicodeBlock
                public val HIGH_PRIVATE_USE_SURROGATES: java.lang.Character.UnicodeBlock
                public val HIGH_SURROGATES: java.lang.Character.UnicodeBlock
                public val HIRAGANA: java.lang.Character.UnicodeBlock
                public val IDEOGRAPHIC_DESCRIPTION_CHARACTERS: java.lang.Character.UnicodeBlock
                public val IPA_EXTENSIONS: java.lang.Character.UnicodeBlock
                public val KANBUN: java.lang.Character.UnicodeBlock
                public val KANGXI_RADICALS: java.lang.Character.UnicodeBlock
                public val KANNADA: java.lang.Character.UnicodeBlock
                public val KATAKANA: java.lang.Character.UnicodeBlock
                public val KATAKANA_PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock
                public val KHMER: java.lang.Character.UnicodeBlock
                public val KHMER_SYMBOLS: java.lang.Character.UnicodeBlock
                public val LAO: java.lang.Character.UnicodeBlock
                public val LATIN_1_SUPPLEMENT: java.lang.Character.UnicodeBlock
                public val LATIN_EXTENDED_A: java.lang.Character.UnicodeBlock
                public val LATIN_EXTENDED_ADDITIONAL: java.lang.Character.UnicodeBlock
                public val LATIN_EXTENDED_B: java.lang.Character.UnicodeBlock
                public val LETTERLIKE_SYMBOLS: java.lang.Character.UnicodeBlock
                public val LIMBU: java.lang.Character.UnicodeBlock
                public val LINEAR_B_IDEOGRAMS: java.lang.Character.UnicodeBlock
                public val LINEAR_B_SYLLABARY: java.lang.Character.UnicodeBlock
                public val LOW_SURROGATES: java.lang.Character.UnicodeBlock
                public val MALAYALAM: java.lang.Character.UnicodeBlock
                public val MATHEMATICAL_ALPHANUMERIC_SYMBOLS: java.lang.Character.UnicodeBlock
                public val MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock
                public val MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A: java.lang.Character.UnicodeBlock
                public val MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B: java.lang.Character.UnicodeBlock
                public val MISCELLANEOUS_SYMBOLS: java.lang.Character.UnicodeBlock
                public val MISCELLANEOUS_SYMBOLS_AND_ARROWS: java.lang.Character.UnicodeBlock
                public val MISCELLANEOUS_TECHNICAL: java.lang.Character.UnicodeBlock
                public val MONGOLIAN: java.lang.Character.UnicodeBlock
                public val MUSICAL_SYMBOLS: java.lang.Character.UnicodeBlock
                public val MYANMAR: java.lang.Character.UnicodeBlock
                public val NUMBER_FORMS: java.lang.Character.UnicodeBlock
                public val OGHAM: java.lang.Character.UnicodeBlock
                public val OLD_ITALIC: java.lang.Character.UnicodeBlock
                public val OPTICAL_CHARACTER_RECOGNITION: java.lang.Character.UnicodeBlock
                public val ORIYA: java.lang.Character.UnicodeBlock
                public val OSMANYA: java.lang.Character.UnicodeBlock
                public val PHONETIC_EXTENSIONS: java.lang.Character.UnicodeBlock
                public val PRIVATE_USE_AREA: java.lang.Character.UnicodeBlock
                public val RUNIC: java.lang.Character.UnicodeBlock
                public val SHAVIAN: java.lang.Character.UnicodeBlock
                public val SINHALA: java.lang.Character.UnicodeBlock
                public val SMALL_FORM_VARIANTS: java.lang.Character.UnicodeBlock
                public val SPACING_MODIFIER_LETTERS: java.lang.Character.UnicodeBlock
                public val SPECIALS: java.lang.Character.UnicodeBlock
                public val SUPERSCRIPTS_AND_SUBSCRIPTS: java.lang.Character.UnicodeBlock
                public val SUPPLEMENTAL_ARROWS_A: java.lang.Character.UnicodeBlock
                public val SUPPLEMENTAL_ARROWS_B: java.lang.Character.UnicodeBlock
                public val SUPPLEMENTAL_MATHEMATICAL_OPERATORS: java.lang.Character.UnicodeBlock
                public val SUPPLEMENTARY_PRIVATE_USE_AREA_A: java.lang.Character.UnicodeBlock
                public val SUPPLEMENTARY_PRIVATE_USE_AREA_B: java.lang.Character.UnicodeBlock
                kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public val SURROGATES_AREA: java.lang.Character.UnicodeBlock
                public val SYRIAC: java.lang.Character.UnicodeBlock
                public val TAGALOG: java.lang.Character.UnicodeBlock
                public val TAGBANWA: java.lang.Character.UnicodeBlock
                public val TAGS: java.lang.Character.UnicodeBlock
                public val TAI_LE: java.lang.Character.UnicodeBlock
                public val TAI_XUAN_JING_SYMBOLS: java.lang.Character.UnicodeBlock
                public val TAMIL: java.lang.Character.UnicodeBlock
                public val TELUGU: java.lang.Character.UnicodeBlock
                public val THAANA: java.lang.Character.UnicodeBlock
                public val THAI: java.lang.Character.UnicodeBlock
                public val TIBETAN: java.lang.Character.UnicodeBlock
                public val UGARITIC: java.lang.Character.UnicodeBlock
                public val UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS: java.lang.Character.UnicodeBlock
                public val VARIATION_SELECTORS: java.lang.Character.UnicodeBlock
                public val VARIATION_SELECTORS_SUPPLEMENT: java.lang.Character.UnicodeBlock
                public val YIJING_HEXAGRAM_SYMBOLS: java.lang.Character.UnicodeBlock
                public val YI_RADICALS: java.lang.Character.UnicodeBlock
                public val YI_SYLLABLES: java.lang.Character.UnicodeBlock
                public fun forName(/*0*/ p0: kotlin.String): java.lang.Character.UnicodeBlock
                public open fun of(/*0*/ p0: kotlin.Char): java.lang.Character.UnicodeBlock?
                public open fun of(/*0*/ p0: kotlin.Int): java.lang.Character.UnicodeBlock?
            }
        }
        
        package java.lang.Class {
            public open fun forName(/*0*/ p0: kotlin.String): java.lang.Class<out kotlin.Any?>
            public open fun forName(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean, /*2*/ p2: java.lang.ClassLoader?): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getPrimitiveClass(/*0*/ p0: kotlin.String?): java.lang.Class<out kotlin.Any?>?
        }
        
        package java.lang.ClassLoader {
            public/*package*/ open fun findNative(/*0*/ p0: java.lang.ClassLoader?, /*1*/ p1: kotlin.String?): kotlin.Long
            public/*package*/ open fun getBootstrapClassPath(): [ERROR : Unresolved java classifier: URLClassPath]?
            public/*package*/ open fun getCallerClassLoader(): java.lang.ClassLoader?
            public open fun getSystemClassLoader(): java.lang.ClassLoader?
            public open fun getSystemResource(/*0*/ p0: kotlin.String?): java.net.URL?
            public open fun getSystemResourceAsStream(/*0*/ p0: kotlin.String?): java.io.InputStream?
            public open fun getSystemResources(/*0*/ p0: kotlin.String?): java.util.Enumeration<java.net.URL>
            public/*package*/ open fun loadLibrary(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Boolean): kotlin.Unit
            
            package java.lang.ClassLoader.NativeLibrary {
                public/*package*/ open fun getFromClass(): java.lang.Class<out kotlin.Any?>?
            }
        }
        
        package java.lang.ClassNotFoundException {
        }
        
        package java.lang.Double {
            public val MAX_EXPONENT: kotlin.Int = 1023
            public val MAX_VALUE: kotlin.Double = 1.7976931348623157E308.toDouble()
            public val MIN_EXPONENT: kotlin.Int = -1022
            public val MIN_NORMAL: kotlin.Double = 2.2250738585072014E-308.toDouble()
            public val MIN_VALUE: kotlin.Double = 4.9E-324.toDouble()
            public val NEGATIVE_INFINITY: kotlin.Double
            public val NaN: kotlin.Double
            public val POSITIVE_INFINITY: kotlin.Double
            public val SIZE: kotlin.Int = 64
            public val TYPE: java.lang.Class<kotlin.Double>
            public open fun compare(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Int
            public open fun doubleToLongBits(/*0*/ p0: kotlin.Double): kotlin.Long
            public open fun doubleToRawLongBits(/*0*/ p0: kotlin.Double): kotlin.Long
            public open fun isInfinite(/*0*/ p0: kotlin.Double): kotlin.Boolean
            public open fun isNaN(/*0*/ p0: kotlin.Double): kotlin.Boolean
            public open fun longBitsToDouble(/*0*/ p0: kotlin.Long): kotlin.Double
            public open fun parseDouble(/*0*/ p0: kotlin.String?): kotlin.Double
            public open fun toHexString(/*0*/ p0: kotlin.Double): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Double): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun valueOf(/*0*/ p0: kotlin.String?): kotlin.Double
        }
        
        package java.lang.Enum {
            public open fun </*0*/ T : kotlin.Enum<T>?> valueOf(/*0*/ p0: java.lang.Class<T>, /*1*/ p1: kotlin.String): T
        }
        
        package java.lang.Error {
            public/*package*/ val serialVersionUID: kotlin.Long = 4980196508277280342.toLong()
        }
        
        package java.lang.Exception {
            public/*package*/ val serialVersionUID: kotlin.Long = -3387516993124229948.toLong()
        }
        
        package java.lang.Float {
            public val MAX_EXPONENT: kotlin.Int = 127
            public val MAX_VALUE: kotlin.Float = 3.4028235E38.toFloat()
            public val MIN_EXPONENT: kotlin.Int = -126
            public val MIN_NORMAL: kotlin.Float = 1.17549435E-38.toFloat()
            public val MIN_VALUE: kotlin.Float = 1.4E-45.toFloat()
            public val NEGATIVE_INFINITY: kotlin.Float
            public val NaN: kotlin.Float
            public val POSITIVE_INFINITY: kotlin.Float
            public val SIZE: kotlin.Int = 32
            public val TYPE: java.lang.Class<kotlin.Float>
            public open fun compare(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Int
            public open fun floatToIntBits(/*0*/ p0: kotlin.Float): kotlin.Int
            public open fun floatToRawIntBits(/*0*/ p0: kotlin.Float): kotlin.Int
            public open fun intBitsToFloat(/*0*/ p0: kotlin.Int): kotlin.Float
            public open fun isInfinite(/*0*/ p0: kotlin.Float): kotlin.Boolean
            public open fun isNaN(/*0*/ p0: kotlin.Float): kotlin.Boolean
            public open fun parseFloat(/*0*/ p0: kotlin.String?): kotlin.Float
            public open fun toHexString(/*0*/ p0: kotlin.Float): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Float): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Float): kotlin.Float
            public open fun valueOf(/*0*/ p0: kotlin.String?): kotlin.Float
        }
        
        package java.lang.IllegalArgumentException {
        }
        
        package java.lang.IllegalStateException {
            public/*package*/ val serialVersionUID: kotlin.Long = -1848914673093119416.toLong()
        }
        
        package java.lang.Integer {
            public/*package*/ val DigitOnes: kotlin.CharArray
            public/*package*/ val DigitTens: kotlin.CharArray
            public val MAX_VALUE: kotlin.Int = 2147483647
            public val MIN_VALUE: kotlin.Int = -2147483648
            public val SIZE: kotlin.Int = 32
            public val TYPE: java.lang.Class<kotlin.Int>
            public/*package*/ val digits: kotlin.CharArray
            public/*package*/ val sizeTable: kotlin.IntArray
            public open fun bitCount(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun decode(/*0*/ p0: kotlin.String): kotlin.Int?
            public/*package*/ open fun getAndRemoveCacheProperties(): kotlin.Unit
            public/*package*/ open fun getChars(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray?): kotlin.Unit
            public open fun getInteger(/*0*/ p0: kotlin.String?): kotlin.Int?
            public open fun getInteger(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Int?
            public open fun getInteger(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int?): kotlin.Int?
            public open fun highestOneBit(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun lowestOneBit(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun numberOfLeadingZeros(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun numberOfTrailingZeros(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun parseInt(/*0*/ p0: kotlin.String): kotlin.Int
            public open fun parseInt(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun reverse(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun reverseBytes(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun rotateLeft(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun rotateRight(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun signum(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ open fun stringSize(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun toBinaryString(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun toHexString(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun toOctalString(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Int): kotlin.Int?
            public open fun valueOf(/*0*/ p0: kotlin.String): kotlin.Int?
            public open fun valueOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Int?
            
            package java.lang.Integer.IntegerCache {
                public/*package*/ val cache: kotlin.Array<kotlin.Int>
                public/*package*/ val high: kotlin.Int
            }
        }
        
        package java.lang.Long {
            public val MAX_VALUE: kotlin.Long = 9223372036854775807.toLong()
            public val MIN_VALUE: kotlin.Long = -9223372036854775808.toLong()
            public val SIZE: kotlin.Int = 64
            public val TYPE: java.lang.Class<kotlin.Long>
            public open fun bitCount(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun decode(/*0*/ p0: kotlin.String): kotlin.Long?
            public/*package*/ open fun getChars(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.CharArray?): kotlin.Unit
            public open fun getLong(/*0*/ p0: kotlin.String?): kotlin.Long?
            public open fun getLong(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Long?
            public open fun getLong(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long?): kotlin.Long?
            public open fun highestOneBit(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun lowestOneBit(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun numberOfLeadingZeros(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun numberOfTrailingZeros(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun parseLong(/*0*/ p0: kotlin.String): kotlin.Long
            public open fun parseLong(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Long
            public open fun reverse(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun reverseBytes(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun rotateLeft(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Long
            public open fun rotateRight(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Long
            public open fun signum(/*0*/ p0: kotlin.Long): kotlin.Int
            public/*package*/ open fun stringSize(/*0*/ p0: kotlin.Long): kotlin.Int
            public open fun toBinaryString(/*0*/ p0: kotlin.Long): kotlin.String
            public open fun toHexString(/*0*/ p0: kotlin.Long): kotlin.String
            public open fun toOctalString(/*0*/ p0: kotlin.Long): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Long): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Long): kotlin.Long?
            public open fun valueOf(/*0*/ p0: kotlin.String): kotlin.Long?
            public open fun valueOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Long?
            
            package java.lang.Long.LongCache {
                public/*package*/ val cache: kotlin.Array<kotlin.Long>
            }
        }
        
        package java.lang.Math {
            public val E: kotlin.Double = 2.718281828459045.toDouble()
            public val PI: kotlin.Double = 3.141592653589793.toDouble()
            public open fun IEEEremainder(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun abs(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun abs(/*0*/ p0: kotlin.Float): kotlin.Float
            public open fun abs(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun abs(/*0*/ p0: kotlin.Long): kotlin.Long
            public open fun acos(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun asin(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun atan(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun atan2(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun cbrt(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun ceil(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun copySign(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun copySign(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float
            public open fun cos(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun cosh(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun exp(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun expm1(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun floor(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun getExponent(/*0*/ p0: kotlin.Double): kotlin.Int
            public open fun getExponent(/*0*/ p0: kotlin.Float): kotlin.Int
            public open fun hypot(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun log(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun log10(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun log1p(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun max(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun max(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float
            public open fun max(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun max(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long
            public open fun min(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun min(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Float): kotlin.Float
            public open fun min(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun min(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Long
            public open fun nextAfter(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun nextAfter(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Double): kotlin.Float
            public open fun nextUp(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun nextUp(/*0*/ p0: kotlin.Float): kotlin.Float
            public open fun pow(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Double): kotlin.Double
            public open fun random(): kotlin.Double
            public open fun rint(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun round(/*0*/ p0: kotlin.Double): kotlin.Long
            public open fun round(/*0*/ p0: kotlin.Float): kotlin.Int
            public open fun scalb(/*0*/ p0: kotlin.Double, /*1*/ p1: kotlin.Int): kotlin.Double
            public open fun scalb(/*0*/ p0: kotlin.Float, /*1*/ p1: kotlin.Int): kotlin.Float
            public open fun signum(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun signum(/*0*/ p0: kotlin.Float): kotlin.Float
            public open fun sin(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun sinh(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun sqrt(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun tan(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun tanh(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun toDegrees(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun toRadians(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun ulp(/*0*/ p0: kotlin.Double): kotlin.Double
            public open fun ulp(/*0*/ p0: kotlin.Float): kotlin.Float
        }
        
        package java.lang.Number {
        }
        
        package java.lang.NumberFormatException {
            public/*package*/ val serialVersionUID: kotlin.Long = -2848938806368998894.toLong()
            public/*package*/ open fun forInputString(/*0*/ p0: kotlin.String?): java.lang.NumberFormatException?
        }
        
        package java.lang.Object {
        }
        
        package java.lang.RuntimeException {
            public/*package*/ val serialVersionUID: kotlin.Long = -7034897190745766939.toLong()
        }
        
        package java.lang.Short {
            public val MAX_VALUE: kotlin.Short = 32767.toShort()
            public val MIN_VALUE: kotlin.Short = -32768.toShort()
            public val SIZE: kotlin.Int = 16
            public val TYPE: java.lang.Class<kotlin.Short>
            public open fun decode(/*0*/ p0: kotlin.String): kotlin.Short?
            public open fun parseShort(/*0*/ p0: kotlin.String): kotlin.Short
            public open fun parseShort(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Short
            public open fun reverseBytes(/*0*/ p0: kotlin.Short): kotlin.Short
            public open fun toString(/*0*/ p0: kotlin.Short): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Short): kotlin.Short?
            public open fun valueOf(/*0*/ p0: kotlin.String): kotlin.Short?
            public open fun valueOf(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Short?
            
            package java.lang.Short.ShortCache {
                public/*package*/ val cache: kotlin.Array<kotlin.Short>
            }
        }
        
        package java.lang.String {
            public val CASE_INSENSITIVE_ORDER: java.util.Comparator<kotlin.String>
            public open fun copyValueOf(/*0*/ p0: kotlin.CharArray): kotlin.String
            public open fun copyValueOf(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.String
            public open fun format(/*0*/ p0: java.util.Locale?, /*1*/ p1: kotlin.String, /*2*/ vararg p2: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): kotlin.String
            public open fun format(/*0*/ p0: kotlin.String, /*1*/ vararg p1: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): kotlin.String
            public/*package*/ open fun indexOf(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.CharArray?, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int): kotlin.Int
            public/*package*/ open fun lastIndexOf(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.CharArray?, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int): kotlin.Int
            public open fun valueOf(/*0*/ p0: kotlin.Any?): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Boolean): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Char): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.CharArray): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.CharArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Double): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Float): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Int): kotlin.String
            public open fun valueOf(/*0*/ p0: kotlin.Long): kotlin.String
            
            package java.lang.String.CaseInsensitiveComparator {
            }
        }
        
        package java.lang.StringBuffer {
            public/*package*/ val serialVersionUID: kotlin.Long = 3388685877147921107.toLong()
        }
        
        package java.lang.StringBuilder {
            public/*package*/ val serialVersionUID: kotlin.Long = 4383685877147921099.toLong()
        }
        
        package java.lang.System {
            public val err: java.io.PrintStream
            public val `in`: java.io.InputStream
            public val out: java.io.PrintStream
            public open fun arraycopy(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Any, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public open fun clearProperty(/*0*/ p0: kotlin.String): kotlin.String?
            public open fun console(): [ERROR : Unresolved java classifier: Console]?
            public open fun currentTimeMillis(): kotlin.Long
            public open fun exit(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun gc(): kotlin.Unit
            public/*package*/ open fun getCallerClass(): java.lang.Class<out kotlin.Any?>?
            public open fun getProperties(): java.util.Properties?
            public open fun getProperty(/*0*/ p0: kotlin.String): kotlin.String?
            public open fun getProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.String?
            public open fun getSecurityManager(): [ERROR : Unresolved java classifier: SecurityManager]?
            public open fun getenv(): kotlin.MutableMap<kotlin.String, kotlin.String>
            public open fun getenv(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun identityHashCode(/*0*/ p0: kotlin.Any?): kotlin.Int
            public open fun inheritedChannel(): [ERROR : Unresolved java classifier: Channel]?
            public open fun load(/*0*/ p0: kotlin.String): kotlin.Unit
            public open fun loadLibrary(/*0*/ p0: kotlin.String): kotlin.Unit
            public open fun mapLibraryName(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun nanoTime(): kotlin.Long
            public open fun runFinalization(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun runFinalizersOnExit(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setErr(/*0*/ p0: java.io.PrintStream?): kotlin.Unit
            public open fun setIn(/*0*/ p0: java.io.InputStream?): kotlin.Unit
            public open fun setOut(/*0*/ p0: java.io.PrintStream?): kotlin.Unit
            public open fun setProperties(/*0*/ p0: java.util.Properties?): kotlin.Unit
            public open fun setProperty(/*0*/ key: kotlin.String, /*1*/ value: kotlin.String): kotlin.String?
            public open fun setSecurityManager(/*0*/ p0: [ERROR : Unresolved java classifier: SecurityManager]?): kotlin.Unit
        }
        
        package java.lang.Thread {
            public val MAX_PRIORITY: kotlin.Int = 10
            public val MIN_PRIORITY: kotlin.Int = 1
            public val NORM_PRIORITY: kotlin.Int = 5
            public /*synthesized*/ fun UncaughtExceptionHandler(/*0*/ function: (java.lang.Thread, kotlin.Throwable) -> kotlin.Unit): java.lang.Thread.UncaughtExceptionHandler
            public open fun activeCount(): kotlin.Int
            public open fun currentThread(): java.lang.Thread
            public open fun dumpStack(): kotlin.Unit
            public open fun enumerate(/*0*/ tarray: kotlin.Array<out java.lang.Thread>): kotlin.Int
            public open fun getAllStackTraces(): kotlin.MutableMap<java.lang.Thread, kotlin.Array<out [ERROR : Unresolved java classifier: StackTraceElement]>>
            public open fun getDefaultUncaughtExceptionHandler(): java.lang.Thread.UncaughtExceptionHandler?
            public open fun holdsLock(/*0*/ p0: kotlin.Any): kotlin.Boolean
            public open fun interrupted(): kotlin.Boolean
            public /*synthesized*/ fun setDefaultUncaughtExceptionHandler(/*0*/ p0: ((java.lang.Thread, kotlin.Throwable) -> kotlin.Unit)?): kotlin.Unit
            public open fun setDefaultUncaughtExceptionHandler(/*0*/ p0: java.lang.Thread.UncaughtExceptionHandler?): kotlin.Unit
            public open fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun sleep(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun yield(): kotlin.Unit
        }
        
        package java.lang.ThreadLocal {
            public/*package*/ open fun createInheritedMap(/*0*/ p0: java.lang.ThreadLocal.ThreadLocalMap?): java.lang.ThreadLocal.ThreadLocalMap?
            
            package java.lang.ThreadLocal.ThreadLocalMap {
            }
        }
        
        package java.lang.Throwable {
        }
        
        package java.lang.UnsupportedOperationException {
            public/*package*/ val serialVersionUID: kotlin.Long = -1242599979055084673.toLong()
        }
        
        package java.lang.Void {
            public val TYPE: java.lang.Class<java.lang.Void>
        }
        
        package java.lang.annotation {
            public /*synthesized*/ fun Annotation(/*0*/ function: () -> java.lang.Class<out kotlin.Annotation>): java.lang.annotation.Annotation
            
            public trait Annotation : java.lang.Object {
                public abstract fun annotationType(): java.lang.Class<out kotlin.Annotation>
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public open class AnnotationFormatError : java.lang.Error {
                public constructor AnnotationFormatError(/*0*/ p0: kotlin.String?)
                public constructor AnnotationFormatError(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
                public constructor AnnotationFormatError(/*0*/ p0: kotlin.Throwable?)
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
                public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public open class AnnotationTypeMismatchException : java.lang.RuntimeException {
                public constructor AnnotationTypeMismatchException(/*0*/ p0: java.lang.reflect.Method, /*1*/ p1: kotlin.String)
                public open fun element(): java.lang.reflect.Method
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open fun foundType(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
                public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            java.lang.annotation.Documented() java.lang.annotation.Retention(value = RetentionPolicy.RUNTIME: java.lang.annotation.RetentionPolicy) java.lang.annotation.Target(value = {ElementType.ANNOTATION_TYPE}: kotlin.Array<java.lang.annotation.ElementType>) public final annotation class Documented : kotlin.Annotation {
                public constructor Documented()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public final enum class ElementType : kotlin.Enum<java.lang.annotation.ElementType> {
                private constructor ElementType()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                
                public class object <class-object-for-ElementType> {
                    private constructor <class-object-for-ElementType>()
                    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.lang.annotation.ElementType
                    public final /*synthesized*/ fun values(): kotlin.Array<java.lang.annotation.ElementType>
                }
                
                public enum entry ANNOTATION_TYPE : java.lang.annotation.ElementType {
                    private constructor ANNOTATION_TYPE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-ANNOTATION_TYPE> : java.lang.annotation.ElementType.ANNOTATION_TYPE {
                        private constructor <class-object-for-ANNOTATION_TYPE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry CONSTRUCTOR : java.lang.annotation.ElementType {
                    private constructor CONSTRUCTOR()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-CONSTRUCTOR> : java.lang.annotation.ElementType.CONSTRUCTOR {
                        private constructor <class-object-for-CONSTRUCTOR>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry FIELD : java.lang.annotation.ElementType {
                    private constructor FIELD()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-FIELD> : java.lang.annotation.ElementType.FIELD {
                        private constructor <class-object-for-FIELD>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry LOCAL_VARIABLE : java.lang.annotation.ElementType {
                    private constructor LOCAL_VARIABLE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-LOCAL_VARIABLE> : java.lang.annotation.ElementType.LOCAL_VARIABLE {
                        private constructor <class-object-for-LOCAL_VARIABLE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry METHOD : java.lang.annotation.ElementType {
                    private constructor METHOD()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-METHOD> : java.lang.annotation.ElementType.METHOD {
                        private constructor <class-object-for-METHOD>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry PACKAGE : java.lang.annotation.ElementType {
                    private constructor PACKAGE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-PACKAGE> : java.lang.annotation.ElementType.PACKAGE {
                        private constructor <class-object-for-PACKAGE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry PARAMETER : java.lang.annotation.ElementType {
                    private constructor PARAMETER()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-PARAMETER> : java.lang.annotation.ElementType.PARAMETER {
                        private constructor <class-object-for-PARAMETER>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry TYPE : java.lang.annotation.ElementType {
                    private constructor TYPE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-TYPE> : java.lang.annotation.ElementType.TYPE {
                        private constructor <class-object-for-TYPE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
            }
            
            public open class IncompleteAnnotationException : java.lang.RuntimeException {
                public constructor IncompleteAnnotationException(/*0*/ p0: java.lang.Class<out kotlin.Annotation?>, /*1*/ p1: kotlin.String)
                public open fun annotationType(): java.lang.Class<out kotlin.Annotation>
                public open fun elementName(): kotlin.String
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
                public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            java.lang.annotation.Documented() java.lang.annotation.Retention(value = RetentionPolicy.RUNTIME: java.lang.annotation.RetentionPolicy) java.lang.annotation.Target(value = {ElementType.ANNOTATION_TYPE}: kotlin.Array<java.lang.annotation.ElementType>) public final annotation class Inherited : kotlin.Annotation {
                public constructor Inherited()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            java.lang.annotation.Documented() java.lang.annotation.Retention(value = RetentionPolicy.RUNTIME: java.lang.annotation.RetentionPolicy) java.lang.annotation.Target(value = {ElementType.ANNOTATION_TYPE}: kotlin.Array<java.lang.annotation.ElementType>) public final annotation class Retention : kotlin.Annotation {
                public constructor Retention(/*0*/ value: java.lang.annotation.RetentionPolicy)
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                public abstract fun value(): java.lang.annotation.RetentionPolicy
            }
            
            public final enum class RetentionPolicy : kotlin.Enum<java.lang.annotation.RetentionPolicy> {
                private constructor RetentionPolicy()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                
                public class object <class-object-for-RetentionPolicy> {
                    private constructor <class-object-for-RetentionPolicy>()
                    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.lang.annotation.RetentionPolicy
                    public final /*synthesized*/ fun values(): kotlin.Array<java.lang.annotation.RetentionPolicy>
                }
                
                public enum entry CLASS : java.lang.annotation.RetentionPolicy {
                    private constructor CLASS()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-CLASS> : java.lang.annotation.RetentionPolicy.CLASS {
                        private constructor <class-object-for-CLASS>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry RUNTIME : java.lang.annotation.RetentionPolicy {
                    private constructor RUNTIME()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-RUNTIME> : java.lang.annotation.RetentionPolicy.RUNTIME {
                        private constructor <class-object-for-RUNTIME>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry SOURCE : java.lang.annotation.RetentionPolicy {
                    private constructor SOURCE()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-SOURCE> : java.lang.annotation.RetentionPolicy.SOURCE {
                        private constructor <class-object-for-SOURCE>()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
            }
            
            java.lang.annotation.Documented() java.lang.annotation.Retention(value = RetentionPolicy.RUNTIME: java.lang.annotation.RetentionPolicy) java.lang.annotation.Target(value = {ElementType.ANNOTATION_TYPE}: kotlin.Array<java.lang.annotation.ElementType>) public final annotation class Target : kotlin.Annotation {
                public constructor Target(/*0*/ vararg value: java.lang.annotation.ElementType /*kotlin.Array<java.lang.annotation.ElementType>*/)
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                public abstract fun value(): kotlin.Array<out java.lang.annotation.ElementType>
            }
        }
        
        package java.lang.reflect {
            public /*synthesized*/ fun GenericDeclaration(/*0*/ function: () -> kotlin.Array<out [ERROR : Unresolved java classifier: TypeVariable<?>]?>): java.lang.reflect.GenericDeclaration
            
            public open class AccessibleObject : java.lang.reflect.AnnotatedElement {
                protected/*protected and package*/ constructor AccessibleObject()
                public/*package*/ final var override: kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun </*0*/ T : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<T>): T?
                public open override /*1*/ fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open fun isAccessible(): kotlin.Boolean
                public open override /*1*/ fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun setAccessible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public trait AnnotatedElement : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public abstract fun </*0*/ T : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<T>): T?
                public abstract fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public abstract fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public abstract fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public final class Array : java.lang.Object {
                private constructor Array()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public final class Constructor</*0*/ T> : java.lang.reflect.AccessibleObject, java.lang.reflect.GenericDeclaration, java.lang.reflect.Member {
                public/*package*/ constructor Constructor</*0*/ T>(/*0*/ p0: java.lang.Class<T>?, /*1*/ p1: kotlin.Array<out java.lang.Class<out kotlin.Any?>>?, /*2*/ p2: kotlin.Array<out java.lang.Class<out kotlin.Any?>>?, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.String?, /*6*/ p6: kotlin.ByteArray?, /*7*/ p7: kotlin.ByteArray?)
                public/*package*/ final override /*1*/ /*fake_override*/ var override: kotlin.Boolean
                protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun clone(): kotlin.Any
                public/*package*/ open fun copy(): java.lang.reflect.Constructor<T>?
                public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun </*0*/ T : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<T>): T?
                public open override /*1*/ /*fake_override*/ fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
                public final override /*3*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public/*package*/ open fun getConstructorAccessor(): [ERROR : Unresolved java classifier: ConstructorAccessor]?
                public open override /*1*/ fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open override /*1*/ fun getDeclaringClass(): java.lang.Class<out T>
                public open fun getExceptionTypes(): kotlin.Array<java.lang.Class<out kotlin.Any?>>?
                public open fun getGenericExceptionTypes(): kotlin.Array<java.lang.reflect.Type>?
                public open fun getGenericParameterTypes(): kotlin.Array<java.lang.reflect.Type>?
                public open override /*1*/ fun getModifiers(): kotlin.Int
                public open override /*1*/ fun getName(): kotlin.String
                public open fun getParameterAnnotations(): kotlin.Array<kotlin.Array<kotlin.Annotation>?>
                public open fun getParameterTypes(): kotlin.Array<java.lang.Class<out kotlin.Any?>>?
                public/*package*/ open fun getRawAnnotations(): kotlin.ByteArray?
                public/*package*/ open fun getRawParameterAnnotations(): kotlin.ByteArray?
                public/*package*/ open fun getSignature(): kotlin.String?
                public/*package*/ open fun getSlot(): kotlin.Int
                public open override /*1*/ fun getTypeParameters(): kotlin.Array<out [ERROR : Unresolved java classifier: TypeVariable<Constructor<T>>]>
                public open override /*3*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isAccessible(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
                public open override /*1*/ fun isSynthetic(): kotlin.Boolean
                public open fun isVarArgs(): kotlin.Boolean
                public open fun newInstance(/*0*/ vararg p0: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): T
                public final override /*3*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setAccessible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public/*package*/ open fun setConstructorAccessor(/*0*/ p0: [ERROR : Unresolved java classifier: ConstructorAccessor]?): kotlin.Unit
                public open fun toGenericString(): kotlin.String
                public open override /*3*/ fun toString(): kotlin.String
                public final override /*3*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public final class Field : java.lang.reflect.AccessibleObject, java.lang.reflect.Member {
                public/*package*/ constructor Field(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.String?, /*2*/ p2: java.lang.Class<out kotlin.Any?>?, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.String?, /*6*/ p6: kotlin.ByteArray?)
                public/*package*/ final override /*1*/ /*fake_override*/ var override: kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public/*package*/ open fun copy(): java.lang.reflect.Field?
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open fun get(/*0*/ p0: kotlin.Any?): kotlin.Any?
                public open override /*1*/ fun </*0*/ T : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<T>): T?
                public open override /*1*/ /*fake_override*/ fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open fun getBoolean(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public open fun getByte(/*0*/ p0: kotlin.Any?): kotlin.Byte
                public open fun getChar(/*0*/ p0: kotlin.Any?): kotlin.Char
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open override /*1*/ fun getDeclaringClass(): java.lang.Class<out kotlin.Any>
                public open fun getDouble(/*0*/ p0: kotlin.Any?): kotlin.Double
                public open fun getFloat(/*0*/ p0: kotlin.Any?): kotlin.Float
                public open fun getGenericType(): java.lang.reflect.Type?
                public open fun getInt(/*0*/ p0: kotlin.Any?): kotlin.Int
                public open fun getLong(/*0*/ p0: kotlin.Any?): kotlin.Long
                public open override /*1*/ fun getModifiers(): kotlin.Int
                public open override /*1*/ fun getName(): kotlin.String?
                public open fun getShort(/*0*/ p0: kotlin.Any?): kotlin.Short
                public open fun getType(): java.lang.Class<out kotlin.Any?>?
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isAccessible(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
                public open fun isEnumConstant(): kotlin.Boolean
                public open override /*1*/ fun isSynthetic(): kotlin.Boolean
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun set(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setAccessible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open fun setBoolean(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                public open fun setByte(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Byte): kotlin.Unit
                public open fun setChar(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Char): kotlin.Unit
                public open fun setDouble(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Double): kotlin.Unit
                public open fun setFloat(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Float): kotlin.Unit
                public open fun setInt(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open fun setLong(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                public open fun setShort(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Short): kotlin.Unit
                public open fun toGenericString(): kotlin.String
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public trait GenericDeclaration : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public abstract fun getTypeParameters(): kotlin.Array<out [ERROR : Unresolved java classifier: TypeVariable<?>]?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public trait Member : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public abstract fun getDeclaringClass(): java.lang.Class<out kotlin.Any>
                public abstract fun getModifiers(): kotlin.Int
                public abstract fun getName(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public abstract fun isSynthetic(): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public final class Method : java.lang.reflect.AccessibleObject, java.lang.reflect.GenericDeclaration, java.lang.reflect.Member {
                public/*package*/ constructor Method(/*0*/ p0: java.lang.Class<out kotlin.Any?>?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Array<out java.lang.Class<out kotlin.Any?>>?, /*3*/ p3: java.lang.Class<out kotlin.Any?>?, /*4*/ p4: kotlin.Array<out java.lang.Class<out kotlin.Any?>>?, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int, /*7*/ p7: kotlin.String?, /*8*/ p8: kotlin.ByteArray?, /*9*/ p9: kotlin.ByteArray?, /*10*/ p10: kotlin.ByteArray?)
                public/*package*/ final override /*1*/ /*fake_override*/ var override: kotlin.Boolean
                protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun clone(): kotlin.Any
                public/*package*/ open fun copy(): java.lang.reflect.Method?
                public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun </*0*/ T : kotlin.Annotation> getAnnotation(/*0*/ annotationClass: java.lang.Class<T>): T?
                public open override /*1*/ /*fake_override*/ fun getAnnotations(): kotlin.Array<out kotlin.Annotation>
                public final override /*3*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getDeclaredAnnotations(): kotlin.Array<out kotlin.Annotation>
                public open override /*1*/ fun getDeclaringClass(): java.lang.Class<out kotlin.Any>
                public open fun getDefaultValue(): kotlin.Any?
                public open fun getExceptionTypes(): kotlin.Array<java.lang.Class<out kotlin.Any?>>?
                public open fun getGenericExceptionTypes(): kotlin.Array<java.lang.reflect.Type>?
                public open fun getGenericParameterTypes(): kotlin.Array<java.lang.reflect.Type>?
                public open fun getGenericReturnType(): java.lang.reflect.Type?
                public/*package*/ open fun getMethodAccessor(): [ERROR : Unresolved java classifier: MethodAccessor]?
                public open override /*1*/ fun getModifiers(): kotlin.Int
                public open override /*1*/ fun getName(): kotlin.String?
                public open fun getParameterAnnotations(): kotlin.Array<kotlin.Array<kotlin.Annotation>>
                public open fun getParameterTypes(): kotlin.Array<java.lang.Class<out kotlin.Any?>>?
                public open fun getReturnType(): java.lang.Class<out kotlin.Any?>?
                public open override /*1*/ fun getTypeParameters(): kotlin.Array<out [ERROR : Unresolved java classifier: TypeVariable<Method>]>
                public open override /*3*/ fun hashCode(): kotlin.Int
                public open fun invoke(/*0*/ p0: kotlin.Any?, /*1*/ vararg p1: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): kotlin.Any?
                public open override /*1*/ /*fake_override*/ fun isAccessible(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isAnnotationPresent(/*0*/ annotationClass: java.lang.Class<out kotlin.Annotation>): kotlin.Boolean
                public open fun isBridge(): kotlin.Boolean
                public open override /*1*/ fun isSynthetic(): kotlin.Boolean
                public open fun isVarArgs(): kotlin.Boolean
                public final override /*3*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun setAccessible(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public/*package*/ open fun setMethodAccessor(/*0*/ p0: [ERROR : Unresolved java classifier: MethodAccessor]?): kotlin.Unit
                public open fun toGenericString(): kotlin.String
                public open override /*3*/ fun toString(): kotlin.String
                public final override /*3*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public trait Type : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            package java.lang.reflect.AccessibleObject {
                public/*package*/ val reflectionFactory: [ERROR : Unresolved java classifier: ReflectionFactory]
                public open fun setAccessible(/*0*/ array: kotlin.Array<out java.lang.reflect.AccessibleObject>, /*1*/ flag: kotlin.Boolean): kotlin.Unit
            }
            
            package java.lang.reflect.Array {
                public open fun get(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Any?
                public open fun getBoolean(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Boolean
                public open fun getByte(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Byte
                public open fun getChar(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Char
                public open fun getDouble(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Double
                public open fun getFloat(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Float
                public open fun getInt(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Int
                public open fun getLength(/*0*/ p0: kotlin.Any): kotlin.Int
                public open fun getLong(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Long
                public open fun getShort(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int): kotlin.Short
                public open fun newInstance(/*0*/ componentType: java.lang.Class<out kotlin.Any>, /*1*/ vararg dimensions: kotlin.Int /*kotlin.Array<kotlin.Int>*/): kotlin.Any
                public open fun newInstance(/*0*/ componentType: java.lang.Class<out kotlin.Any>, /*1*/ length: kotlin.Int): kotlin.Any
                public open fun set(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Any?): kotlin.Unit
                public open fun setBoolean(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean): kotlin.Unit
                public open fun setByte(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Byte): kotlin.Unit
                public open fun setChar(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Char): kotlin.Unit
                public open fun setDouble(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Double): kotlin.Unit
                public open fun setFloat(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Float): kotlin.Unit
                public open fun setInt(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
                public open fun setLong(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Long): kotlin.Unit
                public open fun setShort(/*0*/ p0: kotlin.Any, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Short): kotlin.Unit
            }
            
            package java.lang.reflect.Constructor {
            }
            
            package java.lang.reflect.Field {
                public/*package*/ open fun getTypeName(/*0*/ p0: java.lang.Class<out kotlin.Any?>?): kotlin.String?
            }
            
            package java.lang.reflect.Member {
                public val DECLARED: kotlin.Int = 1
                public val PUBLIC: kotlin.Int = 0
            }
            
            package java.lang.reflect.Method {
            }
        }
    }
    
    package java.net {
        
        public open class ConnectException : java.net.SocketException {
            public constructor ConnectException()
            public constructor ConnectException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class DatagramPacket : java.lang.Object {
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int)
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: SocketAddress])
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: java.net.InetAddress?, /*3*/ p3: kotlin.Int)
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: [ERROR : Unresolved java classifier: SocketAddress])
            public constructor DatagramPacket(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: java.net.InetAddress?, /*4*/ p4: kotlin.Int)
            public/*package*/ final var address: java.net.InetAddress?
            public/*package*/ final var buf: kotlin.ByteArray?
            public/*package*/ final var bufLength: kotlin.Int
            public/*package*/ final var length: kotlin.Int
            public/*package*/ final var offset: kotlin.Int
            public/*package*/ final var port: kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAddress(): java.net.InetAddress?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getData(): kotlin.ByteArray?
            public open fun getLength(): kotlin.Int
            public open fun getOffset(): kotlin.Int
            public open fun getPort(): kotlin.Int
            public open fun getSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun setAddress(/*0*/ p0: java.net.InetAddress?): kotlin.Unit
            public open fun setData(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open fun setData(/*0*/ p0: kotlin.ByteArray, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun setLength(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setPort(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setSocketAddress(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class DatagramSocket : java.lang.Object {
            public constructor DatagramSocket()
            protected/*protected and package*/ constructor DatagramSocket(/*0*/ p0: [ERROR : Unresolved java classifier: DatagramSocketImpl])
            public constructor DatagramSocket(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?)
            public constructor DatagramSocket(/*0*/ p0: kotlin.Int)
            public constructor DatagramSocket(/*0*/ p0: kotlin.Int, /*1*/ p1: java.net.InetAddress?)
            public/*package*/ final var connectState: kotlin.Int
            public/*package*/ final var connectedAddress: java.net.InetAddress?
            public/*package*/ final var connectedPort: kotlin.Int
            public/*package*/ final var impl: [ERROR : Unresolved java classifier: DatagramSocketImpl]?
            public/*package*/ final var oldImpl: kotlin.Boolean
            public open fun bind(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?): kotlin.Unit
            public/*package*/ open fun checkAddress(/*0*/ p0: java.net.InetAddress?, /*1*/ p1: kotlin.String?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun close(): kotlin.Unit
            public open fun connect(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]): kotlin.Unit
            public open fun connect(/*0*/ p0: java.net.InetAddress, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open fun createImpl(): kotlin.Unit
            public open fun disconnect(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getBroadcast(): kotlin.Boolean
            public open fun getChannel(): [ERROR : Unresolved java classifier: DatagramChannel]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getImpl(): [ERROR : Unresolved java classifier: DatagramSocketImpl]?
            public open fun getInetAddress(): java.net.InetAddress?
            public open fun getLocalAddress(): java.net.InetAddress?
            public open fun getLocalPort(): kotlin.Int
            public open fun getLocalSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]?
            public open fun getPort(): kotlin.Int
            public open fun getReceiveBufferSize(): kotlin.Int
            public open fun getRemoteSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]?
            public open fun getReuseAddress(): kotlin.Boolean
            public open fun getSendBufferSize(): kotlin.Int
            public open fun getSoTimeout(): kotlin.Int
            public open fun getTrafficClass(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun isBound(): kotlin.Boolean
            public open fun isClosed(): kotlin.Boolean
            public open fun isConnected(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun receive(/*0*/ p0: java.net.DatagramPacket): kotlin.Unit
            public open fun send(/*0*/ p0: java.net.DatagramPacket): kotlin.Unit
            public open fun setBroadcast(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setReceiveBufferSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setReuseAddress(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setSendBufferSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setSoTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setTrafficClass(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class InetAddress : java.io.Serializable {
            public/*package*/ constructor InetAddress()
            public/*package*/ final var address: kotlin.Int
            public/*package*/ final var family: kotlin.Int
            public/*package*/ final var hostName: kotlin.String?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAddress(): kotlin.ByteArray?
            public open fun getCanonicalHostName(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getHostAddress(): kotlin.String?
            public open fun getHostName(): kotlin.String?
            public/*package*/ open fun getHostName(/*0*/ p0: kotlin.Boolean): kotlin.String?
            public open override /*1*/ fun hashCode(): kotlin.Int
            public open fun isAnyLocalAddress(): kotlin.Boolean
            public open fun isLinkLocalAddress(): kotlin.Boolean
            public open fun isLoopbackAddress(): kotlin.Boolean
            public open fun isMCGlobal(): kotlin.Boolean
            public open fun isMCLinkLocal(): kotlin.Boolean
            public open fun isMCNodeLocal(): kotlin.Boolean
            public open fun isMCOrgLocal(): kotlin.Boolean
            public open fun isMCSiteLocal(): kotlin.Boolean
            public open fun isMulticastAddress(): kotlin.Boolean
            public open fun isReachable(/*0*/ p0: [ERROR : Unresolved java classifier: NetworkInterface]?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
            public open fun isReachable(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open fun isSiteLocalAddress(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ final class Cache : java.lang.Object {
                public constructor Cache(/*0*/ p0: java.net.InetAddress.Cache.Type?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open fun get(/*0*/ p0: kotlin.String?): java.net.InetAddress.CacheEntry?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun put(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Any?): java.net.InetAddress.Cache?
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ final enum class Type : kotlin.Enum<java.net.InetAddress.Cache.Type> {
                    private constructor Type()
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public/*package*/ class object <class-object-for-Type> {
                        private constructor <class-object-for-Type>()
                        public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.net.InetAddress.Cache.Type
                        public final /*synthesized*/ fun values(): kotlin.Array<java.net.InetAddress.Cache.Type>
                    }
                    
                    public enum entry Negative : java.net.InetAddress.Cache.Type {
                        private constructor Negative()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        
                        public class object <class-object-for-Negative> : java.net.InetAddress.Cache.Type.Negative {
                            private constructor <class-object-for-Negative>()
                            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        }
                    }
                    
                    public enum entry Positive : java.net.InetAddress.Cache.Type {
                        private constructor Positive()
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        
                        public class object <class-object-for-Positive> : java.net.InetAddress.Cache.Type.Positive {
                            private constructor <class-object-for-Positive>()
                            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                            public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                            public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        }
                    }
                }
            }
            
            public/*package*/ final class CacheEntry : java.lang.Object {
                public/*package*/ constructor CacheEntry(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long)
                public/*package*/ final var address: kotlin.Any?
                public/*package*/ final var expiration: kotlin.Long
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public/*package*/ trait InetAddressImpl : java.lang.Object {
            public abstract fun anyLocalAddress(): java.net.InetAddress?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getHostByAddr(/*0*/ p0: kotlin.ByteArray?): kotlin.String?
            public abstract fun getLocalHostName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun isReachable(/*0*/ p0: java.net.InetAddress?, /*1*/ p1: kotlin.Int, /*2*/ p2: [ERROR : Unresolved java classifier: NetworkInterface]?, /*3*/ p3: kotlin.Int): kotlin.Boolean
            public abstract fun lookupAllHostAddr(/*0*/ p0: kotlin.String?): kotlin.Array<java.net.InetAddress>?
            public abstract fun loopbackAddress(): java.net.InetAddress?
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class MalformedURLException : java.io.IOException {
            public constructor MalformedURLException()
            public constructor MalformedURLException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class ServerSocket : java.lang.Object {
            public constructor ServerSocket()
            public/*package*/ constructor ServerSocket(/*0*/ p0: [ERROR : Unresolved java classifier: SocketImpl]?)
            public constructor ServerSocket(/*0*/ p0: kotlin.Int)
            public constructor ServerSocket(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int)
            public constructor ServerSocket(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: java.net.InetAddress?)
            public open fun accept(): java.net.Socket
            public open fun bind(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?): kotlin.Unit
            public open fun bind(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?, /*1*/ p1: kotlin.Int): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun close(): kotlin.Unit
            public/*package*/ open fun createImpl(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getChannel(): [ERROR : Unresolved java classifier: ServerSocketChannel]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getImpl(): [ERROR : Unresolved java classifier: SocketImpl]?
            public open fun getInetAddress(): java.net.InetAddress?
            public open fun getLocalPort(): kotlin.Int
            public open fun getLocalSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]?
            public open fun getReceiveBufferSize(): kotlin.Int
            public open fun getReuseAddress(): kotlin.Boolean
            public open fun getSoTimeout(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ final fun implAccept(/*0*/ p0: java.net.Socket): kotlin.Unit
            public open fun isBound(): kotlin.Boolean
            public open fun isClosed(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open fun setBound(): kotlin.Unit
            public/*package*/ open fun setCreated(): kotlin.Unit
            public open fun setPerformancePreferences(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun setReceiveBufferSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setReuseAddress(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setSoTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Socket : java.lang.Object {
            public constructor Socket()
            public constructor Socket(/*0*/ p0: [ERROR : Unresolved java classifier: Proxy])
            private constructor Socket(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?, /*1*/ p1: [ERROR : Unresolved java classifier: SocketAddress]?, /*2*/ p2: kotlin.Boolean)
            protected/*protected and package*/ constructor Socket(/*0*/ p0: [ERROR : Unresolved java classifier: SocketImpl]?)
            public constructor Socket(/*0*/ p0: java.net.InetAddress?, /*1*/ p1: kotlin.Int)
            public constructor Socket(/*0*/ p0: java.net.InetAddress?, /*1*/ p1: kotlin.Int, /*2*/ p2: java.net.InetAddress?, /*3*/ p3: kotlin.Int)
            public constructor Socket(/*0*/ p0: java.net.InetAddress?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean)
            public constructor Socket(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int)
            public constructor Socket(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: java.net.InetAddress?, /*3*/ p3: kotlin.Int)
            public constructor Socket(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Boolean)
            public/*package*/ final var impl: [ERROR : Unresolved java classifier: SocketImpl]?
            public open fun bind(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open fun close(): kotlin.Unit
            public open fun connect(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress]): kotlin.Unit
            public open fun connect(/*0*/ p0: [ERROR : Unresolved java classifier: SocketAddress], /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ open fun createImpl(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getChannel(): [ERROR : Unresolved java classifier: SocketChannel]?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ open fun getImpl(): [ERROR : Unresolved java classifier: SocketImpl]?
            public open fun getInetAddress(): java.net.InetAddress?
            public open fun getInputStream(): java.io.InputStream?
            public open fun getKeepAlive(): kotlin.Boolean
            public open fun getLocalAddress(): java.net.InetAddress?
            public open fun getLocalPort(): kotlin.Int
            public open fun getLocalSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]?
            public open fun getOOBInline(): kotlin.Boolean
            public open fun getOutputStream(): java.io.OutputStream?
            public open fun getPort(): kotlin.Int
            public open fun getReceiveBufferSize(): kotlin.Int
            public open fun getRemoteSocketAddress(): [ERROR : Unresolved java classifier: SocketAddress]?
            public open fun getReuseAddress(): kotlin.Boolean
            public open fun getSendBufferSize(): kotlin.Int
            public open fun getSoLinger(): kotlin.Int
            public open fun getSoTimeout(): kotlin.Int
            public open fun getTcpNoDelay(): kotlin.Boolean
            public open fun getTrafficClass(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun isBound(): kotlin.Boolean
            public open fun isClosed(): kotlin.Boolean
            public open fun isConnected(): kotlin.Boolean
            public open fun isInputShutdown(): kotlin.Boolean
            public open fun isOutputShutdown(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ final fun postAccept(): kotlin.Unit
            public open fun sendUrgentData(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ open fun setBound(): kotlin.Unit
            public/*package*/ open fun setConnected(): kotlin.Unit
            public/*package*/ open fun setCreated(): kotlin.Unit
            public/*package*/ open fun setImpl(): kotlin.Unit
            public open fun setKeepAlive(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setOOBInline(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setPerformancePreferences(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public open fun setReceiveBufferSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setReuseAddress(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setSendBufferSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setSoLinger(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun setSoTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setTcpNoDelay(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setTrafficClass(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun shutdownInput(): kotlin.Unit
            public open fun shutdownOutput(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class SocketException : java.io.IOException {
            public constructor SocketException()
            public constructor SocketException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class URI : kotlin.Comparable<java.net.URI>, java.io.Serializable {
            private constructor URI()
            public constructor URI(/*0*/ p0: kotlin.String?)
            public constructor URI(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?)
            public constructor URI(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.String?, /*5*/ p5: kotlin.String?, /*6*/ p6: kotlin.String?)
            public constructor URI(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?)
            public constructor URI(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?, /*4*/ p4: kotlin.String?)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun compareTo(/*0*/ other: java.net.URI): kotlin.Int
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAuthority(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getFragment(): kotlin.String?
            public open fun getHost(): kotlin.String?
            public open fun getPath(): kotlin.String?
            public open fun getPort(): kotlin.Int
            public open fun getQuery(): kotlin.String?
            public open fun getRawAuthority(): kotlin.String?
            public open fun getRawFragment(): kotlin.String?
            public open fun getRawPath(): kotlin.String?
            public open fun getRawQuery(): kotlin.String?
            public open fun getRawSchemeSpecificPart(): kotlin.String?
            public open fun getRawUserInfo(): kotlin.String?
            public open fun getScheme(): kotlin.String?
            public open fun getSchemeSpecificPart(): kotlin.String?
            public open fun getUserInfo(): kotlin.String?
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open fun isAbsolute(): kotlin.Boolean
            public open fun isOpaque(): kotlin.Boolean
            public open fun normalize(): java.net.URI
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun parseServerAuthority(): java.net.URI
            public open fun relativize(/*0*/ p0: java.net.URI): java.net.URI
            public open fun resolve(/*0*/ p0: java.net.URI): java.net.URI
            public open fun resolve(/*0*/ p0: kotlin.String): java.net.URI
            public open fun toASCIIString(): kotlin.String
            public open override /*2*/ fun toString(): kotlin.String
            public open fun toURL(): java.net.URL
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open inner class Parser : java.lang.Object {
                public/*package*/ constructor Parser(/*0*/ p2: kotlin.String?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun parse(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class URL : java.io.Serializable {
            public constructor URL(/*0*/ p0: java.net.URL?, /*1*/ p1: kotlin.String)
            public constructor URL(/*0*/ p0: java.net.URL?, /*1*/ p1: kotlin.String, /*2*/ p2: [ERROR : Unresolved java classifier: URLStreamHandler]?)
            public constructor URL(/*0*/ p0: kotlin.String)
            public constructor URL(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.String)
            public constructor URL(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.String, /*4*/ p4: [ERROR : Unresolved java classifier: URLStreamHandler]?)
            public constructor URL(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String)
            public/*package*/ final var handler: [ERROR : Unresolved java classifier: URLStreamHandler]?
            public/*package*/ final var hostAddress: java.net.InetAddress?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAuthority(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public final fun getContent(): kotlin.Any?
            public final fun getContent(/*0*/ p0: kotlin.Array<out java.lang.Class<out kotlin.Any?>>): kotlin.Any?
            public open fun getDefaultPort(): kotlin.Int
            public open fun getFile(): kotlin.String?
            public open fun getHost(): kotlin.String?
            public open fun getPath(): kotlin.String?
            public open fun getPort(): kotlin.Int
            public open fun getProtocol(): kotlin.String?
            public open fun getQuery(): kotlin.String?
            public open fun getRef(): kotlin.String?
            public open fun getUserInfo(): kotlin.String?
            public open override /*1*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun openConnection(): java.net.URLConnection?
            public open fun openConnection(/*0*/ p0: [ERROR : Unresolved java classifier: Proxy]): java.net.URLConnection?
            public final fun openStream(): java.io.InputStream?
            public open fun sameFile(/*0*/ p0: java.net.URL): kotlin.Boolean
            protected/*protected and package*/ open fun set(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.String, /*4*/ p4: kotlin.String?): kotlin.Unit
            protected/*protected and package*/ open fun set(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.String?, /*4*/ p4: kotlin.String?, /*5*/ p5: kotlin.String?, /*6*/ p6: kotlin.String?, /*7*/ p7: kotlin.String?): kotlin.Unit
            public open fun toExternalForm(): kotlin.String
            public open override /*1*/ fun toString(): kotlin.String
            public open fun toURI(): java.net.URI
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public abstract class URLConnection : java.lang.Object {
            protected/*protected and package*/ constructor URLConnection(/*0*/ p0: java.net.URL?)
            protected/*protected and package*/ final var allowUserInteraction: kotlin.Boolean
            protected/*protected and package*/ final var connected: kotlin.Boolean
            protected/*protected and package*/ final var doInput: kotlin.Boolean
            protected/*protected and package*/ final var doOutput: kotlin.Boolean
            protected/*protected and package*/ final var ifModifiedSince: kotlin.Long
            protected/*protected and package*/ final var url: java.net.URL?
            protected/*protected and package*/ final var useCaches: kotlin.Boolean
            public open fun addRequestProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun connect(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun getAllowUserInteraction(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getConnectTimeout(): kotlin.Int
            public open fun getContent(): kotlin.Any?
            public open fun getContent(/*0*/ p0: kotlin.Array<out java.lang.Class<out kotlin.Any?>>): kotlin.Any?
            public open fun getContentEncoding(): kotlin.String?
            public/*package*/ open fun getContentHandler(): [ERROR : Unresolved java classifier: ContentHandler]?
            public open fun getContentLength(): kotlin.Int
            public open fun getContentType(): kotlin.String?
            public open fun getDate(): kotlin.Long
            public open fun getDefaultUseCaches(): kotlin.Boolean
            public open fun getDoInput(): kotlin.Boolean
            public open fun getDoOutput(): kotlin.Boolean
            public open fun getExpiration(): kotlin.Long
            public open fun getHeaderField(/*0*/ p0: kotlin.Int): kotlin.String?
            public open fun getHeaderField(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun getHeaderFieldDate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Long
            public open fun getHeaderFieldInt(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun getHeaderFieldKey(/*0*/ p0: kotlin.Int): kotlin.String?
            public open fun getHeaderFields(): kotlin.MutableMap<kotlin.String, kotlin.List<kotlin.String>>
            public open fun getIfModifiedSince(): kotlin.Long
            public open fun getInputStream(): java.io.InputStream?
            public open fun getLastModified(): kotlin.Long
            public open fun getOutputStream(): java.io.OutputStream?
            public open fun getPermission(): [ERROR : Unresolved java classifier: Permission]
            public open fun getReadTimeout(): kotlin.Int
            public open fun getRequestProperties(): kotlin.MutableMap<kotlin.String, kotlin.List<kotlin.String>>
            public open fun getRequestProperty(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun getURL(): java.net.URL?
            public open fun getUseCaches(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun setAllowUserInteraction(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setConnectTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setDefaultUseCaches(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setDoInput(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setDoOutput(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setIfModifiedSince(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun setReadTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setRequestProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun setUseCaches(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class UnknownHostException : java.io.IOException {
            public constructor UnknownHostException()
            public constructor UnknownHostException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        package java.net.DatagramPacket {
        }
        
        package java.net.DatagramSocket {
            public/*package*/ val ST_CONNECTED: kotlin.Int = 1
            public/*package*/ val ST_CONNECTED_NO_IMPL: kotlin.Int = 2
            public/*package*/ val ST_NOT_CONNECTED: kotlin.Int = 0
            public/*package*/ var factory: [ERROR : Unresolved java classifier: DatagramSocketImplFactory]?
            public/*package*/ var implClass: java.lang.Class<out kotlin.Any?>?
            public open fun setDatagramSocketImplFactory(/*0*/ p0: [ERROR : Unresolved java classifier: DatagramSocketImplFactory]?): kotlin.Unit
        }
        
        package java.net.InetAddress {
            public/*package*/ val IPv4: kotlin.Int = 1
            public/*package*/ val IPv6: kotlin.Int = 2
            public/*package*/ var impl: java.net.InetAddressImpl?
            public/*package*/ var preferIPv6Address: kotlin.Boolean
            public/*package*/ var unknown_array: kotlin.Array<java.net.InetAddress>?
            public/*package*/ open fun anyLocalAddress(): java.net.InetAddress?
            public open fun getAllByName(/*0*/ p0: kotlin.String?): kotlin.Array<java.net.InetAddress>?
            public/*package*/ open fun getAllByName0(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean): kotlin.Array<java.net.InetAddress>?
            public open fun getByAddress(/*0*/ p0: kotlin.ByteArray): java.net.InetAddress
            public open fun getByAddress(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.ByteArray): java.net.InetAddress
            public open fun getByName(/*0*/ p0: kotlin.String?): java.net.InetAddress?
            public open fun getLocalHost(): java.net.InetAddress?
            public/*package*/ open fun loadImpl(/*0*/ p0: kotlin.String?): kotlin.Any?
        }
        
        package java.net.ServerSocket {
            public open fun setSocketFactory(/*0*/ p0: [ERROR : Unresolved java classifier: SocketImplFactory]?): kotlin.Unit
        }
        
        package java.net.Socket {
            public open fun setSocketImplFactory(/*0*/ p0: [ERROR : Unresolved java classifier: SocketImplFactory]?): kotlin.Unit
        }
        
        package java.net.URI {
            public/*package*/ val serialVersionUID: kotlin.Long = -6052424284110960213.toLong()
            public open fun create(/*0*/ p0: kotlin.String): java.net.URI
        }
        
        package java.net.URL {
            public/*package*/ var factory: [ERROR : Unresolved java classifier: URLStreamHandlerFactory]?
            public/*package*/ var handlers: [ERROR : Unresolved java classifier: Hashtable]?
            public/*package*/ val serialVersionUID: kotlin.Long = -7627629688361524110.toLong()
            public/*package*/ open fun getURLStreamHandler(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: URLStreamHandler]?
            public open fun setURLStreamHandlerFactory(/*0*/ p0: [ERROR : Unresolved java classifier: URLStreamHandlerFactory]?): kotlin.Unit
        }
        
        package java.net.URLConnection {
            public/*package*/ var factory: [ERROR : Unresolved java classifier: ContentHandlerFactory]?
            public open fun getDefaultAllowUserInteraction(): kotlin.Boolean
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getDefaultRequestProperty(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun getFileNameMap(): [ERROR : Unresolved java classifier: FileNameMap]
            public open fun guessContentTypeFromName(/*0*/ p0: kotlin.String?): kotlin.String?
            public open fun guessContentTypeFromStream(/*0*/ p0: java.io.InputStream): kotlin.String?
            public open fun setContentHandlerFactory(/*0*/ p0: [ERROR : Unresolved java classifier: ContentHandlerFactory]?): kotlin.Unit
            public open fun setDefaultAllowUserInteraction(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setDefaultRequestProperty(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun setFileNameMap(/*0*/ p0: [ERROR : Unresolved java classifier: FileNameMap]?): kotlin.Unit
        }
    }
    
    package java.nio {
        
        package java.nio.charset {
            
            public abstract class Charset : kotlin.Comparable<java.nio.charset.Charset> {
                protected/*protected and package*/ constructor Charset(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Array<out kotlin.String>?)
                public final fun aliases(): kotlin.MutableSet<kotlin.String>?
                public open fun canEncode(): kotlin.Boolean
                public final override /*1*/ fun compareTo(/*0*/ other: java.nio.charset.Charset): kotlin.Int
                public abstract fun contains(/*0*/ p0: java.nio.charset.Charset): kotlin.Boolean
                public final fun decode(/*0*/ p0: [ERROR : Unresolved java classifier: ByteBuffer]): [ERROR : Unresolved java classifier: CharBuffer]
                public open fun displayName(): kotlin.String
                public open fun displayName(/*0*/ p0: java.util.Locale?): kotlin.String
                public final fun encode(/*0*/ p0: [ERROR : Unresolved java classifier: CharBuffer]): [ERROR : Unresolved java classifier: ByteBuffer]
                public final fun encode(/*0*/ p0: kotlin.String): [ERROR : Unresolved java classifier: ByteBuffer]
                public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ fun hashCode(): kotlin.Int
                public final fun isRegistered(): kotlin.Boolean
                public final fun name(): kotlin.String
                public abstract fun newDecoder(): [ERROR : Unresolved java classifier: CharsetDecoder]
                public abstract fun newEncoder(): [ERROR : Unresolved java classifier: CharsetEncoder]
                public final override /*1*/ fun toString(): kotlin.String
            }
            
            package java.nio.charset.Charset {
                public/*package*/ open fun atBugLevel(/*0*/ p0: kotlin.String?): kotlin.Boolean
                public open fun availableCharsets(): java.util.SortedMap<kotlin.String, java.nio.charset.Charset>
                public open fun defaultCharset(): java.nio.charset.Charset
                public open fun forName(/*0*/ p0: kotlin.String): java.nio.charset.Charset
                public open fun isSupported(/*0*/ p0: kotlin.String): kotlin.Boolean
            }
        }
    }
    
    package java.rmi {
        
        public trait Remote : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class RemoteException : java.io.IOException {
            public constructor RemoteException()
            public constructor RemoteException(/*0*/ p0: kotlin.String?)
            public constructor RemoteException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public final var detail: kotlin.Throwable?
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun getCause(): kotlin.Throwable?
            public open override /*1*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        package java.rmi.RemoteException {
        }
    }
    
    package java.security {
        
        public open class GeneralSecurityException : java.lang.Exception {
            public constructor GeneralSecurityException()
            public constructor GeneralSecurityException(/*0*/ p0: kotlin.String?)
            public constructor GeneralSecurityException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor GeneralSecurityException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public abstract class Identity : java.io.Serializable {
            protected/*protected and package*/ constructor Identity()
            public constructor Identity(/*0*/ p0: kotlin.String?)
            public constructor Identity(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: IdentityScope]?)
            public/*package*/ final var certificates: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final var info: kotlin.String?
            public/*package*/ final var scope: [ERROR : Unresolved java classifier: IdentityScope]?
            public open fun addCertificate(/*0*/ p0: [ERROR : Unresolved java classifier: Certificate]): kotlin.Unit
            public open fun certificates(): kotlin.Array<[ERROR : Unresolved java classifier: Certificate]>
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public/*package*/ open fun fullName(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getInfo(): kotlin.String?
            public final fun getName(): kotlin.String?
            public open fun getPublicKey(): [ERROR : Unresolved java classifier: PublicKey]?
            public final fun getScope(): [ERROR : Unresolved java classifier: IdentityScope]?
            public open override /*1*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ open fun identityEquals(/*0*/ p0: java.security.Identity): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open fun printCertificates(): kotlin.String?
            public/*package*/ open fun printKeys(): kotlin.String?
            public open fun removeCertificate(/*0*/ p0: [ERROR : Unresolved java classifier: Certificate]?): kotlin.Unit
            public open fun setInfo(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun setPublicKey(/*0*/ p0: [ERROR : Unresolved java classifier: PublicKey]?): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public open fun toString(/*0*/ p0: kotlin.Boolean): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class NoSuchAlgorithmException : java.security.GeneralSecurityException {
            public constructor NoSuchAlgorithmException()
            public constructor NoSuchAlgorithmException(/*0*/ p0: kotlin.String?)
            public constructor NoSuchAlgorithmException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor NoSuchAlgorithmException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class Policy : java.lang.Object {
            public constructor Policy()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getParameters(): java.security.Policy.Parameters?
            public open fun getPermissions(/*0*/ p0: [ERROR : Unresolved java classifier: CodeSource]): [ERROR : Unresolved java classifier: PermissionCollection]
            public open fun getPermissions(/*0*/ p0: [ERROR : Unresolved java classifier: ProtectionDomain]?): [ERROR : Unresolved java classifier: PermissionCollection]
            public open fun getProvider(): java.security.Provider?
            public open fun getType(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun implies(/*0*/ p0: [ERROR : Unresolved java classifier: ProtectionDomain], /*1*/ p1: [ERROR : Unresolved java classifier: Permission]?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun refresh(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public trait Parameters : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class PolicyDelegate : java.security.Policy {
                private constructor PolicyDelegate(/*0*/ p0: [ERROR : Unresolved java classifier: PolicySpi]?, /*1*/ p1: java.security.Provider?, /*2*/ p2: kotlin.String?, /*3*/ p3: java.security.Policy.Parameters?)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getParameters(): java.security.Policy.Parameters?
                public open override /*2*/ fun getPermissions(/*0*/ p0: [ERROR : Unresolved java classifier: CodeSource]?): [ERROR : Unresolved java classifier: PermissionCollection]?
                public open override /*2*/ fun getPermissions(/*0*/ p0: [ERROR : Unresolved java classifier: ProtectionDomain]?): [ERROR : Unresolved java classifier: PermissionCollection]?
                public open override /*1*/ fun getProvider(): java.security.Provider?
                public open override /*1*/ fun getType(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun implies(/*0*/ p0: [ERROR : Unresolved java classifier: ProtectionDomain]?, /*1*/ p1: [ERROR : Unresolved java classifier: Permission]?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun refresh(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class PolicyInfo : java.lang.Object {
                public/*package*/ constructor PolicyInfo(/*0*/ p0: java.security.Policy?, /*1*/ p1: kotlin.Boolean)
                public/*package*/ final val initialized: kotlin.Boolean
                public/*package*/ final val policy: java.security.Policy?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class UnsupportedEmptyCollection {
                public constructor UnsupportedEmptyCollection()
                public open fun add(/*0*/ p0: [ERROR : Unresolved java classifier: Permission]?): kotlin.Unit
                public open fun elements(): java.util.Enumeration<[ERROR : Unresolved java classifier: Permission]>?
                public open fun implies(/*0*/ p0: [ERROR : Unresolved java classifier: Permission]?): kotlin.Boolean
            }
        }
        
        public abstract class Provider : java.util.Properties {
            protected/*protected and package*/ constructor Provider(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double, /*2*/ p2: kotlin.String?)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var defaults: java.util.Properties?
            public open fun clear(): kotlin.Unit
            public open fun elements(): java.util.Enumeration<kotlin.Any>?
            public open fun entrySet(): kotlin.MutableSet<kotlin.Map.Entry<kotlin.Any, kotlin.Any>>?
            public open fun get(/*0*/ p0: kotlin.Any?): kotlin.Any?
            public open fun getInfo(): kotlin.String?
            public open fun getName(): kotlin.String?
            public open override /*1*/ fun getProperty(/*0*/ p0: kotlin.String): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.String?
            public open fun getService(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): java.security.Provider.Service?
            public open fun getServices(): kotlin.MutableSet<java.security.Provider.Service>?
            public open fun getVersion(): kotlin.Double
            public open fun keySet(): kotlin.MutableSet<kotlin.Any>
            public open fun keys(): java.util.Enumeration<kotlin.Any>?
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open override /*1*/ fun load(/*0*/ p0: java.io.InputStream?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun load(/*0*/ p0: java.io.Reader?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun loadFromXML(/*0*/ p0: java.io.InputStream): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun propertyNames(): java.util.Enumeration<out kotlin.Any?>
            public open fun put(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Any?
            public open fun putAll(/*0*/ p0: kotlin.Map<out kotlin.Any?, kotlin.Any?>): kotlin.Unit
            protected/*protected and package*/ open fun putService(/*0*/ p0: java.security.Provider.Service): kotlin.Unit
            public open fun remove(/*0*/ p0: kotlin.Any?): kotlin.Any?
            protected/*protected and package*/ open fun removeService(/*0*/ p0: java.security.Provider.Service): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun save(/*0*/ p0: java.io.OutputStream?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setProperty(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun store(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun store(/*0*/ p0: java.io.Writer, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun storeToXML(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun storeToXML(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun stringPropertyNames(): kotlin.MutableSet<kotlin.String>?
            public open override /*1*/ fun toString(): kotlin.String
            public open fun values(): kotlin.MutableCollection<kotlin.Any>
            
            private open class EngineDescription : java.lang.Object {
                public/*package*/ constructor EngineDescription(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.String?)
                public/*package*/ final val constructorParameterClassName: kotlin.String?
                public/*package*/ final val name: kotlin.String?
                public/*package*/ final val supportsParameter: kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public/*package*/ open fun getConstructorParameterClass(): java.lang.Class<out kotlin.Any?>?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public open class Service : java.lang.Object {
                public constructor Service(/*0*/ p0: java.security.Provider, /*1*/ p1: kotlin.String, /*2*/ p2: kotlin.String, /*3*/ p3: kotlin.String, /*4*/ p4: kotlin.List<kotlin.String>?, /*5*/ p5: kotlin.Map<kotlin.String, kotlin.String>?)
                private constructor Service(/*0*/ p0: java.security.Provider?)
                public/*package*/ open fun addAttribute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final fun getAlgorithm(): kotlin.String?
                public final fun getAttribute(/*0*/ p0: kotlin.String): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public final fun getClassName(): kotlin.String?
                public final fun getProvider(): java.security.Provider?
                public final fun getType(): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open fun newInstance(/*0*/ p0: kotlin.Any?): kotlin.Any?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun supportsParameter(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class ServiceKey : java.lang.Object {
                private constructor ServiceKey(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Boolean)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun matches(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class UString : java.lang.Object {
                public/*package*/ constructor UString(/*0*/ p0: kotlin.String?)
                public/*package*/ final val lowerString: kotlin.String?
                public/*package*/ final val string: kotlin.String?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public final class Security : java.lang.Object {
            private constructor Security()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class ProviderProperty : java.lang.Object {
                private constructor ProviderProperty()
                public/*package*/ final var className: kotlin.String?
                public/*package*/ final var provider: java.security.Provider?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public abstract class Signer : java.security.Identity {
            protected/*protected and package*/ constructor Signer()
            public constructor Signer(/*0*/ p0: kotlin.String?)
            public constructor Signer(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: IdentityScope]?)
            public/*package*/ final override /*1*/ /*fake_override*/ var certificates: [ERROR : Unresolved java classifier: Vector]?
            public/*package*/ final override /*1*/ /*fake_override*/ var info: kotlin.String?
            public/*package*/ final override /*1*/ /*fake_override*/ var scope: [ERROR : Unresolved java classifier: IdentityScope]?
            public open override /*1*/ /*fake_override*/ fun addCertificate(/*0*/ p0: [ERROR : Unresolved java classifier: Certificate]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun certificates(): kotlin.Array<[ERROR : Unresolved java classifier: Certificate]>
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public final override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun fullName(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getInfo(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getName(): kotlin.String?
            public open fun getPrivateKey(): [ERROR : Unresolved java classifier: PrivateKey]?
            public open override /*1*/ /*fake_override*/ fun getPublicKey(): [ERROR : Unresolved java classifier: PublicKey]?
            public final override /*1*/ /*fake_override*/ fun getScope(): [ERROR : Unresolved java classifier: IdentityScope]?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun identityEquals(/*0*/ p0: java.security.Identity): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun printCertificates(): kotlin.String?
            public/*package*/ open override /*1*/ fun printKeys(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun removeCertificate(/*0*/ p0: [ERROR : Unresolved java classifier: Certificate]?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setInfo(/*0*/ p0: kotlin.String?): kotlin.Unit
            public final fun setKeyPair(/*0*/ p0: [ERROR : Unresolved java classifier: KeyPair]): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setPublicKey(/*0*/ p0: [ERROR : Unresolved java classifier: PublicKey]?): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String
            public open override /*1*/ /*fake_override*/ fun toString(/*0*/ p0: kotlin.Boolean): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        package java.security.GeneralSecurityException {
        }
        
        package java.security.Identity {
        }
        
        package java.security.NoSuchAlgorithmException {
        }
        
        package java.security.Policy {
            public val UNSUPPORTED_EMPTY_COLLECTION: [ERROR : Unresolved java classifier: PermissionCollection]
            public open fun getInstance(/*0*/ p0: kotlin.String?, /*1*/ p1: java.security.Policy.Parameters?): java.security.Policy?
            public open fun getInstance(/*0*/ p0: kotlin.String?, /*1*/ p1: java.security.Policy.Parameters?, /*2*/ p2: java.security.Provider): java.security.Policy?
            public open fun getInstance(/*0*/ p0: kotlin.String?, /*1*/ p1: java.security.Policy.Parameters?, /*2*/ p2: kotlin.String): java.security.Policy?
            public open fun getPolicy(): java.security.Policy?
            public/*package*/ open fun getPolicyNoCheck(): java.security.Policy?
            public/*package*/ open fun isSet(): kotlin.Boolean
            public open fun setPolicy(/*0*/ p0: java.security.Policy?): kotlin.Unit
        }
        
        package java.security.Provider {
            public/*package*/ val serialVersionUID: kotlin.Long = -4298000515446427739.toLong()
            
            package java.security.Provider.Service {
            }
        }
        
        package java.security.Security {
            public open fun addProvider(/*0*/ p0: java.security.Provider): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getAlgorithmProperty(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.String?
            public open fun getAlgorithms(/*0*/ p0: kotlin.String?): kotlin.MutableSet<kotlin.String>
            public/*package*/ open fun getFilterComponents(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Array<kotlin.String>?
            public/*package*/ open fun getImpl(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: java.security.Provider?): kotlin.Array<kotlin.Any>?
            public/*package*/ open fun getImpl(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: java.security.Provider?, /*3*/ p3: kotlin.Any?): kotlin.Array<kotlin.Any>?
            public/*package*/ open fun getImpl(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): kotlin.Array<kotlin.Any>?
            public/*package*/ open fun getImpl(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Any?): kotlin.Array<kotlin.Any>?
            public open fun getProperty(/*0*/ p0: kotlin.String): kotlin.String?
            public open fun getProvider(/*0*/ p0: kotlin.String?): java.security.Provider?
            public open fun getProviders(): kotlin.Array<java.security.Provider>?
            public open fun getProviders(/*0*/ p0: kotlin.Map<kotlin.String, kotlin.String>): kotlin.Array<java.security.Provider>?
            public open fun getProviders(/*0*/ p0: kotlin.String): kotlin.Array<java.security.Provider>?
            public open fun insertProviderAt(/*0*/ p0: java.security.Provider, /*1*/ p1: kotlin.Int): kotlin.Int
            public open fun removeProvider(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun setProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.Unit
        }
        
        package java.security.Signer {
        }
    }
    
    package java.sql {
        
        public trait Array : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun free(): kotlin.Unit
            public abstract fun getArray(): kotlin.Any
            public abstract fun getArray(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Any
            public abstract fun getArray(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any
            public abstract fun getArray(/*0*/ p0: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any
            public abstract fun getBaseType(): kotlin.Int
            public abstract fun getBaseTypeName(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getResultSet(): java.sql.ResultSet?
            public abstract fun getResultSet(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): java.sql.ResultSet?
            public abstract fun getResultSet(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): java.sql.ResultSet?
            public abstract fun getResultSet(/*0*/ p0: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): java.sql.ResultSet?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class BatchUpdateException : java.sql.SQLException {
            public constructor BatchUpdateException()
            public constructor BatchUpdateException(/*0*/ p0: kotlin.IntArray?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.IntArray?, /*1*/ p1: kotlin.Throwable?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?, /*2*/ p2: kotlin.Throwable?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.IntArray?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.IntArray?, /*4*/ p4: kotlin.Throwable?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.IntArray?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.IntArray?, /*3*/ p3: kotlin.Throwable?)
            public constructor BatchUpdateException(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public open override /*1*/ /*fake_override*/ fun getErrorCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getNextException(): java.sql.SQLException?
            public open override /*1*/ /*fake_override*/ fun getSQLState(): kotlin.String?
            public open fun getUpdateCounts(): kotlin.IntArray?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.Throwable>
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setNextException(/*0*/ p0: java.sql.SQLException?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait Blob : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun free(): kotlin.Unit
            public abstract fun getBinaryStream(): java.io.InputStream
            public abstract fun getBinaryStream(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): java.io.InputStream?
            public abstract fun getBytes(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.ByteArray
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun length(): kotlin.Long
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun position(/*0*/ p0: java.sql.Blob, /*1*/ p1: kotlin.Long): kotlin.Long
            public abstract fun position(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.Long): kotlin.Long
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.Long): java.io.OutputStream?
            public abstract fun setBytes(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ByteArray): kotlin.Int
            public abstract fun setBytes(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.ByteArray, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public abstract fun truncate(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait CallableStatement : java.sql.PreparedStatement {
            public abstract override /*1*/ /*fake_override*/ fun addBatch(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun addBatch(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun cancel(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun clearBatch(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun clearParameters(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun clearWarnings(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun close(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun execute(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun executeBatch(): kotlin.IntArray?
            public abstract override /*1*/ /*fake_override*/ fun executeQuery(): java.sql.ResultSet
            public abstract override /*1*/ /*fake_override*/ fun executeQuery(/*0*/ p0: kotlin.String): java.sql.ResultSet
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Int
            public abstract fun getArray(/*0*/ p0: kotlin.Int): java.sql.Array?
            public abstract fun getArray(/*0*/ p0: kotlin.String): java.sql.Array?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.String): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBlob(/*0*/ p0: kotlin.Int): java.sql.Blob?
            public abstract fun getBlob(/*0*/ p0: kotlin.String): java.sql.Blob?
            public abstract fun getBoolean(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun getBoolean(/*0*/ p0: kotlin.String): kotlin.Boolean
            public abstract fun getByte(/*0*/ p0: kotlin.Int): kotlin.Byte
            public abstract fun getByte(/*0*/ p0: kotlin.String): kotlin.Byte
            public abstract fun getBytes(/*0*/ p0: kotlin.Int): kotlin.ByteArray?
            public abstract fun getBytes(/*0*/ p0: kotlin.String): kotlin.ByteArray?
            public abstract fun getCharacterStream(/*0*/ p0: kotlin.Int): java.io.Reader?
            public abstract fun getCharacterStream(/*0*/ p0: kotlin.String): java.io.Reader?
            public abstract fun getClob(/*0*/ p0: kotlin.Int): java.sql.Clob?
            public abstract fun getClob(/*0*/ p0: kotlin.String): java.sql.Clob?
            public abstract override /*1*/ /*fake_override*/ fun getConnection(): java.sql.Connection?
            public abstract fun getDate(/*0*/ p0: kotlin.Int): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.String): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Date?
            public abstract fun getDouble(/*0*/ p0: kotlin.Int): kotlin.Double
            public abstract fun getDouble(/*0*/ p0: kotlin.String): kotlin.Double
            public abstract override /*1*/ /*fake_override*/ fun getFetchDirection(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getFetchSize(): kotlin.Int
            public abstract fun getFloat(/*0*/ p0: kotlin.Int): kotlin.Float
            public abstract fun getFloat(/*0*/ p0: kotlin.String): kotlin.Float
            public abstract override /*1*/ /*fake_override*/ fun getGeneratedKeys(): java.sql.ResultSet?
            public abstract fun getInt(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getInt(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract fun getLong(/*0*/ p0: kotlin.Int): kotlin.Long
            public abstract fun getLong(/*0*/ p0: kotlin.String): kotlin.Long
            public abstract override /*1*/ /*fake_override*/ fun getMaxFieldSize(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getMaxRows(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getMetaData(): java.sql.ResultSetMetaData?
            public abstract override /*1*/ /*fake_override*/ fun getMoreResults(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun getMoreResults(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun getNCharacterStream(/*0*/ p0: kotlin.Int): java.io.Reader?
            public abstract fun getNCharacterStream(/*0*/ p0: kotlin.String?): java.io.Reader?
            public abstract fun getNClob(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun getNClob(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun getNString(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getNString(/*0*/ p0: kotlin.String?): kotlin.String?
            public abstract fun getObject(/*0*/ p0: kotlin.Int): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.String): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any?
            public abstract override /*1*/ /*fake_override*/ fun getParameterMetaData(): java.sql.ParameterMetaData?
            public abstract override /*1*/ /*fake_override*/ fun getQueryTimeout(): kotlin.Int
            public abstract fun getRef(/*0*/ p0: kotlin.Int): java.sql.Ref?
            public abstract fun getRef(/*0*/ p0: kotlin.String): java.sql.Ref?
            public abstract override /*1*/ /*fake_override*/ fun getResultSet(): java.sql.ResultSet?
            public abstract override /*1*/ /*fake_override*/ fun getResultSetConcurrency(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getResultSetHoldability(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getResultSetType(): kotlin.Int
            public abstract fun getRowId(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: RowId]?
            public abstract fun getRowId(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: RowId]?
            public abstract fun getSQLXML(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun getSQLXML(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun getShort(/*0*/ p0: kotlin.Int): kotlin.Short
            public abstract fun getShort(/*0*/ p0: kotlin.String): kotlin.Short
            public abstract fun getString(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getString(/*0*/ p0: kotlin.String): kotlin.String?
            public abstract fun getTime(/*0*/ p0: kotlin.Int): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.String): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Time?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.Int): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.String): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Timestamp?
            public abstract fun getURL(/*0*/ p0: kotlin.Int): java.net.URL?
            public abstract fun getURL(/*0*/ p0: kotlin.String): java.net.URL?
            public abstract override /*1*/ /*fake_override*/ fun getUpdateCount(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getWarnings(): java.sql.SQLWarning?
            public abstract override /*1*/ /*fake_override*/ fun isClosed(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun isPoolable(): kotlin.Boolean
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?): kotlin.Unit
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun registerOutParameter(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setArray(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Array?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBigDecimal(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract fun setBigDecimal(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Blob?): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Blob?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBoolean(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public abstract fun setBoolean(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setByte(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Byte): kotlin.Unit
            public abstract fun setByte(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Byte): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setBytes(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ByteArray?): kotlin.Unit
            public abstract fun setBytes(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.ByteArray?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Clob?): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Clob?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setCursorName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Date?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Date?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setDate(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Date?): kotlin.Unit
            public abstract fun setDate(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Date?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setDouble(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): kotlin.Unit
            public abstract fun setDouble(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Double): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setEscapeProcessing(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setFetchDirection(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setFetchSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setFloat(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): kotlin.Unit
            public abstract fun setFloat(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Float): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setInt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun setInt(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setLong(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Unit
            public abstract fun setLong(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setMaxFieldSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setMaxRows(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setNCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setNCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun setNString(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNull(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setNull(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?): kotlin.Unit
            public abstract fun setNull(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun setNull(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setPoolable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setQueryTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setRef(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Ref?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setRowId(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract fun setRowId(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setSQLXML(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract fun setSQLXML(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setShort(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short): kotlin.Unit
            public abstract fun setShort(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Short): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun setString(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Time?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Time?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setTime(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Time?): kotlin.Unit
            public abstract fun setTime(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Time?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Timestamp?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Timestamp?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setTimestamp(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Timestamp?): kotlin.Unit
            public abstract fun setTimestamp(/*0*/ p0: kotlin.String?, /*1*/ p1: java.sql.Timestamp?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setURL(/*0*/ p0: kotlin.Int, /*1*/ p1: java.net.URL?): kotlin.Unit
            public abstract fun setURL(/*0*/ p0: kotlin.String?, /*1*/ p1: java.net.URL?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setUnicodeStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun wasNull(): kotlin.Boolean
        }
        
        public trait Clob : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun free(): kotlin.Unit
            public abstract fun getAsciiStream(): java.io.InputStream?
            public abstract fun getCharacterStream(): java.io.Reader
            public abstract fun getCharacterStream(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): java.io.Reader?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getSubString(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.String
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun length(): kotlin.Long
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun position(/*0*/ p0: java.sql.Clob, /*1*/ p1: kotlin.Long): kotlin.Long
            public abstract fun position(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Long): kotlin.Long
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.Long): java.io.OutputStream?
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.Long): java.io.Writer?
            public abstract fun setString(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.String): kotlin.Int
            public abstract fun setString(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.String, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public abstract fun truncate(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Connection {
            public abstract fun clearWarnings(): kotlin.Unit
            public abstract fun close(): kotlin.Unit
            public abstract fun commit(): kotlin.Unit
            public abstract fun createArrayOf(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.Any>?): java.sql.Array?
            public abstract fun createBlob(): java.sql.Blob?
            public abstract fun createClob(): java.sql.Clob?
            public abstract fun createNClob(): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun createSQLXML(): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun createStatement(): java.sql.Statement?
            public abstract fun createStatement(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): java.sql.Statement?
            public abstract fun createStatement(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.sql.Statement?
            public abstract fun createStruct(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.Any>?): java.sql.Struct?
            public abstract fun getAutoCommit(): kotlin.Boolean
            public abstract fun getCatalog(): kotlin.String?
            public abstract fun getClientInfo(): java.util.Properties?
            public abstract fun getClientInfo(/*0*/ p0: kotlin.String?): kotlin.String?
            public abstract fun getHoldability(): kotlin.Int
            public abstract fun getMetaData(): java.sql.DatabaseMetaData?
            public abstract fun getTransactionIsolation(): kotlin.Int
            public abstract fun getTypeMap(): kotlin.MutableMap<kotlin.String, java.lang.Class<out kotlin.Any?>>?
            public abstract fun getWarnings(): java.sql.SQLWarning?
            public abstract fun isClosed(): kotlin.Boolean
            public abstract fun isReadOnly(): kotlin.Boolean
            public abstract fun isValid(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun nativeSQL(/*0*/ p0: kotlin.String?): kotlin.String?
            public abstract fun prepareCall(/*0*/ p0: kotlin.String?): java.sql.CallableStatement?
            public abstract fun prepareCall(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.sql.CallableStatement?
            public abstract fun prepareCall(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.sql.CallableStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?): java.sql.PreparedStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): java.sql.PreparedStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): java.sql.PreparedStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): java.sql.PreparedStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): java.sql.PreparedStatement?
            public abstract fun prepareStatement(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): java.sql.PreparedStatement?
            public abstract fun releaseSavepoint(/*0*/ p0: java.sql.Savepoint?): kotlin.Unit
            public abstract fun rollback(): kotlin.Unit
            public abstract fun rollback(/*0*/ p0: java.sql.Savepoint?): kotlin.Unit
            public abstract fun setAutoCommit(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract fun setCatalog(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun setClientInfo(/*0*/ p0: java.util.Properties?): kotlin.Unit
            public abstract fun setClientInfo(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun setHoldability(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setReadOnly(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract fun setSavepoint(): java.sql.Savepoint?
            public abstract fun setSavepoint(/*0*/ p0: kotlin.String?): java.sql.Savepoint?
            public abstract fun setTransactionIsolation(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setTypeMap(/*0*/ p0: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Unit
        }
        
        public open class DataTruncation : java.sql.SQLWarning {
            public constructor DataTruncation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int)
            public constructor DataTruncation(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public open fun getDataSize(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getErrorCode(): kotlin.Int
            public open fun getIndex(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getNextException(): java.sql.SQLException?
            public open override /*1*/ /*fake_override*/ fun getNextWarning(): java.sql.SQLWarning?
            public open fun getParameter(): kotlin.Boolean
            public open fun getRead(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun getSQLState(): kotlin.String?
            public open fun getTransferSize(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.Throwable>
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setNextException(/*0*/ p0: java.sql.SQLException?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setNextWarning(/*0*/ p0: java.sql.SQLWarning?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait DatabaseMetaData {
            public abstract fun allProceduresAreCallable(): kotlin.Boolean
            public abstract fun allTablesAreSelectable(): kotlin.Boolean
            public abstract fun autoCommitFailureClosesAllResultSets(): kotlin.Boolean
            public abstract fun dataDefinitionCausesTransactionCommit(): kotlin.Boolean
            public abstract fun dataDefinitionIgnoredInTransactions(): kotlin.Boolean
            public abstract fun deletesAreDetected(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun doesMaxRowSizeIncludeBlobs(): kotlin.Boolean
            public abstract fun getAttributes(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?): java.sql.ResultSet?
            public abstract fun getBestRowIdentifier(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Boolean): java.sql.ResultSet?
            public abstract fun getCatalogSeparator(): kotlin.String?
            public abstract fun getCatalogTerm(): kotlin.String?
            public abstract fun getCatalogs(): java.sql.ResultSet?
            public abstract fun getClientInfoProperties(): java.sql.ResultSet?
            public abstract fun getColumnPrivileges(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?): java.sql.ResultSet?
            public abstract fun getColumns(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?): java.sql.ResultSet?
            public abstract fun getConnection(): java.sql.Connection?
            public abstract fun getCrossReference(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?, /*4*/ p4: kotlin.String?, /*5*/ p5: kotlin.String?): java.sql.ResultSet?
            public abstract fun getDatabaseMajorVersion(): kotlin.Int
            public abstract fun getDatabaseMinorVersion(): kotlin.Int
            public abstract fun getDatabaseProductName(): kotlin.String?
            public abstract fun getDatabaseProductVersion(): kotlin.String?
            public abstract fun getDefaultTransactionIsolation(): kotlin.Int
            public abstract fun getDriverMajorVersion(): kotlin.Int
            public abstract fun getDriverMinorVersion(): kotlin.Int
            public abstract fun getDriverName(): kotlin.String?
            public abstract fun getDriverVersion(): kotlin.String?
            public abstract fun getExportedKeys(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getExtraNameCharacters(): kotlin.String?
            public abstract fun getFunctionColumns(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?): java.sql.ResultSet?
            public abstract fun getFunctions(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getIdentifierQuoteString(): kotlin.String?
            public abstract fun getImportedKeys(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getIndexInfo(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Boolean, /*4*/ p4: kotlin.Boolean): java.sql.ResultSet?
            public abstract fun getJDBCMajorVersion(): kotlin.Int
            public abstract fun getJDBCMinorVersion(): kotlin.Int
            public abstract fun getMaxBinaryLiteralLength(): kotlin.Int
            public abstract fun getMaxCatalogNameLength(): kotlin.Int
            public abstract fun getMaxCharLiteralLength(): kotlin.Int
            public abstract fun getMaxColumnNameLength(): kotlin.Int
            public abstract fun getMaxColumnsInGroupBy(): kotlin.Int
            public abstract fun getMaxColumnsInIndex(): kotlin.Int
            public abstract fun getMaxColumnsInOrderBy(): kotlin.Int
            public abstract fun getMaxColumnsInSelect(): kotlin.Int
            public abstract fun getMaxColumnsInTable(): kotlin.Int
            public abstract fun getMaxConnections(): kotlin.Int
            public abstract fun getMaxCursorNameLength(): kotlin.Int
            public abstract fun getMaxIndexLength(): kotlin.Int
            public abstract fun getMaxProcedureNameLength(): kotlin.Int
            public abstract fun getMaxRowSize(): kotlin.Int
            public abstract fun getMaxSchemaNameLength(): kotlin.Int
            public abstract fun getMaxStatementLength(): kotlin.Int
            public abstract fun getMaxStatements(): kotlin.Int
            public abstract fun getMaxTableNameLength(): kotlin.Int
            public abstract fun getMaxTablesInSelect(): kotlin.Int
            public abstract fun getMaxUserNameLength(): kotlin.Int
            public abstract fun getNumericFunctions(): kotlin.String?
            public abstract fun getPrimaryKeys(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getProcedureColumns(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.String?): java.sql.ResultSet?
            public abstract fun getProcedureTerm(): kotlin.String?
            public abstract fun getProcedures(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getResultSetHoldability(): kotlin.Int
            public abstract fun getRowIdLifetime(): [ERROR : Unresolved java classifier: RowIdLifetime]?
            public abstract fun getSQLKeywords(): kotlin.String?
            public abstract fun getSQLStateType(): kotlin.Int
            public abstract fun getSchemaTerm(): kotlin.String?
            public abstract fun getSchemas(): java.sql.ResultSet?
            public abstract fun getSchemas(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): java.sql.ResultSet?
            public abstract fun getSearchStringEscape(): kotlin.String?
            public abstract fun getStringFunctions(): kotlin.String?
            public abstract fun getSuperTables(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getSuperTypes(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getSystemFunctions(): kotlin.String?
            public abstract fun getTablePrivileges(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun getTableTypes(): java.sql.ResultSet?
            public abstract fun getTables(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.Array<out kotlin.String>?): java.sql.ResultSet?
            public abstract fun getTimeDateFunctions(): kotlin.String?
            public abstract fun getTypeInfo(): java.sql.ResultSet?
            public abstract fun getUDTs(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?, /*3*/ p3: kotlin.IntArray?): java.sql.ResultSet?
            public abstract fun getURL(): kotlin.String?
            public abstract fun getUserName(): kotlin.String?
            public abstract fun getVersionColumns(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.sql.ResultSet?
            public abstract fun insertsAreDetected(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isCatalogAtStart(): kotlin.Boolean
            public abstract fun isReadOnly(): kotlin.Boolean
            public abstract fun locatorsUpdateCopy(): kotlin.Boolean
            public abstract fun nullPlusNonNullIsNull(): kotlin.Boolean
            public abstract fun nullsAreSortedAtEnd(): kotlin.Boolean
            public abstract fun nullsAreSortedAtStart(): kotlin.Boolean
            public abstract fun nullsAreSortedHigh(): kotlin.Boolean
            public abstract fun nullsAreSortedLow(): kotlin.Boolean
            public abstract fun othersDeletesAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun othersInsertsAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun othersUpdatesAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun ownDeletesAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun ownInsertsAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun ownUpdatesAreVisible(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun storesLowerCaseIdentifiers(): kotlin.Boolean
            public abstract fun storesLowerCaseQuotedIdentifiers(): kotlin.Boolean
            public abstract fun storesMixedCaseIdentifiers(): kotlin.Boolean
            public abstract fun storesMixedCaseQuotedIdentifiers(): kotlin.Boolean
            public abstract fun storesUpperCaseIdentifiers(): kotlin.Boolean
            public abstract fun storesUpperCaseQuotedIdentifiers(): kotlin.Boolean
            public abstract fun supportsANSI92EntryLevelSQL(): kotlin.Boolean
            public abstract fun supportsANSI92FullSQL(): kotlin.Boolean
            public abstract fun supportsANSI92IntermediateSQL(): kotlin.Boolean
            public abstract fun supportsAlterTableWithAddColumn(): kotlin.Boolean
            public abstract fun supportsAlterTableWithDropColumn(): kotlin.Boolean
            public abstract fun supportsBatchUpdates(): kotlin.Boolean
            public abstract fun supportsCatalogsInDataManipulation(): kotlin.Boolean
            public abstract fun supportsCatalogsInIndexDefinitions(): kotlin.Boolean
            public abstract fun supportsCatalogsInPrivilegeDefinitions(): kotlin.Boolean
            public abstract fun supportsCatalogsInProcedureCalls(): kotlin.Boolean
            public abstract fun supportsCatalogsInTableDefinitions(): kotlin.Boolean
            public abstract fun supportsColumnAliasing(): kotlin.Boolean
            public abstract fun supportsConvert(): kotlin.Boolean
            public abstract fun supportsConvert(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public abstract fun supportsCoreSQLGrammar(): kotlin.Boolean
            public abstract fun supportsCorrelatedSubqueries(): kotlin.Boolean
            public abstract fun supportsDataDefinitionAndDataManipulationTransactions(): kotlin.Boolean
            public abstract fun supportsDataManipulationTransactionsOnly(): kotlin.Boolean
            public abstract fun supportsDifferentTableCorrelationNames(): kotlin.Boolean
            public abstract fun supportsExpressionsInOrderBy(): kotlin.Boolean
            public abstract fun supportsExtendedSQLGrammar(): kotlin.Boolean
            public abstract fun supportsFullOuterJoins(): kotlin.Boolean
            public abstract fun supportsGetGeneratedKeys(): kotlin.Boolean
            public abstract fun supportsGroupBy(): kotlin.Boolean
            public abstract fun supportsGroupByBeyondSelect(): kotlin.Boolean
            public abstract fun supportsGroupByUnrelated(): kotlin.Boolean
            public abstract fun supportsIntegrityEnhancementFacility(): kotlin.Boolean
            public abstract fun supportsLikeEscapeClause(): kotlin.Boolean
            public abstract fun supportsLimitedOuterJoins(): kotlin.Boolean
            public abstract fun supportsMinimumSQLGrammar(): kotlin.Boolean
            public abstract fun supportsMixedCaseIdentifiers(): kotlin.Boolean
            public abstract fun supportsMixedCaseQuotedIdentifiers(): kotlin.Boolean
            public abstract fun supportsMultipleOpenResults(): kotlin.Boolean
            public abstract fun supportsMultipleResultSets(): kotlin.Boolean
            public abstract fun supportsMultipleTransactions(): kotlin.Boolean
            public abstract fun supportsNamedParameters(): kotlin.Boolean
            public abstract fun supportsNonNullableColumns(): kotlin.Boolean
            public abstract fun supportsOpenCursorsAcrossCommit(): kotlin.Boolean
            public abstract fun supportsOpenCursorsAcrossRollback(): kotlin.Boolean
            public abstract fun supportsOpenStatementsAcrossCommit(): kotlin.Boolean
            public abstract fun supportsOpenStatementsAcrossRollback(): kotlin.Boolean
            public abstract fun supportsOrderByUnrelated(): kotlin.Boolean
            public abstract fun supportsOuterJoins(): kotlin.Boolean
            public abstract fun supportsPositionedDelete(): kotlin.Boolean
            public abstract fun supportsPositionedUpdate(): kotlin.Boolean
            public abstract fun supportsResultSetConcurrency(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public abstract fun supportsResultSetHoldability(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun supportsResultSetType(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun supportsSavepoints(): kotlin.Boolean
            public abstract fun supportsSchemasInDataManipulation(): kotlin.Boolean
            public abstract fun supportsSchemasInIndexDefinitions(): kotlin.Boolean
            public abstract fun supportsSchemasInPrivilegeDefinitions(): kotlin.Boolean
            public abstract fun supportsSchemasInProcedureCalls(): kotlin.Boolean
            public abstract fun supportsSchemasInTableDefinitions(): kotlin.Boolean
            public abstract fun supportsSelectForUpdate(): kotlin.Boolean
            public abstract fun supportsStatementPooling(): kotlin.Boolean
            public abstract fun supportsStoredFunctionsUsingCallSyntax(): kotlin.Boolean
            public abstract fun supportsStoredProcedures(): kotlin.Boolean
            public abstract fun supportsSubqueriesInComparisons(): kotlin.Boolean
            public abstract fun supportsSubqueriesInExists(): kotlin.Boolean
            public abstract fun supportsSubqueriesInIns(): kotlin.Boolean
            public abstract fun supportsSubqueriesInQuantifieds(): kotlin.Boolean
            public abstract fun supportsTableCorrelationNames(): kotlin.Boolean
            public abstract fun supportsTransactionIsolationLevel(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun supportsTransactions(): kotlin.Boolean
            public abstract fun supportsUnion(): kotlin.Boolean
            public abstract fun supportsUnionAll(): kotlin.Boolean
            public abstract fun updatesAreDetected(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun usesLocalFilePerTable(): kotlin.Boolean
            public abstract fun usesLocalFiles(): kotlin.Boolean
        }
        
        public open class Date : java.util.Date {
            public constructor Date(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor Date(/*0*/ p0: kotlin.Long)
            public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Date): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getDate(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getDay(): kotlin.Int
            public open override /*1*/ fun getHours(): kotlin.Int
            public open override /*1*/ fun getMinutes(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getMonth(): kotlin.Int
            public open override /*1*/ fun getSeconds(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getTime(): kotlin.Long
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getTimezoneOffset(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getYear(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setDate(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setHours(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setMinutes(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setMonth(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setSeconds(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setTime(/*0*/ p0: kotlin.Long): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setYear(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toGMTString(): kotlin.String
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toLocaleString(): kotlin.String
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Driver : java.lang.Object {
            public abstract fun acceptsURL(/*0*/ p0: kotlin.String?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun connect(/*0*/ p0: kotlin.String?, /*1*/ p1: java.util.Properties?): java.sql.Connection?
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getMajorVersion(): kotlin.Int
            public abstract fun getMinorVersion(): kotlin.Int
            public abstract fun getPropertyInfo(/*0*/ p0: kotlin.String?, /*1*/ p1: java.util.Properties?): kotlin.Array<java.sql.DriverPropertyInfo>?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun jdbcCompliant(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public/*package*/ open class DriverInfo : java.lang.Object {
            public/*package*/ constructor DriverInfo()
            public/*package*/ final var driver: java.sql.Driver?
            public/*package*/ final var driverClass: java.lang.Class<out kotlin.Any?>?
            public/*package*/ final var driverClassName: kotlin.String?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class DriverManager : java.lang.Object {
            private constructor DriverManager()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class DriverPropertyInfo : java.lang.Object {
            public constructor DriverPropertyInfo(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?)
            public final var choices: kotlin.Array<kotlin.String>?
            public final var description: kotlin.String?
            public final var name: kotlin.String?
            public final var required: kotlin.Boolean
            public final var value: kotlin.String?
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait ParameterMetaData {
            public abstract fun getParameterClassName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getParameterCount(): kotlin.Int
            public abstract fun getParameterMode(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getParameterType(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getParameterTypeName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getPrecision(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getScale(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun isNullable(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun isSigned(/*0*/ p0: kotlin.Int): kotlin.Boolean
        }
        
        public trait PreparedStatement : java.sql.Statement {
            public abstract fun addBatch(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun addBatch(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun cancel(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun clearBatch(): kotlin.Unit
            public abstract fun clearParameters(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun clearWarnings(): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun close(): kotlin.Unit
            public abstract fun execute(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun executeBatch(): kotlin.IntArray?
            public abstract fun executeQuery(): java.sql.ResultSet
            public abstract override /*1*/ /*fake_override*/ fun executeQuery(/*0*/ p0: kotlin.String): java.sql.ResultSet
            public abstract fun executeUpdate(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getConnection(): java.sql.Connection?
            public abstract override /*1*/ /*fake_override*/ fun getFetchDirection(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getFetchSize(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getGeneratedKeys(): java.sql.ResultSet?
            public abstract override /*1*/ /*fake_override*/ fun getMaxFieldSize(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getMaxRows(): kotlin.Int
            public abstract fun getMetaData(): java.sql.ResultSetMetaData?
            public abstract override /*1*/ /*fake_override*/ fun getMoreResults(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun getMoreResults(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun getParameterMetaData(): java.sql.ParameterMetaData?
            public abstract override /*1*/ /*fake_override*/ fun getQueryTimeout(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getResultSet(): java.sql.ResultSet?
            public abstract override /*1*/ /*fake_override*/ fun getResultSetConcurrency(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getResultSetHoldability(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getResultSetType(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getUpdateCount(): kotlin.Int
            public abstract override /*1*/ /*fake_override*/ fun getWarnings(): java.sql.SQLWarning?
            public abstract override /*1*/ /*fake_override*/ fun isClosed(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun isPoolable(): kotlin.Boolean
            public abstract fun setArray(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Array?): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setBigDecimal(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Blob?): kotlin.Unit
            public abstract fun setBoolean(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public abstract fun setByte(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Byte): kotlin.Unit
            public abstract fun setBytes(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ByteArray?): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Clob?): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setCursorName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun setDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Date?): kotlin.Unit
            public abstract fun setDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Date?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setDouble(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setEscapeProcessing(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setFetchDirection(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setFetchSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setFloat(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): kotlin.Unit
            public abstract fun setInt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun setLong(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setMaxFieldSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setMaxRows(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun setNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun setNString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun setNull(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun setNull(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.String?): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setPoolable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun setQueryTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setRef(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Ref?): kotlin.Unit
            public abstract fun setRowId(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract fun setSQLXML(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract fun setShort(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short): kotlin.Unit
            public abstract fun setString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun setTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Time?): kotlin.Unit
            public abstract fun setTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Time?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Timestamp?): kotlin.Unit
            public abstract fun setTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Timestamp?, /*2*/ p2: java.util.Calendar?): kotlin.Unit
            public abstract fun setURL(/*0*/ p0: kotlin.Int, /*1*/ p1: java.net.URL?): kotlin.Unit
            public abstract fun setUnicodeStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Int): kotlin.Unit
        }
        
        public trait Ref : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun getBaseTypeName(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getObject(): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun setObject(/*0*/ p0: kotlin.Any?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait ResultSet {
            public abstract fun absolute(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun afterLast(): kotlin.Unit
            public abstract fun beforeFirst(): kotlin.Unit
            public abstract fun cancelRowUpdates(): kotlin.Unit
            public abstract fun clearWarnings(): kotlin.Unit
            public abstract fun close(): kotlin.Unit
            public abstract fun deleteRow(): kotlin.Unit
            public abstract fun findColumn(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract fun first(): kotlin.Boolean
            public abstract fun getArray(/*0*/ p0: kotlin.Int): java.sql.Array?
            public abstract fun getArray(/*0*/ p0: kotlin.String): java.sql.Array?
            public abstract fun getAsciiStream(/*0*/ p0: kotlin.Int): java.io.InputStream?
            public abstract fun getAsciiStream(/*0*/ p0: kotlin.String): java.io.InputStream?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.String): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBigDecimal(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun getBinaryStream(/*0*/ p0: kotlin.Int): java.io.InputStream?
            public abstract fun getBinaryStream(/*0*/ p0: kotlin.String): java.io.InputStream?
            public abstract fun getBlob(/*0*/ p0: kotlin.Int): java.sql.Blob?
            public abstract fun getBlob(/*0*/ p0: kotlin.String): java.sql.Blob?
            public abstract fun getBoolean(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun getBoolean(/*0*/ p0: kotlin.String): kotlin.Boolean
            public abstract fun getByte(/*0*/ p0: kotlin.Int): kotlin.Byte
            public abstract fun getByte(/*0*/ p0: kotlin.String): kotlin.Byte
            public abstract fun getBytes(/*0*/ p0: kotlin.Int): kotlin.ByteArray?
            public abstract fun getBytes(/*0*/ p0: kotlin.String): kotlin.ByteArray?
            public abstract fun getCharacterStream(/*0*/ p0: kotlin.Int): java.io.Reader?
            public abstract fun getCharacterStream(/*0*/ p0: kotlin.String): java.io.Reader?
            public abstract fun getClob(/*0*/ p0: kotlin.Int): java.sql.Clob?
            public abstract fun getClob(/*0*/ p0: kotlin.String): java.sql.Clob?
            public abstract fun getConcurrency(): kotlin.Int
            public abstract fun getCursorName(): kotlin.String?
            public abstract fun getDate(/*0*/ p0: kotlin.Int): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.String): java.sql.Date?
            public abstract fun getDate(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Date?
            public abstract fun getDouble(/*0*/ p0: kotlin.Int): kotlin.Double
            public abstract fun getDouble(/*0*/ p0: kotlin.String): kotlin.Double
            public abstract fun getFetchDirection(): kotlin.Int
            public abstract fun getFetchSize(): kotlin.Int
            public abstract fun getFloat(/*0*/ p0: kotlin.Int): kotlin.Float
            public abstract fun getFloat(/*0*/ p0: kotlin.String): kotlin.Float
            public abstract fun getHoldability(): kotlin.Int
            public abstract fun getInt(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getInt(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract fun getLong(/*0*/ p0: kotlin.Int): kotlin.Long
            public abstract fun getLong(/*0*/ p0: kotlin.String): kotlin.Long
            public abstract fun getMetaData(): java.sql.ResultSetMetaData
            public abstract fun getNCharacterStream(/*0*/ p0: kotlin.Int): java.io.Reader?
            public abstract fun getNCharacterStream(/*0*/ p0: kotlin.String?): java.io.Reader?
            public abstract fun getNClob(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun getNClob(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun getNString(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getNString(/*0*/ p0: kotlin.String?): kotlin.String?
            public abstract fun getObject(/*0*/ p0: kotlin.Int): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.String): kotlin.Any?
            public abstract fun getObject(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Any?
            public abstract fun getRef(/*0*/ p0: kotlin.Int): java.sql.Ref?
            public abstract fun getRef(/*0*/ p0: kotlin.String): java.sql.Ref?
            public abstract fun getRow(): kotlin.Int
            public abstract fun getRowId(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: RowId]?
            public abstract fun getRowId(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: RowId]?
            public abstract fun getSQLXML(/*0*/ p0: kotlin.Int): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun getSQLXML(/*0*/ p0: kotlin.String?): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun getShort(/*0*/ p0: kotlin.Int): kotlin.Short
            public abstract fun getShort(/*0*/ p0: kotlin.String): kotlin.Short
            public abstract fun getStatement(): java.sql.Statement?
            public abstract fun getString(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getString(/*0*/ p0: kotlin.String): kotlin.String?
            public abstract fun getTime(/*0*/ p0: kotlin.Int): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.String): java.sql.Time?
            public abstract fun getTime(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Time?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.Int): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.util.Calendar?): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.String): java.sql.Timestamp?
            public abstract fun getTimestamp(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Calendar?): java.sql.Timestamp?
            public abstract fun getType(): kotlin.Int
            public abstract fun getURL(/*0*/ p0: kotlin.Int): java.net.URL?
            public abstract fun getURL(/*0*/ p0: kotlin.String): java.net.URL?
            public abstract fun getUnicodeStream(/*0*/ p0: kotlin.Int): java.io.InputStream?
            public abstract fun getUnicodeStream(/*0*/ p0: kotlin.String): java.io.InputStream?
            public abstract fun getWarnings(): java.sql.SQLWarning?
            public abstract fun insertRow(): kotlin.Unit
            public abstract fun isAfterLast(): kotlin.Boolean
            public abstract fun isBeforeFirst(): kotlin.Boolean
            public abstract fun isClosed(): kotlin.Boolean
            public abstract fun isFirst(): kotlin.Boolean
            public abstract fun isLast(): kotlin.Boolean
            public abstract fun last(): kotlin.Boolean
            public abstract fun moveToCurrentRow(): kotlin.Unit
            public abstract fun moveToInsertRow(): kotlin.Unit
            public abstract fun next(): kotlin.Boolean
            public abstract fun previous(): kotlin.Boolean
            public abstract fun refreshRow(): kotlin.Unit
            public abstract fun relative(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun rowDeleted(): kotlin.Boolean
            public abstract fun rowInserted(): kotlin.Boolean
            public abstract fun rowUpdated(): kotlin.Boolean
            public abstract fun setFetchDirection(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setFetchSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun updateArray(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Array): kotlin.Unit
            public abstract fun updateArray(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Array): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.String, /*1*/ p1: java.io.InputStream, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateAsciiStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateBigDecimal(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract fun updateBigDecimal(/*0*/ p0: kotlin.String, /*1*/ p1: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.String, /*1*/ p1: java.io.InputStream, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateBinaryStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Blob): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Blob): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?): kotlin.Unit
            public abstract fun updateBlob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.InputStream?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateBoolean(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public abstract fun updateBoolean(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public abstract fun updateByte(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Byte): kotlin.Unit
            public abstract fun updateByte(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Byte): kotlin.Unit
            public abstract fun updateBytes(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.ByteArray): kotlin.Unit
            public abstract fun updateBytes(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.ByteArray): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.String, /*1*/ p1: java.io.Reader, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Clob): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Clob): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateDate(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Date?): kotlin.Unit
            public abstract fun updateDate(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Date?): kotlin.Unit
            public abstract fun updateDouble(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Double): kotlin.Unit
            public abstract fun updateDouble(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Double): kotlin.Unit
            public abstract fun updateFloat(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float): kotlin.Unit
            public abstract fun updateFloat(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Float): kotlin.Unit
            public abstract fun updateInt(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun updateInt(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun updateLong(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Unit
            public abstract fun updateLong(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Long): kotlin.Unit
            public abstract fun updateNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateNCharacterStream(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateNCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateNCharacterStream(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?): kotlin.Unit
            public abstract fun updateNClob(/*0*/ p0: kotlin.String?, /*1*/ p1: java.io.Reader?, /*2*/ p2: kotlin.Long): kotlin.Unit
            public abstract fun updateNString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun updateNString(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun updateNull(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun updateNull(/*0*/ p0: kotlin.String): kotlin.Unit
            public abstract fun updateObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public abstract fun updateObject(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateObject(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?): kotlin.Unit
            public abstract fun updateObject(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Any?, /*2*/ p2: kotlin.Int): kotlin.Unit
            public abstract fun updateRef(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Ref): kotlin.Unit
            public abstract fun updateRef(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Ref): kotlin.Unit
            public abstract fun updateRow(): kotlin.Unit
            public abstract fun updateRowId(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract fun updateRowId(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract fun updateSQLXML(/*0*/ p0: kotlin.Int, /*1*/ p1: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract fun updateSQLXML(/*0*/ p0: kotlin.String?, /*1*/ p1: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract fun updateShort(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Short): kotlin.Unit
            public abstract fun updateShort(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.Short): kotlin.Unit
            public abstract fun updateString(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun updateString(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.Unit
            public abstract fun updateTime(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Time?): kotlin.Unit
            public abstract fun updateTime(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Time?): kotlin.Unit
            public abstract fun updateTimestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: java.sql.Timestamp?): kotlin.Unit
            public abstract fun updateTimestamp(/*0*/ p0: kotlin.String, /*1*/ p1: java.sql.Timestamp?): kotlin.Unit
            public abstract fun wasNull(): kotlin.Boolean
        }
        
        public trait ResultSetMetaData {
            public abstract fun getCatalogName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getColumnClassName(/*0*/ p0: kotlin.Int): kotlin.String
            public abstract fun getColumnCount(): kotlin.Int
            public abstract fun getColumnDisplaySize(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getColumnLabel(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getColumnName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getColumnType(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getColumnTypeName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getPrecision(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getScale(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getSchemaName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun getTableName(/*0*/ p0: kotlin.Int): kotlin.String?
            public abstract fun isAutoIncrement(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isCaseSensitive(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isCurrency(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isDefinitelyWritable(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isNullable(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun isReadOnly(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isSearchable(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isSigned(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun isWritable(/*0*/ p0: kotlin.Int): kotlin.Boolean
        }
        
        public trait SQLData : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getSQLTypeName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun readSQL(/*0*/ p0: java.sql.SQLInput?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun writeSQL(/*0*/ p0: java.sql.SQLOutput?): kotlin.Unit
        }
        
        public open class SQLException : java.lang.Exception, kotlin.MutableIterable<kotlin.Throwable> {
            public constructor SQLException()
            public constructor SQLException(/*0*/ p0: kotlin.String?)
            public constructor SQLException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?)
            public constructor SQLException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int)
            public constructor SQLException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Throwable?)
            public constructor SQLException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Throwable?)
            public constructor SQLException(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor SQLException(/*0*/ p0: kotlin.Throwable?)
            public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public open fun getErrorCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open fun getNextException(): java.sql.SQLException?
            public open fun getSQLState(): kotlin.String?
            public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Throwable>
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open fun setNextException(/*0*/ p0: java.sql.SQLException?): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait SQLInput : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun readArray(): java.sql.Array?
            public abstract fun readAsciiStream(): java.io.InputStream?
            public abstract fun readBigDecimal(): [ERROR : Unresolved java classifier: BigDecimal]?
            public abstract fun readBinaryStream(): java.io.InputStream?
            public abstract fun readBlob(): java.sql.Blob?
            public abstract fun readBoolean(): kotlin.Boolean
            public abstract fun readByte(): kotlin.Byte
            public abstract fun readBytes(): kotlin.ByteArray?
            public abstract fun readCharacterStream(): java.io.Reader?
            public abstract fun readClob(): java.sql.Clob?
            public abstract fun readDate(): java.sql.Date?
            public abstract fun readDouble(): kotlin.Double
            public abstract fun readFloat(): kotlin.Float
            public abstract fun readInt(): kotlin.Int
            public abstract fun readLong(): kotlin.Long
            public abstract fun readNClob(): [ERROR : Unresolved java classifier: NClob]?
            public abstract fun readNString(): kotlin.String?
            public abstract fun readObject(): kotlin.Any?
            public abstract fun readRef(): java.sql.Ref?
            public abstract fun readRowId(): [ERROR : Unresolved java classifier: RowId]?
            public abstract fun readSQLXML(): [ERROR : Unresolved java classifier: SQLXML]?
            public abstract fun readShort(): kotlin.Short
            public abstract fun readString(): kotlin.String?
            public abstract fun readTime(): java.sql.Time?
            public abstract fun readTimestamp(): java.sql.Timestamp?
            public abstract fun readURL(): java.net.URL?
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun wasNull(): kotlin.Boolean
        }
        
        public trait SQLOutput : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            public abstract fun writeArray(/*0*/ p0: java.sql.Array?): kotlin.Unit
            public abstract fun writeAsciiStream(/*0*/ p0: java.io.InputStream): kotlin.Unit
            public abstract fun writeBigDecimal(/*0*/ p0: [ERROR : Unresolved java classifier: BigDecimal]?): kotlin.Unit
            public abstract fun writeBinaryStream(/*0*/ p0: java.io.InputStream): kotlin.Unit
            public abstract fun writeBlob(/*0*/ p0: java.sql.Blob?): kotlin.Unit
            public abstract fun writeBoolean(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract fun writeByte(/*0*/ p0: kotlin.Byte): kotlin.Unit
            public abstract fun writeBytes(/*0*/ p0: kotlin.ByteArray?): kotlin.Unit
            public abstract fun writeCharacterStream(/*0*/ p0: java.io.Reader): kotlin.Unit
            public abstract fun writeClob(/*0*/ p0: java.sql.Clob?): kotlin.Unit
            public abstract fun writeDate(/*0*/ p0: java.sql.Date?): kotlin.Unit
            public abstract fun writeDouble(/*0*/ p0: kotlin.Double): kotlin.Unit
            public abstract fun writeFloat(/*0*/ p0: kotlin.Float): kotlin.Unit
            public abstract fun writeInt(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun writeLong(/*0*/ p0: kotlin.Long): kotlin.Unit
            public abstract fun writeNClob(/*0*/ p0: [ERROR : Unresolved java classifier: NClob]?): kotlin.Unit
            public abstract fun writeNString(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun writeObject(/*0*/ p0: java.sql.SQLData?): kotlin.Unit
            public abstract fun writeRef(/*0*/ p0: java.sql.Ref?): kotlin.Unit
            public abstract fun writeRowId(/*0*/ p0: [ERROR : Unresolved java classifier: RowId]?): kotlin.Unit
            public abstract fun writeSQLXML(/*0*/ p0: [ERROR : Unresolved java classifier: SQLXML]?): kotlin.Unit
            public abstract fun writeShort(/*0*/ p0: kotlin.Short): kotlin.Unit
            public abstract fun writeString(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun writeStruct(/*0*/ p0: java.sql.Struct): kotlin.Unit
            public abstract fun writeTime(/*0*/ p0: java.sql.Time?): kotlin.Unit
            public abstract fun writeTimestamp(/*0*/ p0: java.sql.Timestamp?): kotlin.Unit
            public abstract fun writeURL(/*0*/ p0: java.net.URL?): kotlin.Unit
        }
        
        public final class SQLPermission {
            public constructor SQLPermission(/*0*/ p0: kotlin.String)
            public constructor SQLPermission(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?)
        }
        
        public open class SQLWarning : java.sql.SQLException {
            public constructor SQLWarning()
            public constructor SQLWarning(/*0*/ p0: kotlin.String?)
            public constructor SQLWarning(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?)
            public constructor SQLWarning(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int)
            public constructor SQLWarning(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Throwable?)
            public constructor SQLWarning(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Throwable?)
            public constructor SQLWarning(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Throwable?)
            public constructor SQLWarning(/*0*/ p0: kotlin.Throwable?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public open override /*1*/ /*fake_override*/ fun getErrorCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getNextException(): java.sql.SQLException?
            public open fun getNextWarning(): java.sql.SQLWarning?
            public open override /*1*/ /*fake_override*/ fun getSQLState(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.Throwable>
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setNextException(/*0*/ p0: java.sql.SQLException?): kotlin.Unit
            public open fun setNextWarning(/*0*/ p0: java.sql.SQLWarning?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait Savepoint : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getSavepointId(): kotlin.Int
            public abstract fun getSavepointName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Statement {
            public abstract fun addBatch(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun cancel(): kotlin.Unit
            public abstract fun clearBatch(): kotlin.Unit
            public abstract fun clearWarnings(): kotlin.Unit
            public abstract fun close(): kotlin.Unit
            public abstract fun execute(/*0*/ p0: kotlin.String): kotlin.Boolean
            public abstract fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Boolean
            public abstract fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Boolean
            public abstract fun execute(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Boolean
            public abstract fun executeBatch(): kotlin.IntArray?
            public abstract fun executeQuery(/*0*/ p0: kotlin.String): java.sql.ResultSet
            public abstract fun executeUpdate(/*0*/ p0: kotlin.String): kotlin.Int
            public abstract fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Array<out kotlin.String>?): kotlin.Int
            public abstract fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.Int): kotlin.Int
            public abstract fun executeUpdate(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.IntArray?): kotlin.Int
            public abstract fun getConnection(): java.sql.Connection?
            public abstract fun getFetchDirection(): kotlin.Int
            public abstract fun getFetchSize(): kotlin.Int
            public abstract fun getGeneratedKeys(): java.sql.ResultSet?
            public abstract fun getMaxFieldSize(): kotlin.Int
            public abstract fun getMaxRows(): kotlin.Int
            public abstract fun getMoreResults(): kotlin.Boolean
            public abstract fun getMoreResults(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public abstract fun getQueryTimeout(): kotlin.Int
            public abstract fun getResultSet(): java.sql.ResultSet?
            public abstract fun getResultSetConcurrency(): kotlin.Int
            public abstract fun getResultSetHoldability(): kotlin.Int
            public abstract fun getResultSetType(): kotlin.Int
            public abstract fun getUpdateCount(): kotlin.Int
            public abstract fun getWarnings(): java.sql.SQLWarning?
            public abstract fun isClosed(): kotlin.Boolean
            public abstract fun isPoolable(): kotlin.Boolean
            public abstract fun setCursorName(/*0*/ p0: kotlin.String?): kotlin.Unit
            public abstract fun setEscapeProcessing(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract fun setFetchDirection(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setFetchSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setMaxFieldSize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setMaxRows(/*0*/ p0: kotlin.Int): kotlin.Unit
            public abstract fun setPoolable(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public abstract fun setQueryTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        public trait Struct : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun getAttributes(): kotlin.Array<kotlin.Any>?
            public abstract fun getAttributes(/*0*/ p0: kotlin.Map<kotlin.String, java.lang.Class<out kotlin.Any?>>?): kotlin.Array<kotlin.Any>?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun getSQLTypeName(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Time : java.util.Date {
            public constructor Time(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor Time(/*0*/ p0: kotlin.Long)
            public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any?
            public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Date): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun getDate(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun getDay(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getHours(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getMinutes(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun getMonth(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getSeconds(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getTime(): kotlin.Long
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getTimezoneOffset(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun getYear(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun setDate(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setHours(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setMinutes(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun setMonth(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setSeconds(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setTime(/*0*/ p0: kotlin.Long): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ fun setYear(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toGMTString(): kotlin.String
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toLocaleString(): kotlin.String
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Timestamp : java.util.Date {
            public constructor Timestamp(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int)
            public constructor Timestamp(/*0*/ p0: kotlin.Long)
            public open fun after(/*0*/ p0: java.sql.Timestamp): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open fun before(/*0*/ p0: java.sql.Timestamp): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any?
            public open fun compareTo(/*0*/ p0: java.sql.Timestamp): kotlin.Int
            public open override /*1*/ fun compareTo(/*0*/ other: java.util.Date): kotlin.Int
            public open fun equals(/*0*/ p0: java.sql.Timestamp?): kotlin.Boolean
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getDate(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getDay(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getHours(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getMinutes(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getMonth(): kotlin.Int
            public open fun getNanos(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getSeconds(): kotlin.Int
            public open override /*1*/ fun getTime(): kotlin.Long
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getTimezoneOffset(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun getYear(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setDate(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setHours(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setMinutes(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setMonth(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setNanos(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setSeconds(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun setTime(/*0*/ p0: kotlin.Long): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun setYear(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toGMTString(): kotlin.String
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open override /*1*/ /*fake_override*/ fun toLocaleString(): kotlin.String
            public open override /*1*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Types : java.lang.Object {
            private constructor Types()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        package java.sql.BatchUpdateException {
        }
        
        package java.sql.Connection {
            public val TRANSACTION_NONE: kotlin.Int = 0
            public val TRANSACTION_READ_COMMITTED: kotlin.Int = 2
            public val TRANSACTION_READ_UNCOMMITTED: kotlin.Int = 1
            public val TRANSACTION_REPEATABLE_READ: kotlin.Int = 4
            public val TRANSACTION_SERIALIZABLE: kotlin.Int = 8
        }
        
        package java.sql.DataTruncation {
        }
        
        package java.sql.DatabaseMetaData {
            public val attributeNoNulls: kotlin.Short = 0.toShort()
            public val attributeNullable: kotlin.Short = 1.toShort()
            public val attributeNullableUnknown: kotlin.Short = 2.toShort()
            public val bestRowNotPseudo: kotlin.Int = 1
            public val bestRowPseudo: kotlin.Int = 2
            public val bestRowSession: kotlin.Int = 2
            public val bestRowTemporary: kotlin.Int = 0
            public val bestRowTransaction: kotlin.Int = 1
            public val bestRowUnknown: kotlin.Int = 0
            public val columnNoNulls: kotlin.Int = 0
            public val columnNullable: kotlin.Int = 1
            public val columnNullableUnknown: kotlin.Int = 2
            public val functionColumnIn: kotlin.Int = 1
            public val functionColumnInOut: kotlin.Int = 2
            public val functionColumnOut: kotlin.Int = 3
            public val functionColumnResult: kotlin.Int = 5
            public val functionColumnUnknown: kotlin.Int = 0
            public val functionNoNulls: kotlin.Int = 0
            public val functionNoTable: kotlin.Int = 1
            public val functionNullable: kotlin.Int = 1
            public val functionNullableUnknown: kotlin.Int = 2
            public val functionResultUnknown: kotlin.Int = 0
            public val functionReturn: kotlin.Int = 4
            public val functionReturnsTable: kotlin.Int = 2
            public val importedKeyCascade: kotlin.Int = 0
            public val importedKeyInitiallyDeferred: kotlin.Int = 5
            public val importedKeyInitiallyImmediate: kotlin.Int = 6
            public val importedKeyNoAction: kotlin.Int = 3
            public val importedKeyNotDeferrable: kotlin.Int = 7
            public val importedKeyRestrict: kotlin.Int = 1
            public val importedKeySetDefault: kotlin.Int = 4
            public val importedKeySetNull: kotlin.Int = 2
            public val procedureColumnIn: kotlin.Int = 1
            public val procedureColumnInOut: kotlin.Int = 2
            public val procedureColumnOut: kotlin.Int = 4
            public val procedureColumnResult: kotlin.Int = 3
            public val procedureColumnReturn: kotlin.Int = 5
            public val procedureColumnUnknown: kotlin.Int = 0
            public val procedureNoNulls: kotlin.Int = 0
            public val procedureNoResult: kotlin.Int = 1
            public val procedureNullable: kotlin.Int = 1
            public val procedureNullableUnknown: kotlin.Int = 2
            public val procedureResultUnknown: kotlin.Int = 0
            public val procedureReturnsResult: kotlin.Int = 2
            public val sqlStateSQL: kotlin.Int = 2
            public val sqlStateSQL99: kotlin.Int = 2
            public val sqlStateXOpen: kotlin.Int = 1
            public val tableIndexClustered: kotlin.Short = 1.toShort()
            public val tableIndexHashed: kotlin.Short = 2.toShort()
            public val tableIndexOther: kotlin.Short = 3.toShort()
            public val tableIndexStatistic: kotlin.Short = 0.toShort()
            public val typeNoNulls: kotlin.Int = 0
            public val typeNullable: kotlin.Int = 1
            public val typeNullableUnknown: kotlin.Int = 2
            public val typePredBasic: kotlin.Int = 2
            public val typePredChar: kotlin.Int = 1
            public val typePredNone: kotlin.Int = 0
            public val typeSearchable: kotlin.Int = 3
            public val versionColumnNotPseudo: kotlin.Int = 1
            public val versionColumnPseudo: kotlin.Int = 2
            public val versionColumnUnknown: kotlin.Int = 0
        }
        
        package java.sql.Date {
            public/*package*/ val serialVersionUID: kotlin.Long = 1511598038487230103.toLong()
            public open fun valueOf(/*0*/ p0: kotlin.String): java.sql.Date
        }
        
        package java.sql.DriverManager {
            public/*package*/ val SET_LOG_PERMISSION: java.sql.SQLPermission
            public open fun deregisterDriver(/*0*/ p0: java.sql.Driver?): kotlin.Unit
            public open fun getConnection(/*0*/ p0: kotlin.String): java.sql.Connection
            public open fun getConnection(/*0*/ p0: kotlin.String, /*1*/ p1: java.util.Properties?): java.sql.Connection
            public open fun getConnection(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String, /*2*/ p2: kotlin.String): java.sql.Connection
            public open fun getDriver(/*0*/ p0: kotlin.String): java.sql.Driver
            public open fun getDrivers(): java.util.Enumeration<java.sql.Driver>
            public open fun getLogStream(): java.io.PrintStream?
            public open fun getLogWriter(): [ERROR : Unresolved java classifier: PrintWriter]?
            public open fun getLoginTimeout(): kotlin.Int
            public/*package*/ open fun initialize(): kotlin.Unit
            public open fun println(/*0*/ p0: kotlin.String?): kotlin.Unit
            public open fun registerDriver(/*0*/ p0: java.sql.Driver): kotlin.Unit
            public open fun setLogStream(/*0*/ p0: java.io.PrintStream?): kotlin.Unit
            public open fun setLogWriter(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]?): kotlin.Unit
            public open fun setLoginTimeout(/*0*/ p0: kotlin.Int): kotlin.Unit
        }
        
        package java.sql.ParameterMetaData {
            public val parameterModeIn: kotlin.Int = 1
            public val parameterModeInOut: kotlin.Int = 2
            public val parameterModeOut: kotlin.Int = 4
            public val parameterModeUnknown: kotlin.Int = 0
            public val parameterNoNulls: kotlin.Int = 0
            public val parameterNullable: kotlin.Int = 1
            public val parameterNullableUnknown: kotlin.Int = 2
        }
        
        package java.sql.ResultSet {
            public val CLOSE_CURSORS_AT_COMMIT: kotlin.Int = 2
            public val CONCUR_READ_ONLY: kotlin.Int = 1007
            public val CONCUR_UPDATABLE: kotlin.Int = 1008
            public val FETCH_FORWARD: kotlin.Int = 1000
            public val FETCH_REVERSE: kotlin.Int = 1001
            public val FETCH_UNKNOWN: kotlin.Int = 1002
            public val HOLD_CURSORS_OVER_COMMIT: kotlin.Int = 1
            public val TYPE_FORWARD_ONLY: kotlin.Int = 1003
            public val TYPE_SCROLL_INSENSITIVE: kotlin.Int = 1004
            public val TYPE_SCROLL_SENSITIVE: kotlin.Int = 1005
        }
        
        package java.sql.ResultSetMetaData {
            public val columnNoNulls: kotlin.Int = 0
            public val columnNullable: kotlin.Int = 1
            public val columnNullableUnknown: kotlin.Int = 2
        }
        
        package java.sql.SQLException {
        }
        
        package java.sql.SQLPermission {
            public/*package*/ val serialVersionUID: kotlin.Long = -1439323187199563495.toLong()
        }
        
        package java.sql.SQLWarning {
        }
        
        package java.sql.Statement {
            public val CLOSE_ALL_RESULTS: kotlin.Int = 3
            public val CLOSE_CURRENT_RESULT: kotlin.Int = 1
            public val EXECUTE_FAILED: kotlin.Int = -3
            public val KEEP_CURRENT_RESULT: kotlin.Int = 2
            public val NO_GENERATED_KEYS: kotlin.Int = 2
            public val RETURN_GENERATED_KEYS: kotlin.Int = 1
            public val SUCCESS_NO_INFO: kotlin.Int = -2
        }
        
        package java.sql.Time {
            public/*package*/ val serialVersionUID: kotlin.Long = 8397324403548013681.toLong()
            public open fun valueOf(/*0*/ p0: kotlin.String): java.sql.Time
        }
        
        package java.sql.Timestamp {
            public/*package*/ val serialVersionUID: kotlin.Long = 2745179027874758501.toLong()
            public open fun valueOf(/*0*/ p0: kotlin.String): java.sql.Timestamp
        }
        
        package java.sql.Types {
            public val ARRAY: kotlin.Int = 2003
            public val BIGINT: kotlin.Int = -5
            public val BINARY: kotlin.Int = -2
            public val BIT: kotlin.Int = -7
            public val BLOB: kotlin.Int = 2004
            public val BOOLEAN: kotlin.Int = 16
            public val CHAR: kotlin.Int = 1
            public val CLOB: kotlin.Int = 2005
            public val DATALINK: kotlin.Int = 70
            public val DATE: kotlin.Int = 91
            public val DECIMAL: kotlin.Int = 3
            public val DISTINCT: kotlin.Int = 2001
            public val DOUBLE: kotlin.Int = 8
            public val FLOAT: kotlin.Int = 6
            public val INTEGER: kotlin.Int = 4
            public val JAVA_OBJECT: kotlin.Int = 2000
            public val LONGNVARCHAR: kotlin.Int = -16
            public val LONGVARBINARY: kotlin.Int = -4
            public val LONGVARCHAR: kotlin.Int = -1
            public val NCHAR: kotlin.Int = -15
            public val NCLOB: kotlin.Int = 2011
            public val NULL: kotlin.Int = 0
            public val NUMERIC: kotlin.Int = 2
            public val NVARCHAR: kotlin.Int = -9
            public val OTHER: kotlin.Int = 1111
            public val REAL: kotlin.Int = 7
            public val REF: kotlin.Int = 2006
            public val ROWID: kotlin.Int = -8
            public val SMALLINT: kotlin.Int = 5
            public val SQLXML: kotlin.Int = 2009
            public val STRUCT: kotlin.Int = 2002
            public val TIME: kotlin.Int = 92
            public val TIMESTAMP: kotlin.Int = 93
            public val TINYINT: kotlin.Int = -6
            public val VARBINARY: kotlin.Int = -3
            public val VARCHAR: kotlin.Int = 12
        }
    }
    
    package java.util {
        public /*synthesized*/ fun </*0*/ T> Comparator(/*0*/ function: (T, T) -> kotlin.Int): java.util.Comparator<T>
        
        public abstract class AbstractCollection</*0*/ E> : kotlin.MutableCollection<E> {
            protected/*protected and package*/ constructor AbstractCollection</*0*/ E>()
            public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*1*/ fun clear(): kotlin.Unit
            public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ fun iterator(): kotlin.MutableIterator<E>
            public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ fun size(): kotlin.Int
            public open fun toArray(): kotlin.Array<kotlin.Any?>
            public open fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ fun toString(): kotlin.String
        }
        
        public abstract class AbstractList</*0*/ E> : java.util.AbstractCollection<E>, kotlin.MutableList<E> {
            protected/*protected and package*/ constructor AbstractList</*0*/ E>()
            protected/*protected and package*/ final var modCount: kotlin.Int
            public open override /*2*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*1*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*1*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*2*/ fun clear(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun get(/*0*/ index: kotlin.Int): E
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public open override /*2*/ fun iterator(): kotlin.MutableIterator<E>
            public open override /*1*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*1*/ fun listIterator(): kotlin.MutableListIterator<E>
            public open override /*1*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
            public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun remove(/*0*/ index: kotlin.Int): E
            public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            protected/*protected and package*/ open fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
            public abstract override /*2*/ /*fake_override*/ fun size(): kotlin.Int
            public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
            public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
            
            private open inner class Itr : kotlin.MutableIterator<E> {
                private constructor Itr()
                public/*package*/ final var cursor: kotlin.Int
                public/*package*/ final var expectedModCount: kotlin.Int
                public/*package*/ final var lastRet: kotlin.Int
                public/*package*/ final fun checkForComodification(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): E
                public open override /*1*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class ListItr : java.util.AbstractList.Itr, kotlin.MutableListIterator<E> {
                public/*package*/ constructor ListItr(/*0*/ p2: kotlin.Int)
                public/*package*/ final override /*1*/ /*fake_override*/ var cursor: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var lastRet: kotlin.Int
                public open override /*1*/ fun add(/*0*/ e: E): kotlin.Unit
                public/*package*/ final override /*1*/ /*fake_override*/ fun checkForComodification(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ fun hasPrevious(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun next(): E
                public open override /*1*/ fun nextIndex(): kotlin.Int
                public open override /*1*/ fun previous(): E
                public open override /*1*/ fun previousIndex(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ fun set(/*0*/ e: E): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        public abstract class AbstractMap</*0*/ K, /*1*/ V> : kotlin.MutableMap<K, V> {
            protected/*protected and package*/ constructor AbstractMap</*0*/ K, /*1*/ V>()
            public/*package*/ final var keySet: kotlin.Set<K>?
            public/*package*/ final var values: kotlin.Collection<V>?
            public open override /*1*/ fun clear(): kotlin.Unit
            protected/*protected and package*/ open fun clone(): kotlin.Any
            public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
            public open override /*1*/ fun hashCode(): kotlin.Int
            public open override /*1*/ fun isEmpty(): kotlin.Boolean
            public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
            public open override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
            public open override /*1*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public open override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
            public open override /*1*/ fun size(): kotlin.Int
            public open override /*1*/ fun toString(): kotlin.String
            public open override /*1*/ fun values(): kotlin.MutableCollection<V>
            
            public open class SimpleEntry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V>, java.io.Serializable {
                public constructor SimpleEntry</*0*/ K, /*1*/ V>(/*0*/ p0: K?, /*1*/ p1: V?)
                public constructor SimpleEntry</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map.Entry<K, V>)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getKey(): K
                public open override /*1*/ fun getValue(): V
                public open override /*2*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun setValue(/*0*/ value: V): V
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public open class SimpleImmutableEntry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V>, java.io.Serializable {
                public constructor SimpleImmutableEntry</*0*/ K, /*1*/ V>(/*0*/ p0: K?, /*1*/ p1: V?)
                public constructor SimpleImmutableEntry</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map.Entry<K, V>)
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ fun getKey(): K
                public open override /*1*/ fun getValue(): V
                public open override /*2*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun setValue(/*0*/ value: V): V
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public abstract class AbstractQueue</*0*/ E> : java.util.AbstractCollection<E> {
            protected/*protected and package*/ constructor AbstractQueue</*0*/ E>()
            public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*1*/ fun clear(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open fun element(): E
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
            public open fun remove(): E
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun size(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class AbstractSequentialList</*0*/ E> : java.util.AbstractList<E> {
            protected/*protected and package*/ constructor AbstractSequentialList</*0*/ E>()
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
            public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*1*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*1*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
            public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
            public abstract override /*1*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
            public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun remove(/*0*/ index: kotlin.Int): E
            public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
            public abstract override /*1*/ /*fake_override*/ fun size(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
            public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public abstract class AbstractSet</*0*/ E> : java.util.AbstractCollection<E>, kotlin.MutableSet<E> {
            protected/*protected and package*/ constructor AbstractSet</*0*/ E>()
            public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun hashCode(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
            public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*2*/ /*fake_override*/ fun size(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class ArrayList</*0*/ E> : java.util.AbstractList<E>, kotlin.MutableList<E>, java.util.RandomAccess, java.lang.Cloneable, java.io.Serializable {
            public constructor ArrayList</*0*/ E>()
            public constructor ArrayList</*0*/ E>(/*0*/ p0: kotlin.Collection<E>)
            public constructor ArrayList</*0*/ E>(/*0*/ p0: kotlin.Int)
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
            public open override /*2*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*2*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
            public open override /*2*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*2*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*2*/ fun clear(): kotlin.Unit
            public open override /*3*/ fun clone(): kotlin.Any
            public open override /*2*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open fun ensureCapacity(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*5*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*3*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*2*/ fun get(/*0*/ index: kotlin.Int): E
            public final override /*3*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*5*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*2*/ fun isEmpty(): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
            public open override /*2*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
            public open override /*2*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
            public final override /*3*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun remove(/*0*/ index: kotlin.Int): E
            public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
            public open override /*2*/ fun size(): kotlin.Int
            public open override /*2*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
            public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*5*/ /*fake_override*/ fun toString(): kotlin.String
            public open fun trimToSize(): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*3*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class Arrays : java.lang.Object {
            private constructor Arrays()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class ArrayList</*0*/ E> : java.util.AbstractList<E>, java.util.RandomAccess, java.io.Serializable {
                public/*package*/ constructor ArrayList</*0*/ E>(/*0*/ p0: kotlin.Array<out E>?)
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public abstract class Calendar : java.io.Serializable, java.lang.Cloneable, kotlin.Comparable<java.util.Calendar> {
            protected/*protected and package*/ constructor Calendar()
            protected/*protected and package*/ constructor Calendar(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone], /*1*/ p1: java.util.Locale)
            public/*package*/ final var areAllFieldsSet: kotlin.Boolean
            protected/*protected and package*/ final var areFieldsSet: kotlin.Boolean
            protected/*protected and package*/ final var fields: kotlin.IntArray?
            protected/*protected and package*/ final var isSet: kotlin.BooleanArray?
            protected/*protected and package*/ final var isTimeSet: kotlin.Boolean
            protected/*protected and package*/ final var time: kotlin.Long
            public abstract fun add(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open fun after(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public open fun before(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public/*package*/ open fun checkDisplayNameParams(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: java.util.Locale?, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public final fun clear(): kotlin.Unit
            public final fun clear(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*2*/ fun clone(): kotlin.Any
            public open override /*1*/ fun compareTo(/*0*/ other: java.util.Calendar): kotlin.Int
            protected/*protected and package*/ open fun complete(): kotlin.Unit
            protected/*protected and package*/ abstract fun computeFields(): kotlin.Unit
            protected/*protected and package*/ abstract fun computeTime(): kotlin.Unit
            public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun get(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun getActualMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun getActualMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getDisplayName(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: java.util.Locale): kotlin.String?
            public open fun getDisplayNames(/*0*/ field: kotlin.Int, /*1*/ style: kotlin.Int, /*2*/ locale: java.util.Locale): kotlin.Map<kotlin.String, kotlin.Int>?
            public open fun getFirstDayOfWeek(): kotlin.Int
            public abstract fun getGreatestMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getLeastMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public abstract fun getMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun getMinimalDaysInFirstWeek(): kotlin.Int
            public abstract fun getMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ final fun getSetStateFields(): kotlin.Int
            public final fun getTime(): java.util.Date
            public open fun getTimeInMillis(): kotlin.Long
            public open fun getTimeZone(): [ERROR : Unresolved java classifier: TimeZone]
            public/*package*/ open fun getZone(): [ERROR : Unresolved java classifier: TimeZone]?
            public open override /*3*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ final fun internalGet(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ final fun internalSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final fun isExternallySet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ final fun isFullyNormalized(): kotlin.Boolean
            public open fun isLenient(): kotlin.Boolean
            public/*package*/ final fun isPartiallyNormalized(): kotlin.Boolean
            public final fun isSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun roll(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public open fun roll(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final fun selectFields(): kotlin.Int
            public open fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Unit
            public/*package*/ final fun setFieldsComputed(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ final fun setFieldsNormalized(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setFirstDayOfWeek(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setLenient(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open fun setMinimalDaysInFirstWeek(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final fun setTime(/*0*/ p0: java.util.Date): kotlin.Unit
            public open fun setTimeInMillis(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open fun setTimeZone(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone]): kotlin.Unit
            public/*package*/ final fun setUnnormalized(): kotlin.Unit
            public/*package*/ open fun setZoneShared(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*3*/ fun toString(): kotlin.String
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class CalendarAccessControlContext : java.lang.Object {
                private constructor CalendarAccessControlContext()
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public trait Collection</*0*/ E> : kotlin.MutableIterable<E> {
            public abstract fun add(/*0*/ e: E): kotlin.Boolean
            public abstract fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public abstract fun clear(): kotlin.Unit
            public abstract fun contains(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public abstract fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ fun iterator(): kotlin.MutableIterator<E>
            public abstract fun remove(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public abstract fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract fun size(): kotlin.Int
            public abstract fun toArray(): kotlin.Array<kotlin.Any?>
            public abstract fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class Collections : java.lang.Object {
            private constructor Collections()
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ open class AsLIFOQueue</*0*/ E> : java.util.AbstractQueue<E>, java.io.Serializable {
                public/*package*/ constructor AsLIFOQueue</*0*/ E>(/*0*/ p0: [ERROR : Unresolved java classifier: Deque<E>]?)
                public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun element(): E
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open fun offer(/*0*/ p0: E?): kotlin.Boolean
                public open fun peek(): E?
                public open fun poll(): E?
                public open override /*1*/ fun remove(): E
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class CheckedCollection</*0*/ E> : kotlin.MutableCollection<E>, java.io.Serializable {
                public/*package*/ constructor CheckedCollection</*0*/ E>(/*0*/ p0: kotlin.Collection<E>?, /*1*/ p1: java.lang.Class<E>?)
                public/*package*/ final val c: kotlin.Collection<E>?
                public/*package*/ final val `type`: java.lang.Class<E>?
                public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open fun toArray(): kotlin.Array<kotlin.Any>?
                public open fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ fun toString(): kotlin.String
                public/*package*/ open fun typeCheck(/*0*/ p0: kotlin.Any?): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open fun zeroLengthElementArray(): kotlin.Array<E>?
            }
            
            public/*package*/ open class CheckedList</*0*/ E> : java.util.Collections.CheckedCollection<E>, kotlin.MutableList<E> {
                public/*package*/ constructor CheckedList</*0*/ E>(/*0*/ p0: kotlin.List<E>?, /*1*/ p1: java.lang.Class<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final val list: kotlin.List<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val `type`: java.lang.Class<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ open override /*1*/ /*fake_override*/ fun typeCheck(/*0*/ p0: kotlin.Any?): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun zeroLengthElementArray(): kotlin.Array<E>?
            }
            
            private open class CheckedMap</*0*/ K, /*1*/ V> : kotlin.MutableMap<K, V>, java.io.Serializable {
                public/*package*/ constructor CheckedMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<K, V>?, /*1*/ p1: java.lang.Class<K>?, /*2*/ p2: java.lang.Class<V>?)
                public/*package*/ final val keyType: java.lang.Class<K>?
                public/*package*/ final val valueType: java.lang.Class<V>?
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*2*/ fun toString(): kotlin.String
                public open override /*1*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ open class CheckedEntrySet</*0*/ K, /*1*/ V> : kotlin.MutableSet<kotlin.Map.Entry<K, V>> {
                    public/*package*/ constructor CheckedEntrySet</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Set<kotlin.Map.Entry<K, V>>?, /*1*/ p1: java.lang.Class<V>?)
                    public/*package*/ final var s: kotlin.Set<kotlin.Map.Entry<K, V>>?
                    public/*package*/ final var valueType: java.lang.Class<V>?
                    public open override /*1*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                    public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                    public open override /*1*/ fun clear(): kotlin.Unit
                    public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun isEmpty(): kotlin.Boolean
                    public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                    public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ fun size(): kotlin.Int
                    public open fun toArray(): kotlin.Array<kotlin.Any>?
                    public open fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                    public open override /*1*/ fun toString(): kotlin.String
                    
                    private open class CheckedEntry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V> {
                        public/*package*/ constructor CheckedEntry</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map.Entry<K, V>?, /*1*/ p1: java.lang.Class<V>?)
                        public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ fun getKey(): K
                        public open override /*1*/ fun getValue(): V
                        public open override /*1*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ fun setValue(/*0*/ value: V): V
                        public open override /*1*/ fun toString(): kotlin.String
                    }
                }
            }
            
            public/*package*/ open class CheckedRandomAccessList</*0*/ E> : java.util.Collections.CheckedList<E>, java.util.RandomAccess {
                public/*package*/ constructor CheckedRandomAccessList</*0*/ E>(/*0*/ p0: kotlin.List<E>?, /*1*/ p1: java.lang.Class<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val list: kotlin.List<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val `type`: java.lang.Class<E>?
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ open override /*1*/ /*fake_override*/ fun typeCheck(/*0*/ p0: kotlin.Any?): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun zeroLengthElementArray(): kotlin.Array<E>?
            }
            
            public/*package*/ open class CheckedSet</*0*/ E> : java.util.Collections.CheckedCollection<E>, kotlin.MutableSet<E>, java.io.Serializable {
                public/*package*/ constructor CheckedSet</*0*/ E>(/*0*/ p0: kotlin.Set<E>?, /*1*/ p1: java.lang.Class<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val `type`: java.lang.Class<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ fun hashCode(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ open override /*1*/ /*fake_override*/ fun typeCheck(/*0*/ p0: kotlin.Any?): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun zeroLengthElementArray(): kotlin.Array<E>?
            }
            
            public/*package*/ open class CheckedSortedMap</*0*/ K, /*1*/ V> : java.util.Collections.CheckedMap<K, V>, java.util.SortedMap<K, V>, java.io.Serializable {
                public/*package*/ constructor CheckedSortedMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.SortedMap<K, V>?, /*1*/ p1: java.lang.Class<K>?, /*2*/ p2: java.lang.Class<V>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val keyType: java.lang.Class<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ val valueType: java.lang.Class<V>?
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in K>
                public open override /*2*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun firstKey(): K?
                public open override /*2*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headMap(/*0*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public open override /*1*/ fun lastKey(): K?
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*2*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subMap(/*0*/ fromKey: K, /*1*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*1*/ fun tailMap(/*0*/ fromKey: K): java.util.SortedMap<K, V>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*2*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class CheckedSortedSet</*0*/ E> : java.util.Collections.CheckedSet<E>, java.util.SortedSet<E>, java.io.Serializable {
                public/*package*/ constructor CheckedSortedSet</*0*/ E>(/*0*/ p0: java.util.SortedSet<E>?, /*1*/ p1: java.lang.Class<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val `type`: java.lang.Class<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in E>
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun first(): E?
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headSet(/*0*/ toElement: E): java.util.SortedSet<E>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun last(): E?
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subSet(/*0*/ fromElement: E, /*1*/ toElement: E): java.util.SortedSet<E>
                public open override /*1*/ fun tailSet(/*0*/ fromElement: E): java.util.SortedSet<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ open override /*1*/ /*fake_override*/ fun typeCheck(/*0*/ p0: kotlin.Any?): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                public/*package*/ open override /*1*/ /*fake_override*/ fun zeroLengthElementArray(): kotlin.Array<E>?
            }
            
            private open class CopiesList</*0*/ E> : java.util.AbstractList<E>, java.util.RandomAccess, java.io.Serializable {
                public/*package*/ constructor CopiesList</*0*/ E>(/*0*/ p0: kotlin.Int, /*1*/ p1: E?)
                public/*package*/ final val element: E?
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
                public/*package*/ final val n: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class EmptyList : java.util.AbstractList<kotlin.Any>, java.util.RandomAccess, java.io.Serializable {
                private constructor EmptyList()
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Any): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.Any): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Any>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<kotlin.Any>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): kotlin.Any
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.Any>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<kotlin.Any>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<kotlin.Any>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: kotlin.Any): kotlin.Any
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<kotlin.Any>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class EmptyMap : java.util.AbstractMap<kotlin.Any, kotlin.Any>, java.io.Serializable {
                private constructor EmptyMap()
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<kotlin.Any>?
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<kotlin.Any, kotlin.Any>>
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): kotlin.Any?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun keySet(): kotlin.MutableSet<kotlin.Any>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun put(/*0*/ key: kotlin.Any, /*1*/ value: kotlin.Any): kotlin.Any?
                public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out kotlin.Any, kotlin.Any>): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): kotlin.Any?
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*1*/ fun values(): kotlin.MutableCollection<kotlin.Any>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class EmptySet : java.util.AbstractSet<kotlin.Any>, java.io.Serializable {
                private constructor EmptySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Any): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Any>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Any>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class ReverseComparator</*0*/ T> : java.util.Comparator<kotlin.Comparable<kotlin.Any>>, java.io.Serializable {
                private constructor ReverseComparator</*0*/ T>()
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun compare(/*0*/ p0: kotlin.Comparable<kotlin.Any>, /*1*/ p1: kotlin.Comparable<kotlin.Any>): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class ReverseComparator2</*0*/ T> : java.util.Comparator<T>, java.io.Serializable {
                public/*package*/ /*synthesized*/ constructor ReverseComparator2</*0*/ T>(/*0*/ p0: ((T, T) -> kotlin.Int)?)
                public/*package*/ constructor ReverseComparator2</*0*/ T>(/*0*/ p0: java.util.Comparator<T>?)
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun compare(/*0*/ p0: T, /*1*/ p1: T): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private trait SelfComparable : kotlin.Comparable<java.util.Collections.SelfComparable> {
                public abstract override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Collections.SelfComparable): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open class SetFromMap</*0*/ E> : java.util.AbstractSet<E>, kotlin.MutableSet<E>, java.io.Serializable {
                public/*package*/ constructor SetFromMap</*0*/ E>(/*0*/ p0: kotlin.Map<E, kotlin.Boolean>?)
                public open override /*2*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ fun hashCode(): kotlin.Int
                public open override /*2*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun size(): kotlin.Int
                public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*3*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class SingletonList</*0*/ E> : java.util.AbstractList<E>, java.util.RandomAccess, java.io.Serializable {
                public/*package*/ constructor SingletonList</*0*/ E>(/*0*/ p0: E?)
                protected/*protected and package*/ final override /*1*/ /*fake_override*/ var modCount: kotlin.Int
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun removeRange(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class SingletonMap</*0*/ K, /*1*/ V> : java.util.AbstractMap<K, V>, java.io.Serializable {
                public/*package*/ constructor SingletonMap</*0*/ K, /*1*/ V>(/*0*/ p0: K?, /*1*/ p1: V?)
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*1*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class SingletonSet</*0*/ E> : java.util.AbstractSet<E>, java.io.Serializable {
                public/*package*/ constructor SingletonSet</*0*/ E>(/*0*/ p0: E?)
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedCollection</*0*/ E> : kotlin.MutableCollection<E>, java.io.Serializable {
                public/*package*/ constructor SynchronizedCollection</*0*/ E>(/*0*/ p0: kotlin.Collection<E>?)
                public/*package*/ constructor SynchronizedCollection</*0*/ E>(/*0*/ p0: kotlin.Collection<E>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final val c: kotlin.Collection<E>?
                public/*package*/ final val mutex: kotlin.Any?
                public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open fun toArray(): kotlin.Array<kotlin.Any>?
                public open fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedList</*0*/ E> : java.util.Collections.SynchronizedCollection<E>, kotlin.MutableList<E> {
                public/*package*/ constructor SynchronizedList</*0*/ E>(/*0*/ p0: kotlin.List<E>?)
                public/*package*/ constructor SynchronizedList</*0*/ E>(/*0*/ p0: kotlin.List<E>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final val list: kotlin.List<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val mutex: kotlin.Any?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class SynchronizedMap</*0*/ K, /*1*/ V> : kotlin.MutableMap<K, V>, java.io.Serializable {
                public/*package*/ constructor SynchronizedMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<K, V>?)
                public/*package*/ constructor SynchronizedMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<K, V>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final val mutex: kotlin.Any?
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*2*/ fun toString(): kotlin.String
                public open override /*1*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedRandomAccessList</*0*/ E> : java.util.Collections.SynchronizedList<E>, java.util.RandomAccess {
                public/*package*/ constructor SynchronizedRandomAccessList</*0*/ E>(/*0*/ p0: kotlin.List<E>?)
                public/*package*/ constructor SynchronizedRandomAccessList</*0*/ E>(/*0*/ p0: kotlin.List<E>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val list: kotlin.List<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val mutex: kotlin.Any?
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedSet</*0*/ E> : java.util.Collections.SynchronizedCollection<E>, kotlin.MutableSet<E> {
                public/*package*/ constructor SynchronizedSet</*0*/ E>(/*0*/ p0: kotlin.Set<E>?)
                public/*package*/ constructor SynchronizedSet</*0*/ E>(/*0*/ p0: kotlin.Set<E>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val mutex: kotlin.Any?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedSortedMap</*0*/ K, /*1*/ V> : java.util.Collections.SynchronizedMap<K, V>, java.util.SortedMap<K, V> {
                public/*package*/ constructor SynchronizedSortedMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.SortedMap<K, V>?)
                public/*package*/ constructor SynchronizedSortedMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.SortedMap<K, V>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final override /*1*/ /*fake_override*/ val mutex: kotlin.Any?
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in K>
                public open override /*2*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun firstKey(): K?
                public open override /*2*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headMap(/*0*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public open override /*1*/ fun lastKey(): K?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*2*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subMap(/*0*/ fromKey: K, /*1*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*1*/ fun tailMap(/*0*/ fromKey: K): java.util.SortedMap<K, V>
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*2*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class SynchronizedSortedSet</*0*/ E> : java.util.Collections.SynchronizedSet<E>, java.util.SortedSet<E> {
                public/*package*/ constructor SynchronizedSortedSet</*0*/ E>(/*0*/ p0: java.util.SortedSet<E>?)
                public/*package*/ constructor SynchronizedSortedSet</*0*/ E>(/*0*/ p0: java.util.SortedSet<E>?, /*1*/ p1: kotlin.Any?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val mutex: kotlin.Any?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in E>
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun first(): E?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headSet(/*0*/ toElement: E): java.util.SortedSet<E>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun last(): E?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subSet(/*0*/ fromElement: E, /*1*/ toElement: E): java.util.SortedSet<E>
                public open override /*1*/ fun tailSet(/*0*/ fromElement: E): java.util.SortedSet<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class UnmodifiableCollection</*0*/ E> : kotlin.MutableCollection<E>, java.io.Serializable {
                public/*package*/ constructor UnmodifiableCollection</*0*/ E>(/*0*/ p0: kotlin.Collection<E>?)
                public/*package*/ final val c: kotlin.Collection<E>?
                public open override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open fun toArray(): kotlin.Array<kotlin.Any>?
                public open fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class UnmodifiableList</*0*/ E> : java.util.Collections.UnmodifiableCollection<E>, kotlin.MutableList<E> {
                public/*package*/ constructor UnmodifiableList</*0*/ E>(/*0*/ p0: kotlin.List<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final val list: kotlin.List<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            private open class UnmodifiableMap</*0*/ K, /*1*/ V> : kotlin.MutableMap<K, V>, java.io.Serializable {
                public/*package*/ constructor UnmodifiableMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<out K, V>?)
                public open override /*1*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*2*/ fun toString(): kotlin.String
                public open override /*1*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ open class UnmodifiableEntrySet</*0*/ K, /*1*/ V> : java.util.Collections.UnmodifiableSet<kotlin.Map.Entry<K, V>> {
                    public/*package*/ constructor UnmodifiableEntrySet</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Set<kotlin.Map.Entry<K, V>?>?)
                    public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<kotlin.Map.Entry<K, V>>?
                    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                    public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                    public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any>?
                    public open override /*1*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    
                    private open class UnmodifiableEntry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V> {
                        public/*package*/ constructor UnmodifiableEntry</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map.Entry<K, V>?)
                        public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public open override /*1*/ fun getKey(): K
                        public open override /*1*/ fun getValue(): V
                        public open override /*1*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ fun setValue(/*0*/ value: V): V
                        public open override /*1*/ fun toString(): kotlin.String
                    }
                }
            }
            
            public/*package*/ open class UnmodifiableRandomAccessList</*0*/ E> : java.util.Collections.UnmodifiableList<E>, java.util.RandomAccess {
                public/*package*/ constructor UnmodifiableRandomAccessList</*0*/ E>(/*0*/ p0: kotlin.List<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public/*package*/ final override /*1*/ /*fake_override*/ val list: kotlin.List<E>?
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun get(/*0*/ index: kotlin.Int): E
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun indexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ /*fake_override*/ fun lastIndexOf(/*0*/ o: kotlin.Any?): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun listIterator(): kotlin.MutableListIterator<E>
                public open override /*1*/ /*fake_override*/ fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ index: kotlin.Int): E
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
                public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.MutableList<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class UnmodifiableSet</*0*/ E> : java.util.Collections.UnmodifiableCollection<E>, kotlin.MutableSet<E>, java.io.Serializable {
                public/*package*/ constructor UnmodifiableSet</*0*/ E>(/*0*/ p0: kotlin.Set<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ fun hashCode(): kotlin.Int
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class UnmodifiableSortedMap</*0*/ K, /*1*/ V> : java.util.Collections.UnmodifiableMap<K, V>, java.util.SortedMap<K, V>, java.io.Serializable {
                public/*package*/ constructor UnmodifiableSortedMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.SortedMap<K, out V>?)
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in K>
                public open override /*2*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun firstKey(): K?
                public open override /*2*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headMap(/*0*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public open override /*1*/ fun lastKey(): K?
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*2*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subMap(/*0*/ fromKey: K, /*1*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*1*/ fun tailMap(/*0*/ fromKey: K): java.util.SortedMap<K, V>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*2*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ open class UnmodifiableSortedSet</*0*/ E> : java.util.Collections.UnmodifiableSet<E>, java.util.SortedSet<E>, java.io.Serializable {
                public/*package*/ constructor UnmodifiableSortedSet</*0*/ E>(/*0*/ p0: java.util.SortedSet<E>?)
                public/*package*/ final override /*1*/ /*fake_override*/ val c: kotlin.Collection<E>?
                public open override /*2*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in E>
                public open override /*2*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun first(): E?
                public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headSet(/*0*/ toElement: E): java.util.SortedSet<E>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
                public open override /*1*/ fun last(): E?
                public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subSet(/*0*/ fromElement: E, /*1*/ toElement: E): java.util.SortedSet<E>
                public open override /*1*/ fun tailSet(/*0*/ fromElement: E): java.util.SortedSet<E>
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ p0: kotlin.Array<out T>?): kotlin.Array<T>?
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public trait Comparator</*0*/ T> : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun compare(/*0*/ p0: T, /*1*/ p1: T): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class ConcurrentModificationException : java.lang.RuntimeException {
            public constructor ConcurrentModificationException()
            public constructor ConcurrentModificationException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class Date : java.io.Serializable, java.lang.Cloneable, kotlin.Comparable<java.util.Date> {
            public constructor Date()
            public constructor Date(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor Date(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int)
            public constructor Date(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int)
            public constructor Date(/*0*/ p0: kotlin.Long)
            public constructor Date(/*0*/ p0: kotlin.String)
            public open fun after(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open fun before(/*0*/ p0: java.util.Date): kotlin.Boolean
            public open override /*2*/ fun clone(): kotlin.Any?
            public open override /*1*/ fun compareTo(/*0*/ other: java.util.Date): kotlin.Int
            public open override /*3*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getDate(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getDay(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getHours(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getMinutes(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getMonth(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getSeconds(): kotlin.Int
            public open fun getTime(): kotlin.Long
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getTimezoneOffset(): kotlin.Int
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun getYear(): kotlin.Int
            public open override /*3*/ fun hashCode(): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setDate(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setHours(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setMinutes(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setMonth(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setSeconds(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setTime(/*0*/ p0: kotlin.Long): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun setYear(/*0*/ p0: kotlin.Int): kotlin.Unit
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun toGMTString(): kotlin.String
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun toLocaleString(): kotlin.String
            public open override /*3*/ fun toString(): kotlin.String
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Enumeration</*0*/ E> : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun hasMoreElements(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun nextElement(): E
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait EventListener : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class GregorianCalendar : java.util.Calendar {
            public constructor GregorianCalendar()
            public constructor GregorianCalendar(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone])
            public constructor GregorianCalendar(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone], /*1*/ p1: java.util.Locale)
            public constructor GregorianCalendar(/*0*/ p0: java.util.Locale)
            public constructor GregorianCalendar(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int)
            public constructor GregorianCalendar(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int)
            public constructor GregorianCalendar(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int)
            public/*package*/ constructor GregorianCalendar(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int, /*6*/ p6: kotlin.Int)
            public/*package*/ final override /*1*/ /*fake_override*/ var areAllFieldsSet: kotlin.Boolean
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var areFieldsSet: kotlin.Boolean
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var fields: kotlin.IntArray?
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var isSet: kotlin.BooleanArray?
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var isTimeSet: kotlin.Boolean
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ var time: kotlin.Long
            public open override /*1*/ fun add(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun after(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun before(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public/*package*/ open override /*1*/ /*fake_override*/ fun checkDisplayNameParams(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: java.util.Locale?, /*5*/ p5: kotlin.Int): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun clear(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun compareTo(/*0*/ other: java.util.Calendar): kotlin.Int
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun complete(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun computeFields(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ fun computeTime(): kotlin.Unit
            public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun get(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ fun getActualMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ fun getActualMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun getDisplayName(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: java.util.Locale): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun getDisplayNames(/*0*/ field: kotlin.Int, /*1*/ style: kotlin.Int, /*2*/ locale: java.util.Locale): kotlin.Map<kotlin.String, kotlin.Int>?
            public open override /*1*/ /*fake_override*/ fun getFirstDayOfWeek(): kotlin.Int
            public open override /*1*/ fun getGreatestMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public final fun getGregorianChange(): java.util.Date
            public open override /*1*/ fun getLeastMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ fun getMaximum(/*0*/ p0: kotlin.Int): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun getMinimalDaysInFirstWeek(): kotlin.Int
            public open override /*1*/ fun getMinimum(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun getSetStateFields(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun getTime(): java.util.Date
            public open override /*1*/ /*fake_override*/ fun getTimeInMillis(): kotlin.Long
            public open override /*1*/ fun getTimeZone(): [ERROR : Unresolved java classifier: TimeZone]
            public/*package*/ open override /*1*/ /*fake_override*/ fun getZone(): [ERROR : Unresolved java classifier: TimeZone]?
            public open override /*1*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun internalGet(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ fun internalSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun isExternallySet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isFullyNormalized(): kotlin.Boolean
            public open fun isLeapYear(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun isLenient(): kotlin.Boolean
            public/*package*/ final override /*1*/ /*fake_override*/ fun isPartiallyNormalized(): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun isSet(/*0*/ p0: kotlin.Int): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ fun roll(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ fun roll(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun selectFields(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setFieldsComputed(/*0*/ p0: kotlin.Int): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setFieldsNormalized(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setFirstDayOfWeek(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open fun setGregorianChange(/*0*/ p0: java.util.Date): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setLenient(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setMinimalDaysInFirstWeek(/*0*/ p0: kotlin.Int): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun setTime(/*0*/ p0: java.util.Date): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun setTimeInMillis(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ fun setTimeZone(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone]): kotlin.Unit
            public/*package*/ final override /*1*/ /*fake_override*/ fun setUnnormalized(): kotlin.Unit
            public/*package*/ open override /*1*/ /*fake_override*/ fun setZoneShared(/*0*/ p0: kotlin.Boolean): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class HashMap</*0*/ K, /*1*/ V> : java.util.AbstractMap<K, V>, kotlin.MutableMap<K, V>, java.lang.Cloneable, java.io.Serializable {
            public constructor HashMap</*0*/ K, /*1*/ V>()
            public constructor HashMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Int)
            public constructor HashMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float)
            public constructor HashMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<out K, V>)
            public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
            public/*package*/ final val loadFactor: kotlin.Float
            public/*package*/ final var modCount: kotlin.Int
            public/*package*/ final var size: kotlin.Int
            public/*package*/ final var table: kotlin.Array<java.util.HashMap.Entry<out kotlin.Any?, out kotlin.Any?>>?
            public/*package*/ final var threshold: kotlin.Int
            public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
            public/*package*/ open fun addEntry(/*0*/ p0: kotlin.Int, /*1*/ p1: K?, /*2*/ p2: V?, /*3*/ p3: kotlin.Int): kotlin.Unit
            public/*package*/ open fun capacity(): kotlin.Int
            public open override /*2*/ fun clear(): kotlin.Unit
            public open override /*3*/ fun clone(): kotlin.Any
            public open override /*2*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
            public/*package*/ open fun createEntry(/*0*/ p0: kotlin.Int, /*1*/ p1: K?, /*2*/ p2: V?, /*3*/ p3: kotlin.Int): kotlin.Unit
            public open override /*2*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
            public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*2*/ fun get(/*0*/ key: kotlin.Any?): V?
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ final fun getEntry(/*0*/ p0: kotlin.Any?): java.util.HashMap.Entry<K, V>?
            public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public/*package*/ open fun init(): kotlin.Unit
            public open override /*2*/ fun isEmpty(): kotlin.Boolean
            public open override /*2*/ fun keySet(): kotlin.MutableSet<K>
            public/*package*/ open fun loadFactor(): kotlin.Float
            public/*package*/ open fun newEntryIterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>?
            public/*package*/ open fun newKeyIterator(): kotlin.MutableIterator<K>?
            public/*package*/ open fun newValueIterator(): kotlin.MutableIterator<V>?
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
            public open override /*2*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public open override /*2*/ fun remove(/*0*/ key: kotlin.Any?): V?
            public/*package*/ final fun removeEntryForKey(/*0*/ p0: kotlin.Any?): java.util.HashMap.Entry<K, V>?
            public/*package*/ final fun removeMapping(/*0*/ p0: kotlin.Any?): java.util.HashMap.Entry<K, V>?
            public/*package*/ open fun resize(/*0*/ p0: kotlin.Int): kotlin.Unit
            public open override /*2*/ fun size(): kotlin.Int
            public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
            public/*package*/ open fun transfer(/*0*/ p0: kotlin.Array<out java.util.HashMap.Entry<out kotlin.Any?, out kotlin.Any?>>?): kotlin.Unit
            public open override /*2*/ fun values(): kotlin.MutableCollection<V>
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ open class Entry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V> {
                public/*package*/ constructor Entry</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Int, /*1*/ p1: K?, /*2*/ p2: V?, /*3*/ p3: java.util.HashMap.Entry<K, V>?)
                public/*package*/ final val hash: kotlin.Int
                public/*package*/ final val key: K?
                public/*package*/ final var next: java.util.HashMap.Entry<K, V>?
                public/*package*/ final var value: V?
                public final override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ fun getKey(): K
                public final override /*1*/ fun getValue(): V
                public final override /*1*/ fun hashCode(): kotlin.Int
                public/*package*/ open fun recordAccess(/*0*/ p0: java.util.HashMap<K, V>?): kotlin.Unit
                public/*package*/ open fun recordRemoval(/*0*/ p0: java.util.HashMap<K, V>?): kotlin.Unit
                public final override /*1*/ fun setValue(/*0*/ value: V): V
                public final override /*1*/ fun toString(): kotlin.String
            }
            
            private final inner class EntryIterator : java.util.HashMap.HashIterator<kotlin.Map.Entry<K, V>> {
                private constructor EntryIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var current: java.util.HashMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): kotlin.Map.Entry<K, V>
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private final inner class EntrySet : java.util.AbstractSet<kotlin.Map.Entry<K, V>> {
                private constructor EntrySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private abstract inner class HashIterator</*0*/ E> : kotlin.MutableIterator<E> {
                public/*package*/ constructor HashIterator</*0*/ E>()
                public/*package*/ final var current: java.util.HashMap.Entry<K, V>?
                public/*package*/ final var expectedModCount: kotlin.Int
                public/*package*/ final var index: kotlin.Int
                public/*package*/ final var next: java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public abstract override /*1*/ /*fake_override*/ fun next(): E
                public/*package*/ final fun nextEntry(): java.util.HashMap.Entry<K, V>?
                public open override /*1*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private final inner class KeyIterator : java.util.HashMap.HashIterator<K> {
                private constructor KeyIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var current: java.util.HashMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): K
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private final inner class KeySet : java.util.AbstractSet<K> {
                private constructor KeySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: K): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<K>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<K>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private final inner class ValueIterator : java.util.HashMap.HashIterator<V> {
                private constructor ValueIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var current: java.util.HashMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): V
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.HashMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private final inner class Values : java.util.AbstractCollection<V> {
                private constructor Values()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: V): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<V>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<V>
                public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        public open class HashSet</*0*/ E> : java.util.AbstractSet<E>, kotlin.MutableSet<E>, java.lang.Cloneable, java.io.Serializable {
            public constructor HashSet</*0*/ E>()
            public constructor HashSet</*0*/ E>(/*0*/ p0: kotlin.Collection<E>)
            public constructor HashSet</*0*/ E>(/*0*/ p0: kotlin.Int)
            public constructor HashSet</*0*/ E>(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float)
            public/*package*/ constructor HashSet</*0*/ E>(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Float, /*2*/ p2: kotlin.Boolean)
            public open override /*2*/ fun add(/*0*/ e: E): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public open override /*2*/ fun clear(): kotlin.Unit
            public open override /*2*/ fun clone(): kotlin.Any
            public open override /*2*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*4*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*4*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open override /*2*/ fun isEmpty(): kotlin.Boolean
            public open override /*2*/ fun iterator(): kotlin.MutableIterator<E>
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*2*/ fun size(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public open class IdentityHashMap</*0*/ K, /*1*/ V> : java.util.AbstractMap<K, V>, kotlin.MutableMap<K, V>, java.io.Serializable, java.lang.Cloneable {
            public constructor IdentityHashMap</*0*/ K, /*1*/ V>()
            public constructor IdentityHashMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Int)
            public constructor IdentityHashMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<out K, V>)
            public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
            public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
            public open override /*2*/ fun clear(): kotlin.Unit
            public open override /*3*/ fun clone(): kotlin.Any
            public open override /*2*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
            public open override /*2*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
            public open override /*4*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open override /*2*/ fun get(/*0*/ key: kotlin.Any?): V?
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*4*/ fun hashCode(): kotlin.Int
            public open override /*2*/ fun isEmpty(): kotlin.Boolean
            public open override /*2*/ fun keySet(): kotlin.MutableSet<K>
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*2*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
            public open override /*2*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public open override /*2*/ fun remove(/*0*/ key: kotlin.Any?): V?
            public open override /*2*/ fun size(): kotlin.Int
            public open override /*4*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*2*/ fun values(): kotlin.MutableCollection<V>
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open inner class EntryIterator : java.util.IdentityHashMap.IdentityHashMapIterator<kotlin.Map.Entry<K, V>>, kotlin.MutableMap.MutableEntry<K, V> {
                private constructor EntryIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var indexValid: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturnedIndex: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var traversalTable: kotlin.Array<kotlin.Any>?
                public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun getKey(): K
                public open override /*1*/ fun getValue(): V
                public open override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*2*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): kotlin.Map.Entry<K, V>
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun nextIndex(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ fun setValue(/*0*/ value: V): V
                public open override /*2*/ fun toString(): kotlin.String
            }
            
            private open inner class EntrySet : java.util.AbstractSet<kotlin.Map.Entry<K, V>> {
                private constructor EntrySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private abstract inner class IdentityHashMapIterator</*0*/ T> : kotlin.MutableIterator<T> {
                private constructor IdentityHashMapIterator</*0*/ T>()
                public/*package*/ final var expectedModCount: kotlin.Int
                public/*package*/ final var index: kotlin.Int
                public/*package*/ final var indexValid: kotlin.Boolean
                public/*package*/ final var lastReturnedIndex: kotlin.Int
                public/*package*/ final var traversalTable: kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public abstract override /*1*/ /*fake_override*/ fun next(): T
                protected/*protected and package*/ open fun nextIndex(): kotlin.Int
                public open override /*1*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class KeyIterator : java.util.IdentityHashMap.IdentityHashMapIterator<K> {
                private constructor KeyIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var indexValid: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturnedIndex: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var traversalTable: kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): K
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun nextIndex(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class KeySet : java.util.AbstractSet<K> {
                private constructor KeySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: K): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<K>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<K>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class ValueIterator : java.util.IdentityHashMap.IdentityHashMapIterator<V> {
                private constructor ValueIterator()
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var index: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var indexValid: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturnedIndex: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var traversalTable: kotlin.Array<kotlin.Any>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): V
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun nextIndex(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class Values : java.util.AbstractCollection<V> {
                private constructor Values()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: V): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<V>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<V>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        public trait Iterator</*0*/ E> : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public abstract fun hasNext(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun next(): E
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun remove(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait List</*0*/ E> : kotlin.MutableCollection<E> {
            public abstract override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
            public abstract fun add(/*0*/ index: kotlin.Int, /*1*/ element: E): kotlin.Unit
            public abstract override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public abstract fun addAll(/*0*/ index: kotlin.Int, /*1*/ c: kotlin.Collection<E>): kotlin.Boolean
            public abstract override /*1*/ fun clear(): kotlin.Unit
            public abstract override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract fun get(/*0*/ index: kotlin.Int): E
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun indexOf(/*0*/ p0: kotlin.Any?): kotlin.Int
            public abstract override /*1*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ fun iterator(): kotlin.MutableIterator<E>
            public abstract fun lastIndexOf(/*0*/ p0: kotlin.Any?): kotlin.Int
            public abstract fun listIterator(): kotlin.MutableListIterator<E>
            public abstract fun listIterator(/*0*/ index: kotlin.Int): kotlin.MutableListIterator<E>
            public abstract override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract fun remove(/*0*/ index: kotlin.Int): E
            public abstract override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract fun set(/*0*/ index: kotlin.Int, /*1*/ element: E): E
            public abstract override /*1*/ fun size(): kotlin.Int
            public abstract fun subList(/*0*/ fromIndex: kotlin.Int, /*1*/ toIndex: kotlin.Int): kotlin.List<E>
            public abstract fun toArray(): kotlin.Array<kotlin.Any?>
            public abstract fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait ListIterator</*0*/ E> : kotlin.MutableIterator<E> {
            public abstract fun add(/*0*/ p0: E): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun hasNext(): kotlin.Boolean
            public abstract fun hasPrevious(): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract override /*1*/ fun next(): E
            public abstract fun nextIndex(): kotlin.Int
            public abstract fun previous(): E?
            public abstract fun previousIndex(): kotlin.Int
            public abstract override /*1*/ fun remove(): kotlin.Unit
            public abstract fun set(/*0*/ p0: E?): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public final class Locale : java.lang.Cloneable, java.io.Serializable {
            public constructor Locale(/*0*/ p0: kotlin.String)
            public constructor Locale(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String)
            public constructor Locale(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String, /*2*/ p2: kotlin.String)
            private constructor Locale(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.Boolean)
            public open override /*2*/ fun clone(): kotlin.Any
            public open override /*2*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open fun getCountry(): kotlin.String
            public final fun getDisplayCountry(): kotlin.String
            public open fun getDisplayCountry(/*0*/ p0: java.util.Locale): kotlin.String
            public final fun getDisplayLanguage(): kotlin.String
            public open fun getDisplayLanguage(/*0*/ p0: java.util.Locale): kotlin.String
            public final fun getDisplayName(): kotlin.String
            public open fun getDisplayName(/*0*/ p0: java.util.Locale): kotlin.String
            public final fun getDisplayVariant(): kotlin.String
            public open fun getDisplayVariant(/*0*/ p0: java.util.Locale): kotlin.String
            public open fun getISO3Country(): kotlin.String
            public open fun getISO3Language(): kotlin.String
            public open fun getLanguage(): kotlin.String
            public open fun getVariant(): kotlin.String
            public open override /*2*/ fun hashCode(): kotlin.Int
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public final override /*2*/ fun toString(): kotlin.String
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            private open class LocaleNameGetter {
                private constructor LocaleNameGetter()
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open fun getObject(/*0*/ p0: [ERROR : Unresolved java classifier: LocaleNameProvider]?, /*1*/ p1: java.util.Locale?, /*2*/ p2: kotlin.String?, /*3*/ vararg p3: kotlin.Any? /*kotlin.Array<kotlin.Any?>*/): kotlin.String?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        public trait Map</*0*/ K, /*1*/ V> : java.lang.Object {
            public abstract fun clear(): kotlin.Unit
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public abstract fun containsKey(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public abstract fun containsValue(/*0*/ p0: kotlin.Any?): kotlin.Boolean
            public abstract fun entrySet(): kotlin.Set<kotlin.Map.Entry<K, V>>
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public abstract fun get(/*0*/ p0: kotlin.Any?): V?
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun isEmpty(): kotlin.Boolean
            public abstract fun keySet(): kotlin.Set<K>
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public abstract fun put(/*0*/ key: K, /*1*/ value: V): V?
            public abstract fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public abstract fun remove(/*0*/ p0: kotlin.Any?): V?
            public abstract fun size(): kotlin.Int
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public abstract fun values(): kotlin.Collection<V>
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public trait Entry</*0*/ K, /*1*/ V> : java.lang.Object {
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public abstract fun getKey(): K
                public abstract fun getValue(): V
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public abstract fun setValue(/*0*/ value: V): V
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class NoSuchElementException : java.lang.RuntimeException {
            public constructor NoSuchElementException()
            public constructor NoSuchElementException(/*0*/ p0: kotlin.String?)
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public final override /*1*/ /*fake_override*/ fun getCause(): kotlin.Throwable?
            public final override /*1*/ /*fake_override*/ fun getMessage(): kotlin.String?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun printStackTrace(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class Properties {
            public constructor Properties()
            public constructor Properties(/*0*/ p0: java.util.Properties?)
            protected/*protected and package*/ final var defaults: java.util.Properties?
            public open fun getProperty(/*0*/ p0: kotlin.String): kotlin.String?
            public open fun getProperty(/*0*/ p0: kotlin.String, /*1*/ p1: kotlin.String?): kotlin.String?
            public open fun list(/*0*/ p0: [ERROR : Unresolved java classifier: PrintWriter]): kotlin.Unit
            public open fun list(/*0*/ p0: java.io.PrintStream): kotlin.Unit
            public open fun load(/*0*/ p0: java.io.InputStream?): kotlin.Unit
            public open fun load(/*0*/ p0: java.io.Reader?): kotlin.Unit
            public open fun loadFromXML(/*0*/ p0: java.io.InputStream): kotlin.Unit
            public open fun propertyNames(): java.util.Enumeration<out kotlin.Any?>
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun save(/*0*/ p0: java.io.OutputStream?, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun setProperty(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?): kotlin.Any?
            public open fun store(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun store(/*0*/ p0: java.io.Writer, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun storeToXML(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?): kotlin.Unit
            public open fun storeToXML(/*0*/ p0: java.io.OutputStream, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): kotlin.Unit
            public open fun stringPropertyNames(): kotlin.MutableSet<kotlin.String>?
            
            public/*package*/ open inner class LineReader : java.lang.Object {
                public constructor LineReader(/*0*/ p2: java.io.InputStream?)
                public constructor LineReader(/*0*/ p2: java.io.Reader?)
                public/*package*/ final var inByteBuf: kotlin.ByteArray?
                public/*package*/ final var inCharBuf: kotlin.CharArray?
                public/*package*/ final var inLimit: kotlin.Int
                public/*package*/ final var inOff: kotlin.Int
                public/*package*/ final var inStream: java.io.InputStream?
                public/*package*/ final var lineBuf: kotlin.CharArray?
                public/*package*/ final var reader: java.io.Reader?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public/*package*/ open fun readLine(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
        }
        
        public open class Random : java.io.Serializable {
            public constructor Random()
            public constructor Random(/*0*/ p0: kotlin.Long)
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            protected/*protected and package*/ open fun next(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun nextBoolean(): kotlin.Boolean
            public open fun nextBytes(/*0*/ p0: kotlin.ByteArray): kotlin.Unit
            public open fun nextDouble(): kotlin.Double
            public open fun nextFloat(): kotlin.Float
            public open fun nextGaussian(): kotlin.Double
            public open fun nextInt(): kotlin.Int
            public open fun nextInt(/*0*/ p0: kotlin.Int): kotlin.Int
            public open fun nextLong(): kotlin.Long
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun setSeed(/*0*/ p0: kotlin.Long): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait RandomAccess : java.lang.Object {
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
        }
        
        public trait Set</*0*/ E> : kotlin.MutableCollection<E> {
            public abstract override /*1*/ fun add(/*0*/ e: E): kotlin.Boolean
            public abstract override /*1*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public abstract override /*1*/ fun clear(): kotlin.Unit
            public abstract override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract override /*1*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ fun iterator(): kotlin.MutableIterator<E>
            public abstract override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ fun size(): kotlin.Int
            public abstract fun toArray(): kotlin.Array<kotlin.Any?>
            public abstract fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public trait SortedMap</*0*/ K, /*1*/ V> : kotlin.MutableMap<K, V> {
            public abstract override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
            public abstract fun comparator(): java.util.Comparator<in K>
            public abstract override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract fun firstKey(): K?
            public abstract override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun headMap(/*0*/ toKey: K): java.util.SortedMap<K, V>
            public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ fun keySet(): kotlin.MutableSet<K>
            public abstract fun lastKey(): K?
            public abstract override /*1*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
            public abstract override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public abstract override /*1*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
            public abstract override /*1*/ /*fake_override*/ fun size(): kotlin.Int
            public abstract fun subMap(/*0*/ fromKey: K, /*1*/ toKey: K): java.util.SortedMap<K, V>
            public abstract fun tailMap(/*0*/ fromKey: K): java.util.SortedMap<K, V>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            public abstract override /*1*/ fun values(): kotlin.MutableCollection<V>
        }
        
        public trait SortedSet</*0*/ E> : kotlin.MutableSet<E> {
            public abstract override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
            public abstract fun comparator(): java.util.Comparator<in E>
            public abstract override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            public abstract fun first(): E?
            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public abstract fun headSet(/*0*/ toElement: E): java.util.SortedSet<E>
            public abstract override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<E>
            public abstract fun last(): E?
            public abstract override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public abstract override /*1*/ /*fake_override*/ fun size(): kotlin.Int
            public abstract fun subSet(/*0*/ fromElement: E, /*1*/ toElement: E): java.util.SortedSet<E>
            public abstract fun tailSet(/*0*/ fromElement: E): java.util.SortedSet<E>
            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
        }
        
        public open class TreeMap</*0*/ K, /*1*/ V> : java.util.AbstractMap<K, V>, java.lang.Cloneable, java.io.Serializable {
            public constructor TreeMap</*0*/ K, /*1*/ V>()
            public /*synthesized*/ constructor TreeMap</*0*/ K, /*1*/ V>(/*0*/ p0: ((K, K) -> kotlin.Int)?)
            public constructor TreeMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.Comparator<in K>?)
            public constructor TreeMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.SortedMap<K, out V>)
            public constructor TreeMap</*0*/ K, /*1*/ V>(/*0*/ p0: kotlin.Map<out K, V>)
            public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
            public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
            public/*package*/ open fun addAllForTreeSet(/*0*/ p0: java.util.SortedSet<out K>?, /*1*/ p1: V?): kotlin.Unit
            public open fun ceilingEntry(/*0*/ p0: K): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun ceilingKey(/*0*/ p0: K): K?
            public open override /*1*/ fun clear(): kotlin.Unit
            public open override /*3*/ fun clone(): kotlin.Any
            public open fun comparator(): java.util.Comparator<in K>?
            public/*package*/ final fun compare(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Int
            public open override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
            public open override /*1*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
            public/*package*/ open fun descendingKeyIterator(): kotlin.MutableIterator<K>?
            public open fun descendingKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
            public open fun descendingMap(): [ERROR : Unresolved java classifier: NavigableMap<K, V>]
            public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
            public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
            protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
            public open fun firstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun firstKey(): K?
            public open fun floorEntry(/*0*/ p0: K): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun floorKey(/*0*/ p0: K): K?
            public open override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
            public/*package*/ final fun getCeilingEntry(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
            public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
            public/*package*/ final fun getEntry(/*0*/ p0: kotlin.Any?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getEntryUsingComparator(/*0*/ p0: kotlin.Any?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getFirstEntry(): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getFloorEntry(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getHigherEntry(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getLastEntry(): java.util.TreeMap.Entry<K, V>?
            public/*package*/ final fun getLowerEntry(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
            public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
            public open fun headMap(/*0*/ p0: K): java.util.SortedMap<K, V>
            public open fun headMap(/*0*/ p0: K, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]
            public open fun higherEntry(/*0*/ p0: K): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun higherKey(/*0*/ p0: K): K?
            public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
            public/*package*/ open fun keyIterator(): kotlin.MutableIterator<K>?
            public open override /*1*/ fun keySet(): kotlin.MutableSet<K>
            public open fun lastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun lastKey(): K?
            public open fun lowerEntry(/*0*/ p0: K): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun lowerKey(/*0*/ p0: K): K?
            public open fun navigableKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]
            public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
            public open fun pollFirstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
            public open fun pollLastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
            public open override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
            public open override /*1*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
            public/*package*/ open fun readTreeSet(/*0*/ p0: kotlin.Int, /*1*/ p1: java.io.ObjectInputStream?, /*2*/ p2: V?): kotlin.Unit
            public open override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
            public open override /*1*/ fun size(): kotlin.Int
            public open fun subMap(/*0*/ p0: K, /*1*/ p1: K): java.util.SortedMap<K, V>
            public open fun subMap(/*0*/ p0: K, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K, /*3*/ p3: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]
            public open fun tailMap(/*0*/ p0: K): java.util.SortedMap<K, V>
            public open fun tailMap(/*0*/ p0: K, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]
            public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
            public open override /*1*/ fun values(): kotlin.MutableCollection<V>
            public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
            public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            
            public/*package*/ final class AscendingSubMap</*0*/ K, /*1*/ V> : java.util.TreeMap.NavigableSubMap<K, V> {
                public/*package*/ constructor AscendingSubMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.TreeMap<K, V>?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K?, /*3*/ p3: kotlin.Boolean, /*4*/ p4: kotlin.Boolean, /*5*/ p5: K?, /*6*/ p6: kotlin.Boolean)
                public/*package*/ final override /*1*/ /*fake_override*/ var descendingMapView: [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public/*package*/ final override /*1*/ /*fake_override*/ var entrySetView: java.util.TreeMap.NavigableSubMap.EntrySetView?
                public/*package*/ final override /*1*/ /*fake_override*/ val fromStart: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ val hi: K?
                public/*package*/ final override /*1*/ /*fake_override*/ val hiInclusive: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ val lo: K?
                public/*package*/ final override /*1*/ /*fake_override*/ val loInclusive: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ val m: java.util.TreeMap<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var navigableKeySetView: java.util.TreeMap.KeySet<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ val toEnd: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHighFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLowFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLowest(): java.util.TreeMap.Entry<K, V>?
                public final override /*1*/ /*fake_override*/ fun ceilingEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun ceilingKey(/*0*/ p0: K?): K?
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open fun comparator(): java.util.Comparator<in K>?
                public final override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public/*package*/ open override /*1*/ fun descendingKeyIterator(): kotlin.MutableIterator<K>?
                public open override /*1*/ /*fake_override*/ fun descendingKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public open fun descendingMap(): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun firstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun firstKey(): K?
                public final override /*1*/ /*fake_override*/ fun floorEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun floorKey(/*0*/ p0: K?): K?
                public final override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun headMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public open fun headMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public final override /*1*/ /*fake_override*/ fun higherEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun higherKey(/*0*/ p0: K?): K?
                public/*package*/ final override /*1*/ /*fake_override*/ fun inClosedRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun inRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun inRange(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public/*package*/ open override /*1*/ fun keyIterator(): kotlin.MutableIterator<K>?
                public final override /*1*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun lastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun lastKey(): K?
                public final override /*1*/ /*fake_override*/ fun lowerEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun lowerKey(/*0*/ p0: K?): K?
                public final override /*1*/ /*fake_override*/ fun navigableKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun pollFirstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun pollLastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                public/*package*/ open override /*1*/ fun subCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subLowest(): java.util.TreeMap.Entry<K, V>?
                public final override /*1*/ /*fake_override*/ fun subMap(/*0*/ p0: K?, /*1*/ p1: K?): java.util.SortedMap<K, V>?
                public open fun subMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K?, /*3*/ p3: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public final override /*1*/ /*fake_override*/ fun tailMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public open fun tailMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ final override /*1*/ /*fake_override*/ fun tooHigh(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun tooLow(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ final inner class AscendingEntrySetView : java.util.TreeMap.NavigableSubMap.EntrySetView {
                    public/*package*/ constructor AscendingEntrySetView()
                    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                    public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }
            
            public/*package*/ final inner class DescendingKeyIterator : java.util.TreeMap.PrivateEntryIterator<K> {
                public/*package*/ constructor DescendingKeyIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): K
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ final class DescendingSubMap</*0*/ K, /*1*/ V> : java.util.TreeMap.NavigableSubMap<K, V> {
                public/*package*/ constructor DescendingSubMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.TreeMap<K, V>?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K?, /*3*/ p3: kotlin.Boolean, /*4*/ p4: kotlin.Boolean, /*5*/ p5: K?, /*6*/ p6: kotlin.Boolean)
                public/*package*/ final override /*1*/ /*fake_override*/ var descendingMapView: [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public/*package*/ final override /*1*/ /*fake_override*/ var entrySetView: java.util.TreeMap.NavigableSubMap.EntrySetView?
                public/*package*/ final override /*1*/ /*fake_override*/ val fromStart: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ val hi: K?
                public/*package*/ final override /*1*/ /*fake_override*/ val hiInclusive: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ val lo: K?
                public/*package*/ final override /*1*/ /*fake_override*/ val loInclusive: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ val m: java.util.TreeMap<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var navigableKeySetView: java.util.TreeMap.KeySet<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ val toEnd: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHighFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLowFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun absLowest(): java.util.TreeMap.Entry<K, V>?
                public final override /*1*/ /*fake_override*/ fun ceilingEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun ceilingKey(/*0*/ p0: K?): K?
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open fun comparator(): java.util.Comparator<in K>?
                public final override /*1*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public/*package*/ open override /*1*/ fun descendingKeyIterator(): kotlin.MutableIterator<K>?
                public open override /*1*/ /*fake_override*/ fun descendingKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public open fun descendingMap(): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public open override /*1*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun firstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun firstKey(): K?
                public final override /*1*/ /*fake_override*/ fun floorEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun floorKey(/*0*/ p0: K?): K?
                public final override /*1*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun headMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public open fun headMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public final override /*1*/ /*fake_override*/ fun higherEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun higherKey(/*0*/ p0: K?): K?
                public/*package*/ final override /*1*/ /*fake_override*/ fun inClosedRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun inRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun inRange(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public/*package*/ open override /*1*/ fun keyIterator(): kotlin.MutableIterator<K>?
                public final override /*1*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public final override /*1*/ /*fake_override*/ fun lastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun lastKey(): K?
                public final override /*1*/ /*fake_override*/ fun lowerEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun lowerKey(/*0*/ p0: K?): K?
                public final override /*1*/ /*fake_override*/ fun navigableKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun pollFirstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun pollLastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                public/*package*/ open override /*1*/ fun subCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ open override /*1*/ fun subLowest(): java.util.TreeMap.Entry<K, V>?
                public final override /*1*/ /*fake_override*/ fun subMap(/*0*/ p0: K?, /*1*/ p1: K?): java.util.SortedMap<K, V>?
                public open fun subMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K?, /*3*/ p3: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public final override /*1*/ /*fake_override*/ fun tailMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public open fun tailMap(/*0*/ p0: K?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ final override /*1*/ /*fake_override*/ fun tooHigh(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ fun tooLow(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ final inner class DescendingEntrySetView : java.util.TreeMap.NavigableSubMap.EntrySetView {
                    public/*package*/ constructor DescendingEntrySetView()
                    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                    public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                    public open override /*1*/ /*fake_override*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun size(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }
            
            public/*package*/ final class Entry</*0*/ K, /*1*/ V> : kotlin.MutableMap.MutableEntry<K, V> {
                public/*package*/ constructor Entry</*0*/ K, /*1*/ V>(/*0*/ p0: K?, /*1*/ p1: V?, /*2*/ p2: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final var color: kotlin.Boolean
                public/*package*/ final var key: K?
                public/*package*/ final var left: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final var parent: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final var right: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final var value: V?
                public open override /*1*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ fun getKey(): K
                public open override /*1*/ fun getValue(): V
                public open override /*1*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun setValue(/*0*/ value: V): V
                public open override /*1*/ fun toString(): kotlin.String
            }
            
            public/*package*/ final inner class EntryIterator : java.util.TreeMap.PrivateEntryIterator<kotlin.Map.Entry<K, V>> {
                public/*package*/ constructor EntryIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): kotlin.Map.Entry<K, V>
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ open inner class EntrySet : java.util.AbstractSet<kotlin.Map.Entry<K, V>> {
                public/*package*/ constructor EntrySet()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ final inner class KeyIterator : java.util.TreeMap.PrivateEntryIterator<K> {
                public/*package*/ constructor KeyIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): K
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ final class KeySet</*0*/ E> : java.util.AbstractSet<E> {
                public/*package*/ constructor KeySet</*0*/ E>(/*0*/ p0: [ERROR : Unresolved java classifier: NavigableMap<E, Object>]?)
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: E): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<E>): kotlin.Boolean
                public open fun ceiling(/*0*/ p0: E?): E?
                public open override /*1*/ fun clear(): kotlin.Unit
                public open fun comparator(): java.util.Comparator<in E>?
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open fun descendingIterator(): kotlin.MutableIterator<E>?
                public open fun descendingSet(): [ERROR : Unresolved java classifier: NavigableSet<E>]?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open fun first(): E?
                public open fun floor(/*0*/ p0: E?): E?
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open fun headSet(/*0*/ p0: E?): java.util.SortedSet<E>?
                public open fun headSet(/*0*/ p0: E?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableSet<E>]?
                public open fun higher(/*0*/ p0: E?): E?
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<E>
                public open fun last(): E?
                public open fun lower(/*0*/ p0: E?): E?
                public open fun pollFirst(): E?
                public open fun pollLast(): E?
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open fun subSet(/*0*/ p0: E?, /*1*/ p1: E?): java.util.SortedSet<E>?
                public open fun subSet(/*0*/ p0: E?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: E?, /*3*/ p3: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableSet<E>]?
                public open fun tailSet(/*0*/ p0: E?): java.util.SortedSet<E>?
                public open fun tailSet(/*0*/ p0: E?, /*1*/ p1: kotlin.Boolean): [ERROR : Unresolved java classifier: NavigableSet<E>]?
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ abstract class NavigableSubMap</*0*/ K, /*1*/ V> : java.util.AbstractMap<K, V>, java.io.Serializable {
                public/*package*/ constructor NavigableSubMap</*0*/ K, /*1*/ V>(/*0*/ p0: java.util.TreeMap<K, V>?, /*1*/ p1: kotlin.Boolean, /*2*/ p2: K?, /*3*/ p3: kotlin.Boolean, /*4*/ p4: kotlin.Boolean, /*5*/ p5: K?, /*6*/ p6: kotlin.Boolean)
                public/*package*/ final var descendingMapView: [ERROR : Unresolved java classifier: NavigableMap<K, V>]?
                public/*package*/ final var entrySetView: java.util.TreeMap.NavigableSubMap.EntrySetView?
                public/*package*/ final val fromStart: kotlin.Boolean
                public/*package*/ final val hi: K?
                public/*package*/ final val hiInclusive: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
                public/*package*/ final val lo: K?
                public/*package*/ final val loInclusive: kotlin.Boolean
                public/*package*/ final val m: java.util.TreeMap<K, V>?
                public/*package*/ final var navigableKeySetView: java.util.TreeMap.KeySet<K>?
                public/*package*/ final val toEnd: kotlin.Boolean
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
                public/*package*/ final fun absCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absHighFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absLowFence(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun absLowest(): java.util.TreeMap.Entry<K, V>?
                public final fun ceilingEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun ceilingKey(/*0*/ p0: K?): K?
                public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public final override /*1*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public/*package*/ abstract fun descendingKeyIterator(): kotlin.MutableIterator<K>?
                public open fun descendingKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public abstract override /*1*/ /*fake_override*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final fun firstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun firstKey(): K?
                public final fun floorEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun floorKey(/*0*/ p0: K?): K?
                public final override /*1*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final fun headMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public final fun higherEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun higherKey(/*0*/ p0: K?): K?
                public/*package*/ final fun inClosedRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final fun inRange(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final fun inRange(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                public open override /*1*/ fun isEmpty(): kotlin.Boolean
                public/*package*/ abstract fun keyIterator(): kotlin.MutableIterator<K>?
                public final override /*1*/ fun keySet(): kotlin.MutableSet<K>
                public final fun lastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun lastKey(): K?
                public final fun lowerEntry(/*0*/ p0: K?): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun lowerKey(/*0*/ p0: K?): K?
                public final fun navigableKeySet(): [ERROR : Unresolved java classifier: NavigableSet<K>]?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public final fun pollFirstEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final fun pollLastEntry(): kotlin.MutableMap.MutableEntry<K, V>?
                public final override /*1*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*1*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public final override /*1*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*1*/ fun size(): kotlin.Int
                public/*package*/ abstract fun subCeiling(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ abstract fun subFloor(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ abstract fun subHigher(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ abstract fun subHighest(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ abstract fun subLower(/*0*/ p0: K?): java.util.TreeMap.Entry<K, V>?
                public/*package*/ abstract fun subLowest(): java.util.TreeMap.Entry<K, V>?
                public final fun subMap(/*0*/ p0: K?, /*1*/ p1: K?): java.util.SortedMap<K, V>?
                public final fun tailMap(/*0*/ p0: K?): java.util.SortedMap<K, V>?
                public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String
                public/*package*/ final fun tooHigh(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public/*package*/ final fun tooLow(/*0*/ p0: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                
                public/*package*/ final inner class DescendingSubMapEntryIterator : java.util.TreeMap.NavigableSubMap.SubMapIterator<kotlin.Map.Entry<K, V>> {
                    public/*package*/ constructor DescendingSubMapEntryIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?, /*1*/ p1: java.util.TreeMap.Entry<K, V>?)
                    public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                    public/*package*/ final override /*1*/ /*fake_override*/ val fenceKey: K?
                    public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun next(): kotlin.Map.Entry<K, V>
                    public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ fun remove(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeAscending(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeDescending(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                public/*package*/ final inner class DescendingSubMapKeyIterator : java.util.TreeMap.NavigableSubMap.SubMapIterator<K> {
                    public/*package*/ constructor DescendingSubMapKeyIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?, /*1*/ p1: java.util.TreeMap.Entry<K, V>?)
                    public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                    public/*package*/ final override /*1*/ /*fake_override*/ val fenceKey: K?
                    public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun next(): K
                    public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ fun remove(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeAscending(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeDescending(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                public/*package*/ abstract inner class EntrySetView : java.util.AbstractSet<kotlin.Map.Entry<K, V>> {
                    public/*package*/ constructor EntrySetView()
                    public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: kotlin.Map.Entry<K, V>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<kotlin.Map.Entry<K, V>>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun clear(): kotlin.Unit
                    public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun isEmpty(): kotlin.Boolean
                    public abstract override /*1*/ /*fake_override*/ fun iterator(): kotlin.MutableIterator<kotlin.Map.Entry<K, V>>
                    public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                    public open override /*1*/ fun size(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                public/*package*/ final inner class SubMapEntryIterator : java.util.TreeMap.NavigableSubMap.SubMapIterator<kotlin.Map.Entry<K, V>> {
                    public/*package*/ constructor SubMapEntryIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?, /*1*/ p1: java.util.TreeMap.Entry<K, V>?)
                    public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                    public/*package*/ final override /*1*/ /*fake_override*/ val fenceKey: K?
                    public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun next(): kotlin.Map.Entry<K, V>
                    public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ fun remove(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeAscending(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeDescending(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                public/*package*/ abstract inner class SubMapIterator</*0*/ T> : kotlin.MutableIterator<T> {
                    public/*package*/ constructor SubMapIterator</*0*/ T>(/*0*/ p0: java.util.TreeMap.Entry<K, V>?, /*1*/ p1: java.util.TreeMap.Entry<K, V>?)
                    public/*package*/ final var expectedModCount: kotlin.Int
                    public/*package*/ final val fenceKey: K?
                    public/*package*/ final var lastReturned: java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final var next: java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public final override /*1*/ fun hasNext(): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public abstract override /*1*/ /*fake_override*/ fun next(): T
                    public/*package*/ final fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                    public abstract override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                    public/*package*/ final fun removeAscending(): kotlin.Unit
                    public/*package*/ final fun removeDescending(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
                
                public/*package*/ final inner class SubMapKeyIterator : java.util.TreeMap.NavigableSubMap.SubMapIterator<K> {
                    public/*package*/ constructor SubMapKeyIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?, /*1*/ p1: java.util.TreeMap.Entry<K, V>?)
                    public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                    public/*package*/ final override /*1*/ /*fake_override*/ val fenceKey: K?
                    public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open override /*1*/ fun next(): K
                    public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                    public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                    public open override /*1*/ fun remove(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeAscending(): kotlin.Unit
                    public/*package*/ final override /*1*/ /*fake_override*/ fun removeDescending(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                }
            }
            
            public/*package*/ abstract inner class PrivateEntryIterator</*0*/ T> : kotlin.MutableIterator<T> {
                public/*package*/ constructor PrivateEntryIterator</*0*/ T>(/*0*/ p0: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final var expectedModCount: kotlin.Int
                public/*package*/ final var lastReturned: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final var next: java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public abstract override /*1*/ /*fake_override*/ fun next(): T
                public/*package*/ final fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            private open inner class SubMap : java.util.AbstractMap<K, V>, java.util.SortedMap<K, V>, java.io.Serializable {
                private constructor SubMap()
                public/*package*/ final override /*1*/ /*fake_override*/ var keySet: kotlin.Set<K>?
                public/*package*/ final override /*1*/ /*fake_override*/ var values: kotlin.Collection<V>?
                public open override /*2*/ /*fake_override*/ fun clear(): kotlin.Unit
                protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ fun comparator(): java.util.Comparator<in K>
                public open override /*2*/ /*fake_override*/ fun containsKey(/*0*/ key: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun containsValue(/*0*/ value: kotlin.Any?): kotlin.Boolean
                public open override /*2*/ fun entrySet(): kotlin.MutableSet<kotlin.MutableMap.MutableEntry<K, V>>
                public open override /*3*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public open override /*1*/ fun firstKey(): K?
                public open override /*2*/ /*fake_override*/ fun get(/*0*/ key: kotlin.Any?): V?
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*3*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun headMap(/*0*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*2*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*2*/ /*fake_override*/ fun keySet(): kotlin.MutableSet<K>
                public open override /*1*/ fun lastKey(): K?
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun put(/*0*/ key: K, /*1*/ value: V): V?
                public open override /*2*/ /*fake_override*/ fun putAll(/*0*/ m: kotlin.Map<out K, V>): kotlin.Unit
                public open override /*2*/ /*fake_override*/ fun remove(/*0*/ key: kotlin.Any?): V?
                public open override /*2*/ /*fake_override*/ fun size(): kotlin.Int
                public open override /*1*/ fun subMap(/*0*/ fromKey: K, /*1*/ toKey: K): java.util.SortedMap<K, V>
                public open override /*1*/ fun tailMap(/*0*/ fromKey: K): java.util.SortedMap<K, V>
                public open override /*3*/ /*fake_override*/ fun toString(): kotlin.String
                public open override /*2*/ /*fake_override*/ fun values(): kotlin.MutableCollection<V>
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public/*package*/ final inner class ValueIterator : java.util.TreeMap.PrivateEntryIterator<V> {
                public/*package*/ constructor ValueIterator(/*0*/ p0: java.util.TreeMap.Entry<K, V>?)
                public/*package*/ final override /*1*/ /*fake_override*/ var expectedModCount: kotlin.Int
                public/*package*/ final override /*1*/ /*fake_override*/ var lastReturned: java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ var next: java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public final override /*1*/ /*fake_override*/ fun hasNext(): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ fun next(): V
                public/*package*/ final override /*1*/ /*fake_override*/ fun nextEntry(): java.util.TreeMap.Entry<K, V>?
                public/*package*/ final override /*1*/ /*fake_override*/ fun prevEntry(): java.util.TreeMap.Entry<K, V>?
                public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
            
            public/*package*/ open inner class Values : java.util.AbstractCollection<V> {
                public/*package*/ constructor Values()
                public open override /*1*/ /*fake_override*/ fun add(/*0*/ e: V): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun addAll(/*0*/ c: kotlin.Collection<V>): kotlin.Boolean
                public open override /*1*/ fun clear(): kotlin.Unit
                public open override /*1*/ fun contains(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun containsAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun isEmpty(): kotlin.Boolean
                public open override /*1*/ fun iterator(): kotlin.MutableIterator<V>
                public open override /*1*/ fun remove(/*0*/ o: kotlin.Any?): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun removeAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ /*fake_override*/ fun retainAll(/*0*/ c: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
                public open override /*1*/ fun size(): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun toArray(): kotlin.Array<kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun </*0*/ T> toArray(/*0*/ a: kotlin.Array<out T>): kotlin.Array<T>
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
            }
        }
        
        package java.util.AbstractCollection {
        }
        
        package java.util.AbstractMap {
            
            package java.util.AbstractMap.SimpleEntry {
            }
            
            package java.util.AbstractMap.SimpleImmutableEntry {
            }
        }
        
        package java.util.ArrayList {
        }
        
        package java.util.Arrays {
            public open fun </*0*/ T> asList(/*0*/ vararg a: T /*kotlin.Array<T>*/): kotlin.List<T>
            public /*synthesized*/ fun </*0*/ T> binarySearch(/*0*/ a: kotlin.Array<out T>, /*1*/ key: T, /*2*/ c: ((T, T) -> kotlin.Int)?): kotlin.Int
            public open fun </*0*/ T> binarySearch(/*0*/ a: kotlin.Array<out T>, /*1*/ key: T, /*2*/ c: java.util.Comparator<in T>?): kotlin.Int
            public /*synthesized*/ fun </*0*/ T> binarySearch(/*0*/ a: kotlin.Array<out T>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: T, /*4*/ c: ((T, T) -> kotlin.Int)?): kotlin.Int
            public open fun </*0*/ T> binarySearch(/*0*/ a: kotlin.Array<out T>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: T, /*4*/ c: java.util.Comparator<in T>?): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.Array<out kotlin.Any?>, /*1*/ key: kotlin.Any?): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.Array<out kotlin.Any?>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Any?): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.ByteArray, /*1*/ key: kotlin.Byte): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.ByteArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Byte): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.CharArray, /*1*/ key: kotlin.Char): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.CharArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Char): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.DoubleArray, /*1*/ key: kotlin.Double): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.DoubleArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Double): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.FloatArray, /*1*/ key: kotlin.Float): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.FloatArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Float): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.IntArray, /*1*/ key: kotlin.Int): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.IntArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Int): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.LongArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Long): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.LongArray, /*1*/ key: kotlin.Long): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.ShortArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ key: kotlin.Short): kotlin.Int
            public open fun binarySearch(/*0*/ a: kotlin.ShortArray, /*1*/ key: kotlin.Short): kotlin.Int
            public open fun </*0*/ T> copyOf(/*0*/ original: kotlin.Array<out T>, /*1*/ newLength: kotlin.Int): kotlin.Array<T?>
            public open fun </*0*/ T, /*1*/ U> copyOf(/*0*/ original: kotlin.Array<out U>, /*1*/ newLength: kotlin.Int, /*2*/ newType: java.lang.Class<out kotlin.Array<T>>): kotlin.Array<T>
            public open fun copyOf(/*0*/ original: kotlin.BooleanArray, /*1*/ newLength: kotlin.Int): kotlin.BooleanArray
            public open fun copyOf(/*0*/ original: kotlin.ByteArray, /*1*/ newLength: kotlin.Int): kotlin.ByteArray
            public open fun copyOf(/*0*/ original: kotlin.CharArray, /*1*/ newLength: kotlin.Int): kotlin.CharArray
            public open fun copyOf(/*0*/ original: kotlin.DoubleArray, /*1*/ newLength: kotlin.Int): kotlin.DoubleArray
            public open fun copyOf(/*0*/ original: kotlin.FloatArray, /*1*/ newLength: kotlin.Int): kotlin.FloatArray
            public open fun copyOf(/*0*/ original: kotlin.IntArray, /*1*/ newLength: kotlin.Int): kotlin.IntArray
            public open fun copyOf(/*0*/ original: kotlin.LongArray, /*1*/ newLength: kotlin.Int): kotlin.LongArray
            public open fun copyOf(/*0*/ original: kotlin.ShortArray, /*1*/ newLength: kotlin.Int): kotlin.ShortArray
            public open fun </*0*/ T> copyOfRange(/*0*/ original: kotlin.Array<out T>, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.Array<T>
            public open fun </*0*/ T, /*1*/ U> copyOfRange(/*0*/ original: kotlin.Array<out U>, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int, /*3*/ newType: java.lang.Class<out kotlin.Array<T>>): kotlin.Array<T>
            public open fun copyOfRange(/*0*/ original: kotlin.BooleanArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.BooleanArray
            public open fun copyOfRange(/*0*/ original: kotlin.ByteArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.ByteArray
            public open fun copyOfRange(/*0*/ original: kotlin.CharArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.CharArray
            public open fun copyOfRange(/*0*/ original: kotlin.DoubleArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.DoubleArray
            public open fun copyOfRange(/*0*/ original: kotlin.FloatArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.FloatArray
            public open fun copyOfRange(/*0*/ original: kotlin.IntArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.IntArray
            public open fun copyOfRange(/*0*/ original: kotlin.LongArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.LongArray
            public open fun copyOfRange(/*0*/ original: kotlin.ShortArray, /*1*/ from: kotlin.Int, /*2*/ to: kotlin.Int): kotlin.ShortArray
            public open fun deepEquals(/*0*/ p0: kotlin.Array<out kotlin.Any>?, /*1*/ p1: kotlin.Array<out kotlin.Any>?): kotlin.Boolean
            public open fun deepHashCode(/*0*/ p0: kotlin.Array<out kotlin.Any>?): kotlin.Int
            public open fun deepToString(/*0*/ p0: kotlin.Array<out kotlin.Any>?): kotlin.String
            public open fun equals(/*0*/ a: kotlin.Array<out kotlin.Any?>?, /*1*/ a2: kotlin.Array<out kotlin.Any?>?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.BooleanArray?, /*1*/ p1: kotlin.BooleanArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.ByteArray?, /*1*/ p1: kotlin.ByteArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.CharArray?, /*1*/ p1: kotlin.CharArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.DoubleArray?, /*1*/ p1: kotlin.DoubleArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.FloatArray?, /*1*/ p1: kotlin.FloatArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.IntArray?, /*1*/ p1: kotlin.IntArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.LongArray?, /*1*/ p1: kotlin.LongArray?): kotlin.Boolean
            public open fun equals(/*0*/ p0: kotlin.ShortArray?, /*1*/ p1: kotlin.ShortArray?): kotlin.Boolean
            public open fun fill(/*0*/ a: kotlin.Array<out kotlin.Any?>, /*1*/ `val`: kotlin.Any?): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.Array<out kotlin.Any?>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Any?): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.BooleanArray, /*1*/ `val`: kotlin.Boolean): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.BooleanArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Boolean): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.ByteArray, /*1*/ `val`: kotlin.Byte): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.ByteArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Byte): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.CharArray, /*1*/ `val`: kotlin.Char): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.CharArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Char): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.DoubleArray, /*1*/ `val`: kotlin.Double): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.DoubleArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Double): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.FloatArray, /*1*/ `val`: kotlin.Float): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.FloatArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Float): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.IntArray, /*1*/ `val`: kotlin.Int): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.IntArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Int): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.LongArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Long): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.LongArray, /*1*/ `val`: kotlin.Long): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.ShortArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ `val`: kotlin.Short): kotlin.Unit
            public open fun fill(/*0*/ a: kotlin.ShortArray, /*1*/ `val`: kotlin.Short): kotlin.Unit
            public open fun hashCode(/*0*/ p0: kotlin.Array<out kotlin.Any>?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.BooleanArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.ByteArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.CharArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.DoubleArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.FloatArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.IntArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.LongArray?): kotlin.Int
            public open fun hashCode(/*0*/ p0: kotlin.ShortArray?): kotlin.Int
            public /*synthesized*/ fun </*0*/ T> sort(/*0*/ a: kotlin.Array<out T>, /*1*/ c: ((T, T) -> kotlin.Int)?): kotlin.Unit
            public open fun </*0*/ T> sort(/*0*/ a: kotlin.Array<out T>, /*1*/ c: java.util.Comparator<in T>?): kotlin.Unit
            public /*synthesized*/ fun </*0*/ T> sort(/*0*/ a: kotlin.Array<out T>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ c: ((T, T) -> kotlin.Int)?): kotlin.Unit
            public open fun </*0*/ T> sort(/*0*/ a: kotlin.Array<out T>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int, /*3*/ c: java.util.Comparator<in T>?): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.Array<out kotlin.Any?>): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.Array<out kotlin.Any?>, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.ByteArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.ByteArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.CharArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.CharArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.DoubleArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.DoubleArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.FloatArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.FloatArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.IntArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.IntArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.LongArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.LongArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.ShortArray): kotlin.Unit
            public open fun sort(/*0*/ a: kotlin.ShortArray, /*1*/ fromIndex: kotlin.Int, /*2*/ toIndex: kotlin.Int): kotlin.Unit
            public open fun toString(/*0*/ a: kotlin.Array<out kotlin.Any?>?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.BooleanArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.ByteArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.CharArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.DoubleArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.FloatArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.IntArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.LongArray?): kotlin.String
            public open fun toString(/*0*/ a: kotlin.ShortArray?): kotlin.String
            
            package java.util.Arrays.ArrayList {
            }
        }
        
        package java.util.Calendar {
            public/*package*/ val ALL_FIELDS: kotlin.Int = 131071
            public val ALL_STYLES: kotlin.Int = 0
            public val AM: kotlin.Int = 0
            public val AM_PM: kotlin.Int = 9
            public/*package*/ val AM_PM_MASK: kotlin.Int = 512
            public val APRIL: kotlin.Int = 3
            public val AUGUST: kotlin.Int = 7
            public val DATE: kotlin.Int = 5
            public/*package*/ val DATE_MASK: kotlin.Int = 32
            public val DAY_OF_MONTH: kotlin.Int = 5
            public/*package*/ val DAY_OF_MONTH_MASK: kotlin.Int = 32
            public val DAY_OF_WEEK: kotlin.Int = 7
            public val DAY_OF_WEEK_IN_MONTH: kotlin.Int = 8
            public/*package*/ val DAY_OF_WEEK_IN_MONTH_MASK: kotlin.Int = 256
            public/*package*/ val DAY_OF_WEEK_MASK: kotlin.Int = 128
            public val DAY_OF_YEAR: kotlin.Int = 6
            public/*package*/ val DAY_OF_YEAR_MASK: kotlin.Int = 64
            public val DECEMBER: kotlin.Int = 11
            public val DST_OFFSET: kotlin.Int = 16
            public/*package*/ val DST_OFFSET_MASK: kotlin.Int = 65536
            public val ERA: kotlin.Int = 0
            public/*package*/ val ERA_MASK: kotlin.Int = 1
            public val FEBRUARY: kotlin.Int = 1
            public val FIELD_COUNT: kotlin.Int = 17
            public val FRIDAY: kotlin.Int = 6
            public val HOUR: kotlin.Int = 10
            public/*package*/ val HOUR_MASK: kotlin.Int = 1024
            public val HOUR_OF_DAY: kotlin.Int = 11
            public/*package*/ val HOUR_OF_DAY_MASK: kotlin.Int = 2048
            public val JANUARY: kotlin.Int = 0
            public val JULY: kotlin.Int = 6
            public val JUNE: kotlin.Int = 5
            public val LONG: kotlin.Int = 2
            public val MARCH: kotlin.Int = 2
            public val MAY: kotlin.Int = 4
            public val MILLISECOND: kotlin.Int = 14
            public/*package*/ val MILLISECOND_MASK: kotlin.Int = 16384
            public val MINUTE: kotlin.Int = 12
            public/*package*/ val MINUTE_MASK: kotlin.Int = 4096
            public val MONDAY: kotlin.Int = 2
            public val MONTH: kotlin.Int = 2
            public/*package*/ val MONTH_MASK: kotlin.Int = 4
            public val NOVEMBER: kotlin.Int = 10
            public val OCTOBER: kotlin.Int = 9
            public val PM: kotlin.Int = 1
            public val SATURDAY: kotlin.Int = 7
            public val SECOND: kotlin.Int = 13
            public/*package*/ val SECOND_MASK: kotlin.Int = 8192
            public val SEPTEMBER: kotlin.Int = 8
            public val SHORT: kotlin.Int = 1
            public val SUNDAY: kotlin.Int = 1
            public val THURSDAY: kotlin.Int = 5
            public val TUESDAY: kotlin.Int = 3
            public val UNDECIMBER: kotlin.Int = 12
            public val WEDNESDAY: kotlin.Int = 4
            public val WEEK_OF_MONTH: kotlin.Int = 4
            public/*package*/ val WEEK_OF_MONTH_MASK: kotlin.Int = 16
            public val WEEK_OF_YEAR: kotlin.Int = 3
            public/*package*/ val WEEK_OF_YEAR_MASK: kotlin.Int = 8
            public val YEAR: kotlin.Int = 1
            public/*package*/ val YEAR_MASK: kotlin.Int = 2
            public val ZONE_OFFSET: kotlin.Int = 15
            public/*package*/ val ZONE_OFFSET_MASK: kotlin.Int = 32768
            public/*package*/ val currentSerialVersion: kotlin.Int = 1
            public/*package*/ val serialVersionUID: kotlin.Long = -1807547505821590642.toLong()
            public open fun getAvailableLocales(): kotlin.Array<out java.util.Locale>
            public/*package*/ fun getFieldName(/*0*/ p0: kotlin.Int): kotlin.String?
            public open fun getInstance(): java.util.Calendar
            public open fun getInstance(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone]): java.util.Calendar
            public open fun getInstance(/*0*/ p0: [ERROR : Unresolved java classifier: TimeZone], /*1*/ p1: java.util.Locale): java.util.Calendar
            public open fun getInstance(/*0*/ p0: java.util.Locale): java.util.Calendar
            public/*package*/ fun isFieldSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
            
            package java.util.Calendar.CalendarAccessControlContext {
            }
        }
        
        package java.util.Collections {
            public val EMPTY_LIST: kotlin.List<kotlin.Any?>
            public val EMPTY_MAP: kotlin.Map<out kotlin.Any?, kotlin.Any?>
            public val EMPTY_SET: kotlin.Set<kotlin.Any?>
            private /*synthesized*/ fun SelfComparable(/*0*/ function: (java.util.Collections.SelfComparable) -> kotlin.Int): java.util.Collections.SelfComparable
            public open fun </*0*/ T> addAll(/*0*/ c: kotlin.MutableCollection<in T>, /*1*/ vararg elements: T /*kotlin.Array<T>*/): kotlin.Boolean
            public open fun </*0*/ T> asLifoQueue(/*0*/ deque: [ERROR : Unresolved java classifier: Deque<T>]): [ERROR : Unresolved java classifier: Queue<T>]
            public /*synthesized*/ fun </*0*/ T> binarySearch(/*0*/ list: kotlin.List<T>, /*1*/ key: T, /*2*/ c: (T, T) -> kotlin.Int): kotlin.Int
            public open fun </*0*/ T> binarySearch(/*0*/ list: kotlin.List<T>, /*1*/ key: T, /*2*/ c: java.util.Comparator<in T>): kotlin.Int
            public open fun </*0*/ T> binarySearch(/*0*/ list: kotlin.List<kotlin.Comparable<T>>, /*1*/ key: T): kotlin.Int
            public open fun </*0*/ E> checkedCollection(/*0*/ c: kotlin.Collection<E>, /*1*/ _type: java.lang.Class<E>): kotlin.MutableCollection<E>
            public open fun </*0*/ E> checkedList(/*0*/ list: kotlin.List<E>, /*1*/ _type: java.lang.Class<E>): kotlin.MutableList<E>
            public open fun </*0*/ K, /*1*/ V> checkedMap(/*0*/ m: kotlin.Map<K, V>, /*1*/ keyType: java.lang.Class<K>, /*2*/ valueType: java.lang.Class<V>): kotlin.MutableMap<K, V>
            public open fun </*0*/ E> checkedSet(/*0*/ s: kotlin.Set<E>, /*1*/ _type: java.lang.Class<E>): kotlin.MutableSet<E>
            public open fun </*0*/ K, /*1*/ V> checkedSortedMap(/*0*/ m: java.util.SortedMap<K, V>, /*1*/ keyType: java.lang.Class<K>, /*2*/ valueType: java.lang.Class<V>): java.util.SortedMap<K, V>
            public open fun </*0*/ E> checkedSortedSet(/*0*/ s: java.util.SortedSet<E>, /*1*/ _type: java.lang.Class<E>): java.util.SortedSet<E>
            public open fun </*0*/ T> copy(/*0*/ dest: kotlin.MutableList<in T>, /*1*/ src: kotlin.List<T>): kotlin.Unit
            public open fun disjoint(/*0*/ c1: kotlin.Collection<kotlin.Any?>, /*1*/ c2: kotlin.Collection<kotlin.Any?>): kotlin.Boolean
            public fun </*0*/ T> emptyList(): kotlin.List<T>
            public fun </*0*/ K, /*1*/ V> emptyMap(): kotlin.Map<K, V>
            public fun </*0*/ T> emptySet(): kotlin.Set<T>
            public open fun </*0*/ T> enumeration(/*0*/ c: kotlin.Collection<T>): java.util.Enumeration<T>
            public open fun </*0*/ T> fill(/*0*/ list: kotlin.MutableList<in T>, /*1*/ obj: T): kotlin.Unit
            public open fun frequency(/*0*/ c: kotlin.Collection<kotlin.Any?>, /*1*/ o: kotlin.Any?): kotlin.Int
            public open fun indexOfSubList(/*0*/ source: kotlin.List<kotlin.Any?>, /*1*/ target: kotlin.List<kotlin.Any?>): kotlin.Int
            public open fun lastIndexOfSubList(/*0*/ source: kotlin.List<kotlin.Any?>, /*1*/ target: kotlin.List<kotlin.Any?>): kotlin.Int
            public open fun </*0*/ T> list(/*0*/ e: java.util.Enumeration<T>): java.util.ArrayList<T>
            public open fun </*0*/ T : kotlin.Any> max(/*0*/ coll: kotlin.Collection<T>): T where T : kotlin.Comparable<T>
            public /*synthesized*/ fun </*0*/ T> max(/*0*/ coll: kotlin.Collection<T>, /*1*/ comp: (T, T) -> kotlin.Int): T
            public open fun </*0*/ T> max(/*0*/ coll: kotlin.Collection<T>, /*1*/ comp: java.util.Comparator<in T>): T
            public open fun </*0*/ T : kotlin.Any> min(/*0*/ coll: kotlin.Collection<T>): T where T : kotlin.Comparable<T>
            public /*synthesized*/ fun </*0*/ T> min(/*0*/ coll: kotlin.Collection<T>, /*1*/ comp: (T, T) -> kotlin.Int): T
            public open fun </*0*/ T> min(/*0*/ coll: kotlin.Collection<T>, /*1*/ comp: java.util.Comparator<in T>): T
            public open fun </*0*/ T> nCopies(/*0*/ p0: kotlin.Int, /*1*/ p1: T?): kotlin.MutableList<T>
            public open fun </*0*/ E> newSetFromMap(/*0*/ map: kotlin.Map<E, kotlin.Boolean>): kotlin.MutableSet<E>
            public open fun </*0*/ T> replaceAll(/*0*/ list: kotlin.MutableList<T>, /*1*/ oldVal: T, /*2*/ newVal: T): kotlin.Boolean
            public open fun reverse(/*0*/ list: kotlin.MutableList<out kotlin.Any?>): kotlin.Unit
            public open fun </*0*/ T> reverseOrder(): java.util.Comparator<T>
            public /*synthesized*/ fun </*0*/ T> reverseOrder(/*0*/ cmp: (T, T) -> kotlin.Int): java.util.Comparator<T>
            public open fun </*0*/ T> reverseOrder(/*0*/ cmp: java.util.Comparator<T>): java.util.Comparator<T>
            public open fun rotate(/*0*/ list: kotlin.MutableList<out kotlin.Any?>, /*1*/ distance: kotlin.Int): kotlin.Unit
            public open fun shuffle(/*0*/ list: kotlin.MutableList<out kotlin.Any?>): kotlin.Unit
            public open fun shuffle(/*0*/ list: kotlin.MutableList<out kotlin.Any?>, /*1*/ rnd: java.util.Random): kotlin.Unit
            public open fun </*0*/ T> singleton(/*0*/ o: T?): kotlin.Set<T>
            public open fun </*0*/ T> singletonList(/*0*/ o: T?): kotlin.List<T>
            public open fun </*0*/ K, /*1*/ V> singletonMap(/*0*/ key: K, /*1*/ value: V): kotlin.Map<K, V>
            public open fun </*0*/ T : kotlin.Comparable<T>> sort(/*0*/ list: kotlin.MutableList<T>): kotlin.Unit
            public /*synthesized*/ fun </*0*/ T> sort(/*0*/ list: kotlin.MutableList<T>, /*1*/ c: (T, T) -> kotlin.Int): kotlin.Unit
            public open fun </*0*/ T> sort(/*0*/ list: kotlin.MutableList<T>, /*1*/ c: java.util.Comparator<in T>): kotlin.Unit
            public open fun swap(/*0*/ list: kotlin.MutableList<out kotlin.Any?>, /*1*/ i: kotlin.Int, /*2*/ j: kotlin.Int): kotlin.Unit
            public open fun </*0*/ T> synchronizedCollection(/*0*/ c: kotlin.Collection<T>): kotlin.MutableCollection<T>
            public/*package*/ open fun </*0*/ T> synchronizedCollection(/*0*/ p0: kotlin.Collection<T>?, /*1*/ p1: kotlin.Any?): kotlin.MutableCollection<T>?
            public open fun </*0*/ T> synchronizedList(/*0*/ list: kotlin.List<T>): kotlin.MutableList<T>
            public/*package*/ open fun </*0*/ T> synchronizedList(/*0*/ p0: kotlin.List<T>?, /*1*/ p1: kotlin.Any?): kotlin.MutableList<T>?
            public open fun </*0*/ K, /*1*/ V> synchronizedMap(/*0*/ m: kotlin.Map<K, V>): kotlin.MutableMap<K, V>
            public open fun </*0*/ T> synchronizedSet(/*0*/ s: kotlin.Set<T>): kotlin.MutableSet<T>
            public/*package*/ open fun </*0*/ T> synchronizedSet(/*0*/ p0: kotlin.Set<T>?, /*1*/ p1: kotlin.Any?): kotlin.MutableSet<T>?
            public open fun </*0*/ K, /*1*/ V> synchronizedSortedMap(/*0*/ m: java.util.SortedMap<K, V>): java.util.SortedMap<K, V>
            public open fun </*0*/ T> synchronizedSortedSet(/*0*/ s: java.util.SortedSet<T>): java.util.SortedSet<T>
            public open fun </*0*/ T> unmodifiableCollection(/*0*/ c: kotlin.Collection<T>): kotlin.MutableCollection<T>
            public open fun </*0*/ T> unmodifiableList(/*0*/ list: kotlin.List<T>): kotlin.MutableList<T>
            public open fun </*0*/ K, /*1*/ V> unmodifiableMap(/*0*/ m: kotlin.Map<out K, V>): kotlin.MutableMap<K, V>
            public open fun </*0*/ T> unmodifiableSet(/*0*/ s: kotlin.Set<T>): kotlin.MutableSet<T>
            public open fun </*0*/ K, /*1*/ V> unmodifiableSortedMap(/*0*/ m: java.util.SortedMap<K, out V>): java.util.SortedMap<K, V>
            public open fun </*0*/ T> unmodifiableSortedSet(/*0*/ s: java.util.SortedSet<T>): java.util.SortedSet<T>
            
            package java.util.Collections.AsLIFOQueue {
            }
            
            package java.util.Collections.CheckedCollection {
            }
            
            package java.util.Collections.CheckedList {
                public/*package*/ val serialVersionUID: kotlin.Long = 65247728283967356.toLong()
            }
            
            package java.util.Collections.CheckedMap {
            }
            
            package java.util.Collections.CheckedRandomAccessList {
            }
            
            package java.util.Collections.CheckedSet {
            }
            
            package java.util.Collections.CheckedSortedMap {
            }
            
            package java.util.Collections.CheckedSortedSet {
            }
            
            package java.util.Collections.CopiesList {
                public/*package*/ val serialVersionUID: kotlin.Long = 2739099268398711800.toLong()
            }
            
            package java.util.Collections.EmptyList {
            }
            
            package java.util.Collections.EmptyMap {
            }
            
            package java.util.Collections.EmptySet {
            }
            
            package java.util.Collections.ReverseComparator {
            }
            
            package java.util.Collections.ReverseComparator2 {
            }
            
            package java.util.Collections.SetFromMap {
            }
            
            package java.util.Collections.SingletonList {
                public/*package*/ val serialVersionUID: kotlin.Long = 3093736618740652951.toLong()
            }
            
            package java.util.Collections.SingletonMap {
            }
            
            package java.util.Collections.SingletonSet {
            }
            
            package java.util.Collections.SynchronizedCollection {
            }
            
            package java.util.Collections.SynchronizedList {
                public/*package*/ val serialVersionUID: kotlin.Long = -7754090372962971524.toLong()
            }
            
            package java.util.Collections.SynchronizedMap {
            }
            
            package java.util.Collections.SynchronizedRandomAccessList {
                public/*package*/ val serialVersionUID: kotlin.Long = 1530674583602358482.toLong()
            }
            
            package java.util.Collections.SynchronizedSet {
            }
            
            package java.util.Collections.SynchronizedSortedMap {
            }
            
            package java.util.Collections.SynchronizedSortedSet {
            }
            
            package java.util.Collections.UnmodifiableCollection {
            }
            
            package java.util.Collections.UnmodifiableList {
                public/*package*/ val serialVersionUID: kotlin.Long = -283967356065247728.toLong()
            }
            
            package java.util.Collections.UnmodifiableMap {
                
                package java.util.Collections.UnmodifiableMap.UnmodifiableEntrySet {
                }
            }
            
            package java.util.Collections.UnmodifiableRandomAccessList {
            }
            
            package java.util.Collections.UnmodifiableSet {
            }
            
            package java.util.Collections.UnmodifiableSortedMap {
            }
            
            package java.util.Collections.UnmodifiableSortedSet {
            }
        }
        
        package java.util.Date {
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun UTC(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int, /*4*/ p4: kotlin.Int, /*5*/ p5: kotlin.Int): kotlin.Long
            public/*package*/ fun getMillisOf(/*0*/ p0: java.util.Date?): kotlin.Long
            kotlin.deprecated(value = "Deprecated in Java": kotlin.String) public open fun parse(/*0*/ p0: kotlin.String): kotlin.Long
        }
        
        package java.util.GregorianCalendar {
            public val AD: kotlin.Int = 1
            public val BC: kotlin.Int = 0
            public/*package*/ val BCE: kotlin.Int = 0
            public/*package*/ val CE: kotlin.Int = 1
            public/*package*/ val DEFAULT_GREGORIAN_CUTOVER: kotlin.Long = -12219292800000.toLong()
            public/*package*/ val LEAP_MONTH_LENGTH: kotlin.IntArray
            public/*package*/ val LEAST_MAX_VALUES: kotlin.IntArray
            public/*package*/ val MAX_VALUES: kotlin.IntArray
            public/*package*/ val MIN_VALUES: kotlin.IntArray
            public/*package*/ val MONTH_LENGTH: kotlin.IntArray
            public/*package*/ val serialVersionUID: kotlin.Long = -8125100834729963327.toLong()
        }
        
        package java.util.HashMap {
            public/*package*/ val DEFAULT_INITIAL_CAPACITY: kotlin.Int = 16
            public/*package*/ val DEFAULT_LOAD_FACTOR: kotlin.Float = 0.75.toFloat()
            public/*package*/ val MAXIMUM_CAPACITY: kotlin.Int = 1073741824
            public/*package*/ open fun hash(/*0*/ p0: kotlin.Int): kotlin.Int
            public/*package*/ open fun indexFor(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
        }
        
        package java.util.HashSet {
            public/*package*/ val serialVersionUID: kotlin.Long = -5024744406713321676.toLong()
        }
        
        package java.util.IdentityHashMap {
        }
        
        package java.util.Locale {
            public val CANADA: java.util.Locale
            public val CANADA_FRENCH: java.util.Locale
            public val CHINA: java.util.Locale
            public val CHINESE: java.util.Locale
            public val ENGLISH: java.util.Locale
            public val FRANCE: java.util.Locale
            public val FRENCH: java.util.Locale
            public val GERMAN: java.util.Locale
            public val GERMANY: java.util.Locale
            public val ITALIAN: java.util.Locale
            public val ITALY: java.util.Locale
            public val JAPAN: java.util.Locale
            public val JAPANESE: java.util.Locale
            public val KOREA: java.util.Locale
            public val KOREAN: java.util.Locale
            public val PRC: java.util.Locale
            public val ROOT: java.util.Locale
            public val SIMPLIFIED_CHINESE: java.util.Locale
            public val TAIWAN: java.util.Locale
            public val TRADITIONAL_CHINESE: java.util.Locale
            public val UK: java.util.Locale
            public val US: java.util.Locale
            public/*package*/ val serialVersionUID: kotlin.Long = 9149081749638150636.toLong()
            public open fun getAvailableLocales(): kotlin.Array<out java.util.Locale>
            public open fun getDefault(): java.util.Locale
            public open fun getISOCountries(): kotlin.Array<out kotlin.String>
            public open fun getISOLanguages(): kotlin.Array<out kotlin.String>
            public/*package*/ open fun getInstance(/*0*/ p0: kotlin.String?, /*1*/ p1: kotlin.String?, /*2*/ p2: kotlin.String?): java.util.Locale?
            public open fun setDefault(/*0*/ p0: java.util.Locale): kotlin.Unit
            
            package java.util.Locale.LocaleNameGetter {
            }
        }
        
        package java.util.Properties {
        }
        
        package java.util.Random {
            public/*package*/ val serialVersionUID: kotlin.Long = 3905348978240129619.toLong()
        }
        
        package java.util.TreeMap {
            public/*package*/ open fun </*0*/ K, /*1*/ V> exportEntry(/*0*/ p0: java.util.TreeMap.Entry<K, V>?): kotlin.MutableMap.MutableEntry<K, V>?
            public/*package*/ open fun </*0*/ K> key(/*0*/ p0: java.util.TreeMap.Entry<K, out kotlin.Any?>?): K?
            public/*package*/ open fun </*0*/ K, /*1*/ V> keyOrNull(/*0*/ p0: java.util.TreeMap.Entry<K, V>?): K?
            public/*package*/ open fun </*0*/ K, /*1*/ V> predecessor(/*0*/ p0: java.util.TreeMap.Entry<K, V>?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ open fun </*0*/ K, /*1*/ V> successor(/*0*/ p0: java.util.TreeMap.Entry<K, V>?): java.util.TreeMap.Entry<K, V>?
            public/*package*/ fun valEquals(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Any?): kotlin.Boolean
            
            package java.util.TreeMap.AscendingSubMap {
            }
            
            package java.util.TreeMap.DescendingSubMap {
            }
        }
        
        package java.util.concurrent {
            public /*synthesized*/ fun </*0*/ V> Callable(/*0*/ function: () -> V?): java.util.concurrent.Callable<V>
            
            public trait Callable</*0*/ V> : java.lang.Object {
                public abstract fun call(): V?
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
            }
            
            public abstract enum class TimeUnit : kotlin.Enum<java.util.concurrent.TimeUnit> {
                private constructor TimeUnit()
                public open fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                public/*package*/ abstract fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                public open fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                public open fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                public open fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                public open fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                public open fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                
                public class object <class-object-for-TimeUnit> {
                    private constructor <class-object-for-TimeUnit>()
                    public final /*synthesized*/ fun valueOf(/*0*/ value: kotlin.String): java.util.concurrent.TimeUnit
                    public final /*synthesized*/ fun values(): kotlin.Array<java.util.concurrent.TimeUnit>
                }
                
                public enum entry DAYS : java.util.concurrent.TimeUnit {
                    private constructor DAYS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-DAYS> : java.util.concurrent.TimeUnit.DAYS {
                        private constructor <class-object-for-DAYS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry HOURS : java.util.concurrent.TimeUnit {
                    private constructor HOURS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-HOURS> : java.util.concurrent.TimeUnit.HOURS {
                        private constructor <class-object-for-HOURS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry MICROSECONDS : java.util.concurrent.TimeUnit {
                    private constructor MICROSECONDS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-MICROSECONDS> : java.util.concurrent.TimeUnit.MICROSECONDS {
                        private constructor <class-object-for-MICROSECONDS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry MILLISECONDS : java.util.concurrent.TimeUnit {
                    private constructor MILLISECONDS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-MILLISECONDS> : java.util.concurrent.TimeUnit.MILLISECONDS {
                        private constructor <class-object-for-MILLISECONDS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry MINUTES : java.util.concurrent.TimeUnit {
                    private constructor MINUTES()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-MINUTES> : java.util.concurrent.TimeUnit.MINUTES {
                        private constructor <class-object-for-MINUTES>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry NANOSECONDS : java.util.concurrent.TimeUnit {
                    private constructor NANOSECONDS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-NANOSECONDS> : java.util.concurrent.TimeUnit.NANOSECONDS {
                        private constructor <class-object-for-NANOSECONDS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
                
                public enum entry SECONDS : java.util.concurrent.TimeUnit {
                    private constructor SECONDS()
                    public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    
                    public class object <class-object-for-SECONDS> : java.util.concurrent.TimeUnit.SECONDS {
                        private constructor <class-object-for-SECONDS>()
                        public open override /*1*/ /*fake_override*/ fun convert(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        public/*package*/ abstract override /*1*/ /*fake_override*/ fun excessNanos(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun name(): kotlin.String
                        public final override /*1*/ /*fake_override*/ fun ordinal(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun sleep(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedJoin(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun timedWait(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toDays(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toHours(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMicros(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMillis(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toMinutes(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toSeconds(/*0*/ p0: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                    }
                }
            }
            
            package java.util.concurrent.TimeUnit {
                public/*package*/ val C0: kotlin.Long = 1.toLong()
                public/*package*/ val C1: kotlin.Long = 1000.toLong()
                public/*package*/ val C2: kotlin.Long = 1000000.toLong()
                public/*package*/ val C3: kotlin.Long = 1000000000.toLong()
                public/*package*/ val C4: kotlin.Long = 60000000000.toLong()
                public/*package*/ val C5: kotlin.Long = 3600000000000.toLong()
                public/*package*/ val C6: kotlin.Long = 86400000000000.toLong()
                public/*package*/ val MAX: kotlin.Long = 9223372036854775807.toLong()
                public/*package*/ open fun x(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Long
            }
            
            package java.util.concurrent.atomic {
                
                public open class AtomicBoolean : java.io.Serializable {
                    public constructor AtomicBoolean()
                    public constructor AtomicBoolean(/*0*/ p0: kotlin.Boolean)
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final fun get(): kotlin.Boolean
                    public final fun getAndSet(/*0*/ p0: kotlin.Boolean): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun lazySet(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Boolean): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open fun weakCompareAndSet(/*0*/ p0: kotlin.Boolean, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                }
                
                public open class AtomicInteger : kotlin.Number, java.io.Serializable {
                    public constructor AtomicInteger()
                    public constructor AtomicInteger(/*0*/ p0: kotlin.Int)
                    public final fun addAndGet(/*0*/ p0: kotlin.Int): kotlin.Int
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                    public final fun decrementAndGet(): kotlin.Int
                    public open fun doubleValue(): kotlin.Double
                    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public open fun floatValue(): kotlin.Float
                    public final fun get(): kotlin.Int
                    public final fun getAndAdd(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun getAndDecrement(): kotlin.Int
                    public final fun getAndIncrement(): kotlin.Int
                    public final fun getAndSet(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun incrementAndGet(): kotlin.Int
                    public open fun intValue(): kotlin.Int
                    public final fun lazySet(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public open fun longValue(): kotlin.Long
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public open override /*2*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                }
                
                public open class AtomicIntegerArray : java.io.Serializable {
                    public constructor AtomicIntegerArray(/*0*/ p0: kotlin.Int)
                    public constructor AtomicIntegerArray(/*0*/ p0: kotlin.IntArray)
                    public final fun addAndGet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                    public final fun decrementAndGet(/*0*/ p0: kotlin.Int): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final fun get(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun getAndAdd(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
                    public final fun getAndDecrement(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun getAndIncrement(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun getAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun incrementAndGet(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun lazySet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun length(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                }
                
                public abstract class AtomicIntegerFieldUpdater</*0*/ T> : java.lang.Object {
                    protected/*protected and package*/ constructor AtomicIntegerFieldUpdater</*0*/ T>()
                    public open fun addAndGet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public abstract fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                    public open fun decrementAndGet(/*0*/ p0: T?): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public abstract fun get(/*0*/ p0: T): kotlin.Int
                    public open fun getAndAdd(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                    public open fun getAndDecrement(/*0*/ p0: T?): kotlin.Int
                    public open fun getAndIncrement(/*0*/ p0: T?): kotlin.Int
                    public open fun getAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open fun incrementAndGet(/*0*/ p0: T?): kotlin.Int
                    public abstract fun lazySet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public abstract fun set(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public abstract fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                    
                    private open class AtomicIntegerFieldUpdaterImpl</*0*/ T> : java.util.concurrent.atomic.AtomicIntegerFieldUpdater<T> {
                        public/*package*/ constructor AtomicIntegerFieldUpdaterImpl</*0*/ T>(/*0*/ p0: java.lang.Class<T>?, /*1*/ p1: kotlin.String?)
                        public open override /*1*/ /*fake_override*/ fun addAndGet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun decrementAndGet(/*0*/ p0: T?): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ fun get(/*0*/ p0: T): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun getAndAdd(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun getAndDecrement(/*0*/ p0: T?): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun getAndIncrement(/*0*/ p0: T?): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun getAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun incrementAndGet(/*0*/ p0: T?): kotlin.Int
                        public open override /*1*/ fun lazySet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ fun set(/*0*/ p0: T?, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public open override /*1*/ fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Int, /*2*/ p2: kotlin.Int): kotlin.Boolean
                    }
                }
                
                public open class AtomicLong : kotlin.Number, java.io.Serializable {
                    public constructor AtomicLong()
                    public constructor AtomicLong(/*0*/ p0: kotlin.Long)
                    public final fun addAndGet(/*0*/ p0: kotlin.Long): kotlin.Long
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Boolean
                    public final fun decrementAndGet(): kotlin.Long
                    public open fun doubleValue(): kotlin.Double
                    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public open fun floatValue(): kotlin.Float
                    public final fun get(): kotlin.Long
                    public final fun getAndAdd(/*0*/ p0: kotlin.Long): kotlin.Long
                    public final fun getAndDecrement(): kotlin.Long
                    public final fun getAndIncrement(): kotlin.Long
                    public final fun getAndSet(/*0*/ p0: kotlin.Long): kotlin.Long
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun incrementAndGet(): kotlin.Long
                    public open fun intValue(): kotlin.Int
                    public final fun lazySet(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open fun longValue(): kotlin.Long
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open override /*2*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Long): kotlin.Boolean
                }
                
                public open class AtomicLongArray : java.io.Serializable {
                    public constructor AtomicLongArray(/*0*/ p0: kotlin.Int)
                    public constructor AtomicLongArray(/*0*/ p0: kotlin.LongArray)
                    public open fun addAndGet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Long
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                    public final fun decrementAndGet(/*0*/ p0: kotlin.Int): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final fun get(/*0*/ p0: kotlin.Int): kotlin.Long
                    public final fun getAndAdd(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Long
                    public final fun getAndDecrement(/*0*/ p0: kotlin.Int): kotlin.Long
                    public final fun getAndIncrement(/*0*/ p0: kotlin.Int): kotlin.Long
                    public final fun getAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Long
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun incrementAndGet(/*0*/ p0: kotlin.Int): kotlin.Long
                    public final fun lazySet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public final fun length(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                }
                
                public abstract class AtomicLongFieldUpdater</*0*/ T> : java.lang.Object {
                    protected/*protected and package*/ constructor AtomicLongFieldUpdater</*0*/ T>()
                    public open fun addAndGet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public abstract fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                    public open fun decrementAndGet(/*0*/ p0: T?): kotlin.Long
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public abstract fun get(/*0*/ p0: T): kotlin.Long
                    public open fun getAndAdd(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                    public open fun getAndDecrement(/*0*/ p0: T?): kotlin.Long
                    public open fun getAndIncrement(/*0*/ p0: T?): kotlin.Long
                    public open fun getAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open fun incrementAndGet(/*0*/ p0: T?): kotlin.Long
                    public abstract fun lazySet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public abstract fun set(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public abstract fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                    
                    private open class CASUpdater</*0*/ T> : java.util.concurrent.atomic.AtomicLongFieldUpdater<T> {
                        public/*package*/ constructor CASUpdater</*0*/ T>(/*0*/ p0: java.lang.Class<T>?, /*1*/ p1: kotlin.String?)
                        public open override /*1*/ /*fake_override*/ fun addAndGet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun decrementAndGet(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public open override /*1*/ fun get(/*0*/ p0: T): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndAdd(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndDecrement(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndIncrement(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun incrementAndGet(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ fun lazySet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ fun set(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public open override /*1*/ fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                    }
                    
                    private open class LockedUpdater</*0*/ T> : java.util.concurrent.atomic.AtomicLongFieldUpdater<T> {
                        public/*package*/ constructor LockedUpdater</*0*/ T>(/*0*/ p0: java.lang.Class<T>?, /*1*/ p1: kotlin.String?)
                        public open override /*1*/ /*fake_override*/ fun addAndGet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun decrementAndGet(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public open override /*1*/ fun get(/*0*/ p0: T): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndAdd(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndDecrement(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndIncrement(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ /*fake_override*/ fun getAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Long
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ /*fake_override*/ fun incrementAndGet(/*0*/ p0: T?): kotlin.Long
                        public open override /*1*/ fun lazySet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ fun set(/*0*/ p0: T?, /*1*/ p1: kotlin.Long): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public open override /*1*/ fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: kotlin.Long, /*2*/ p2: kotlin.Long): kotlin.Boolean
                    }
                }
                
                public open class AtomicMarkableReference</*0*/ V> : java.lang.Object {
                    public constructor AtomicMarkableReference</*0*/ V>(/*0*/ p0: V?, /*1*/ p1: kotlin.Boolean)
                    public open fun attemptMark(/*0*/ p0: V?, /*1*/ p1: kotlin.Boolean): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open fun compareAndSet(/*0*/ p0: V?, /*1*/ p1: V?, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Boolean): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public open fun get(/*0*/ p0: kotlin.BooleanArray): V?
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open fun getReference(): V?
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public open fun isMarked(): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open fun set(/*0*/ p0: V?, /*1*/ p1: kotlin.Boolean): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open fun weakCompareAndSet(/*0*/ p0: V?, /*1*/ p1: V?, /*2*/ p2: kotlin.Boolean, /*3*/ p3: kotlin.Boolean): kotlin.Boolean
                    
                    private open class ReferenceBooleanPair</*0*/ T> : java.lang.Object {
                        public/*package*/ constructor ReferenceBooleanPair</*0*/ T>(/*0*/ p0: T?, /*1*/ p1: kotlin.Boolean)
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                public open class AtomicReference</*0*/ V> : java.io.Serializable {
                    public constructor AtomicReference</*0*/ V>()
                    public constructor AtomicReference</*0*/ V>(/*0*/ p0: V?)
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: V?, /*1*/ p1: V?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final fun get(): V?
                    public final fun getAndSet(/*0*/ p0: V?): V?
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun lazySet(/*0*/ p0: V?): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: V?): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: V?, /*1*/ p1: V?): kotlin.Boolean
                }
                
                public open class AtomicReferenceArray</*0*/ E> : java.io.Serializable {
                    public constructor AtomicReferenceArray</*0*/ E>(/*0*/ p0: kotlin.Array<out E>)
                    public constructor AtomicReferenceArray</*0*/ E>(/*0*/ p0: kotlin.Int)
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public final fun compareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: E?, /*2*/ p2: E?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final fun get(/*0*/ p0: kotlin.Int): E?
                    public final fun getAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: E?): E?
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun lazySet(/*0*/ p0: kotlin.Int, /*1*/ p1: E?): kotlin.Unit
                    public final fun length(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun set(/*0*/ p0: kotlin.Int, /*1*/ p1: E?): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public final fun weakCompareAndSet(/*0*/ p0: kotlin.Int, /*1*/ p1: E?, /*2*/ p2: E?): kotlin.Boolean
                }
                
                public abstract class AtomicReferenceFieldUpdater</*0*/ T, /*1*/ V> : java.lang.Object {
                    protected/*protected and package*/ constructor AtomicReferenceFieldUpdater</*0*/ T, /*1*/ V>()
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public abstract fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: V?, /*2*/ p2: V?): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public abstract fun get(/*0*/ p0: T): V?
                    public open fun getAndSet(/*0*/ p0: T?, /*1*/ p1: V?): V?
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public abstract fun lazySet(/*0*/ p0: T?, /*1*/ p1: V?): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public abstract fun set(/*0*/ p0: T?, /*1*/ p1: V?): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public abstract fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: V?, /*2*/ p2: V?): kotlin.Boolean
                    
                    private final class AtomicReferenceFieldUpdaterImpl</*0*/ T, /*1*/ V> : java.util.concurrent.atomic.AtomicReferenceFieldUpdater<T, V> {
                        public/*package*/ constructor AtomicReferenceFieldUpdaterImpl</*0*/ T, /*1*/ V>(/*0*/ p0: java.lang.Class<T>?, /*1*/ p1: java.lang.Class<V>?, /*2*/ p2: kotlin.String?)
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ fun compareAndSet(/*0*/ p0: T?, /*1*/ p1: V?, /*2*/ p2: V?): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public open override /*1*/ fun get(/*0*/ p0: T): V?
                        public open override /*1*/ /*fake_override*/ fun getAndSet(/*0*/ p0: T?, /*1*/ p1: V?): V?
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ fun lazySet(/*0*/ p0: T?, /*1*/ p1: V?): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ fun set(/*0*/ p0: T?, /*1*/ p1: V?): kotlin.Unit
                        public/*package*/ open fun targetCheck(/*0*/ p0: T?): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public/*package*/ open fun updateCheck(/*0*/ p0: T?, /*1*/ p1: V?): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public open override /*1*/ fun weakCompareAndSet(/*0*/ p0: T?, /*1*/ p1: V?, /*2*/ p2: V?): kotlin.Boolean
                    }
                }
                
                public open class AtomicStampedReference</*0*/ V> : java.lang.Object {
                    public constructor AtomicStampedReference</*0*/ V>(/*0*/ p0: V?, /*1*/ p1: kotlin.Int)
                    public open fun attemptStamp(/*0*/ p0: V?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open fun compareAndSet(/*0*/ p0: V?, /*1*/ p1: V?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public open fun get(/*0*/ p0: kotlin.IntArray): V?
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open fun getReference(): V?
                    public open fun getStamp(): kotlin.Int
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open fun set(/*0*/ p0: V?, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open fun weakCompareAndSet(/*0*/ p0: V?, /*1*/ p1: V?, /*2*/ p2: kotlin.Int, /*3*/ p3: kotlin.Int): kotlin.Boolean
                    
                    private open class ReferenceIntegerPair</*0*/ T> : java.lang.Object {
                        public/*package*/ constructor ReferenceIntegerPair</*0*/ T>(/*0*/ p0: T?, /*1*/ p1: kotlin.Int)
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                package java.util.concurrent.atomic.AtomicBoolean {
                }
                
                package java.util.concurrent.atomic.AtomicInteger {
                }
                
                package java.util.concurrent.atomic.AtomicIntegerArray {
                }
                
                package java.util.concurrent.atomic.AtomicIntegerFieldUpdater {
                    public open fun </*0*/ U> newUpdater(/*0*/ p0: java.lang.Class<U>, /*1*/ p1: kotlin.String): java.util.concurrent.atomic.AtomicIntegerFieldUpdater<U>
                    
                    package java.util.concurrent.atomic.AtomicIntegerFieldUpdater.AtomicIntegerFieldUpdaterImpl {
                    }
                }
                
                package java.util.concurrent.atomic.AtomicLong {
                    public/*package*/ val VM_SUPPORTS_LONG_CAS: kotlin.Boolean
                }
                
                package java.util.concurrent.atomic.AtomicLongArray {
                }
                
                package java.util.concurrent.atomic.AtomicLongFieldUpdater {
                    public open fun </*0*/ U> newUpdater(/*0*/ p0: java.lang.Class<U>, /*1*/ p1: kotlin.String): java.util.concurrent.atomic.AtomicLongFieldUpdater<U>
                    
                    package java.util.concurrent.atomic.AtomicLongFieldUpdater.CASUpdater {
                    }
                    
                    package java.util.concurrent.atomic.AtomicLongFieldUpdater.LockedUpdater {
                    }
                }
                
                package java.util.concurrent.atomic.AtomicReference {
                }
                
                package java.util.concurrent.atomic.AtomicReferenceArray {
                }
                
                package java.util.concurrent.atomic.AtomicReferenceFieldUpdater {
                    public open fun </*0*/ U, /*1*/ W> newUpdater(/*0*/ p0: java.lang.Class<U>, /*1*/ p1: java.lang.Class<W>?, /*2*/ p2: kotlin.String): java.util.concurrent.atomic.AtomicReferenceFieldUpdater<U, W>
                    
                    package java.util.concurrent.atomic.AtomicReferenceFieldUpdater.AtomicReferenceFieldUpdaterImpl {
                    }
                }
            }
            
            package java.util.concurrent.locks {
                
                public abstract class AbstractQueuedSynchronizer : java.io.Serializable {
                    protected/*protected and package*/ constructor AbstractQueuedSynchronizer()
                    public final fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public final fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public/*package*/ final fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                    public final fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public final fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public/*package*/ final fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    protected/*protected and package*/ final fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public/*package*/ final fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    public/*package*/ final fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public final fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                    public final fun getFirstQueuedThread(): java.lang.Thread?
                    public final fun getQueueLength(): kotlin.Int
                    public final fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                    public final fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                    protected/*protected and package*/ final fun getState(): kotlin.Int
                    public final fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                    public final fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                    public final fun hasContended(): kotlin.Boolean
                    public final fun hasQueuedThreads(): kotlin.Boolean
                    public final fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public/*package*/ final fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    protected/*protected and package*/ open fun isHeldExclusively(): kotlin.Boolean
                    public/*package*/ final fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                    public final fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public final fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                    public final fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                    public final fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                    protected/*protected and package*/ final fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                    public open override /*1*/ fun toString(): kotlin.String
                    public/*package*/ final fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                    public/*package*/ final fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                    protected/*protected and package*/ open fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                    public final fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                    protected/*protected and package*/ open fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                    public final fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                    protected/*protected and package*/ open fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                    protected/*protected and package*/ open fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    
                    public open inner class ConditionObject : java.util.concurrent.locks.Condition, java.io.Serializable {
                        public constructor ConditionObject()
                        public final override /*1*/ fun await(): kotlin.Unit
                        public final override /*1*/ fun await(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Boolean
                        public final override /*1*/ fun awaitNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                        public final override /*1*/ fun awaitUninterruptibly(): kotlin.Unit
                        public final override /*1*/ fun awaitUntil(/*0*/ deadline: java.util.Date): kotlin.Boolean
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        protected/*protected and package*/ final fun getWaitQueueLength(): kotlin.Int
                        protected/*protected and package*/ final fun getWaitingThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final fun hasWaiters(): kotlin.Boolean
                        public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final fun isOwnedBy(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer?): kotlin.Boolean
                        public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ fun signal(): kotlin.Unit
                        public final override /*1*/ fun signalAll(): kotlin.Unit
                        public open override /*2*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                    
                    public/*package*/ final class Node : java.lang.Object {
                        public/*package*/ constructor Node()
                        public/*package*/ constructor Node(/*0*/ p0: java.lang.Thread?, /*1*/ p1: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?)
                        public/*package*/ constructor Node(/*0*/ p0: java.lang.Thread?, /*1*/ p1: kotlin.Int)
                        public/*package*/ final var next: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?
                        public/*package*/ final var nextWaiter: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?
                        public/*package*/ final var prev: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?
                        public/*package*/ final var thread: java.lang.Thread?
                        public/*package*/ final var waitStatus: kotlin.Int
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final fun isShared(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public/*package*/ final fun predecessor(): java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                public trait Condition : java.lang.Object {
                    public abstract fun await(): kotlin.Unit
                    public abstract fun await(/*0*/ p0: kotlin.Long, /*1*/ p1: java.util.concurrent.TimeUnit): kotlin.Boolean
                    public abstract fun awaitNanos(/*0*/ p0: kotlin.Long): kotlin.Long
                    public abstract fun awaitUninterruptibly(): kotlin.Unit
                    public abstract fun awaitUntil(/*0*/ deadline: java.util.Date): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public abstract fun signal(): kotlin.Unit
                    public abstract fun signalAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
                
                public trait Lock : java.lang.Object {
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public abstract fun lock(): kotlin.Unit
                    public abstract fun lockInterruptibly(): kotlin.Unit
                    public abstract fun newCondition(): java.util.concurrent.locks.Condition
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public abstract fun tryLock(): kotlin.Boolean
                    public abstract fun tryLock(/*0*/ time: kotlin.Long, /*1*/ unit: java.util.concurrent.TimeUnit): kotlin.Boolean
                    public abstract fun unlock(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
                
                public open class LockSupport : java.lang.Object {
                    private constructor LockSupport()
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                }
                
                public trait ReadWriteLock : java.lang.Object {
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public abstract fun readLock(): java.util.concurrent.locks.Lock
                    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                    public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public abstract fun writeLock(): java.util.concurrent.locks.Lock
                }
                
                public open class ReentrantLock : java.util.concurrent.locks.Lock, java.io.Serializable {
                    public constructor ReentrantLock()
                    public constructor ReentrantLock(/*0*/ p0: kotlin.Boolean)
                    protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    public open fun getHoldCount(): kotlin.Int
                    protected/*protected and package*/ open fun getOwner(): java.lang.Thread?
                    public final fun getQueueLength(): kotlin.Int
                    protected/*protected and package*/ open fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>?
                    public open fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.Int
                    protected/*protected and package*/ open fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.MutableCollection<java.lang.Thread>?
                    public final fun hasQueuedThread(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    public final fun hasQueuedThreads(): kotlin.Boolean
                    public open fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.Boolean
                    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun isFair(): kotlin.Boolean
                    public open fun isHeldByCurrentThread(): kotlin.Boolean
                    public open fun isLocked(): kotlin.Boolean
                    public open override /*1*/ fun lock(): kotlin.Unit
                    public open override /*1*/ fun lockInterruptibly(): kotlin.Unit
                    public open override /*1*/ fun newCondition(): java.util.concurrent.locks.Condition
                    public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*2*/ fun toString(): kotlin.String
                    public open override /*1*/ fun tryLock(): kotlin.Boolean
                    public open override /*1*/ fun tryLock(/*0*/ time: kotlin.Long, /*1*/ unit: java.util.concurrent.TimeUnit): kotlin.Boolean
                    public open override /*1*/ fun unlock(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    
                    public/*package*/ final class FairSync : java.util.concurrent.locks.ReentrantLock.Sync {
                        public/*package*/ constructor FairSync()
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getHoldCount(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isLocked(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ final override /*1*/ fun lock(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun nonfairTryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                    
                    public/*package*/ final class NonfairSync : java.util.concurrent.locks.ReentrantLock.Sync {
                        public/*package*/ constructor NonfairSync()
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getHoldCount(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isLocked(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ final override /*1*/ fun lock(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun nonfairTryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                    
                    public/*package*/ abstract class Sync : java.util.concurrent.locks.AbstractQueuedSynchronizer {
                        public/*package*/ constructor Sync()
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final fun getHoldCount(): kotlin.Int
                        public/*package*/ final fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final fun isLocked(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ abstract fun lock(): kotlin.Unit
                        public/*package*/ final fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public/*package*/ final fun nonfairTryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                public open class ReentrantReadWriteLock : java.util.concurrent.locks.ReadWriteLock, java.io.Serializable {
                    public constructor ReentrantReadWriteLock()
                    public constructor ReentrantReadWriteLock(/*0*/ p0: kotlin.Boolean)
                    protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                    public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                    protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                    protected/*protected and package*/ open fun getOwner(): java.lang.Thread?
                    public final fun getQueueLength(): kotlin.Int
                    protected/*protected and package*/ open fun getQueuedReaderThreads(): kotlin.MutableCollection<java.lang.Thread>?
                    protected/*protected and package*/ open fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>?
                    protected/*protected and package*/ open fun getQueuedWriterThreads(): kotlin.MutableCollection<java.lang.Thread>?
                    public open fun getReadHoldCount(): kotlin.Int
                    public open fun getReadLockCount(): kotlin.Int
                    public open fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.Int
                    protected/*protected and package*/ open fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.MutableCollection<java.lang.Thread>?
                    public open fun getWriteHoldCount(): kotlin.Int
                    public final fun hasQueuedThread(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    public final fun hasQueuedThreads(): kotlin.Boolean
                    public open fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.Condition): kotlin.Boolean
                    public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                    public final fun isFair(): kotlin.Boolean
                    public open fun isWriteLocked(): kotlin.Boolean
                    public open fun isWriteLockedByCurrentThread(): kotlin.Boolean
                    public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                    public open override /*1*/ fun readLock(): java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock
                    public open override /*2*/ fun toString(): kotlin.String
                    public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    public open override /*1*/ fun writeLock(): java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock
                    
                    public/*package*/ final class FairSync : java.util.concurrent.locks.ReentrantReadWriteLock.Sync {
                        public/*package*/ constructor FairSync()
                        public/*package*/ final override /*1*/ /*fake_override*/ var cachedHoldCounter: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                        public/*package*/ final override /*1*/ /*fake_override*/ var readHolds: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter?
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullTryAcquireShared(/*0*/ p0: java.lang.Thread?): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getReadHoldCount(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getReadLockCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getWriteHoldCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isWriteLocked(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public/*package*/ final override /*1*/ fun readerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun tryReadLock(): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun tryWriteLock(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ fun writerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    }
                    
                    public/*package*/ final class NonfairSync : java.util.concurrent.locks.ReentrantReadWriteLock.Sync {
                        public/*package*/ constructor NonfairSync()
                        public/*package*/ final override /*1*/ /*fake_override*/ var cachedHoldCounter: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                        public/*package*/ final override /*1*/ /*fake_override*/ var readHolds: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter?
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullTryAcquireShared(/*0*/ p0: java.lang.Thread?): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getReadHoldCount(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getReadLockCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final override /*1*/ /*fake_override*/ fun getWriteHoldCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isWriteLocked(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public/*package*/ final override /*1*/ fun readerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun tryReadLock(): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun tryWriteLock(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ fun writerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                    }
                    
                    public open class ReadLock : java.util.concurrent.locks.Lock, java.io.Serializable {
                        protected/*protected and package*/ constructor ReadLock(/*0*/ p0: java.util.concurrent.locks.ReentrantReadWriteLock)
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open override /*1*/ fun lock(): kotlin.Unit
                        public open override /*1*/ fun lockInterruptibly(): kotlin.Unit
                        public open override /*1*/ fun newCondition(): java.util.concurrent.locks.Condition
                        public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*2*/ fun toString(): kotlin.String
                        public open override /*1*/ fun tryLock(): kotlin.Boolean
                        public open override /*1*/ fun tryLock(/*0*/ time: kotlin.Long, /*1*/ unit: java.util.concurrent.TimeUnit): kotlin.Boolean
                        public open override /*1*/ fun unlock(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                    
                    public/*package*/ abstract class Sync : java.util.concurrent.locks.AbstractQueuedSynchronizer {
                        public/*package*/ constructor Sync()
                        public/*package*/ final var cachedHoldCounter: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                        public/*package*/ final var readHolds: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.ThreadLocalHoldCounter?
                        public final override /*1*/ /*fake_override*/ fun acquire(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun acquireQueued(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun acquireShared(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun acquireSharedInterruptibly(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun apparentlyFirstQueuedIsExclusive(): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun compareAndSetState(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Int): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullIsFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public/*package*/ final fun fullTryAcquireShared(/*0*/ p0: java.lang.Thread?): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun fullyRelease(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public/*package*/ final fun getCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getExclusiveQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public final override /*1*/ /*fake_override*/ fun getFirstQueuedThread(): java.lang.Thread?
                        public/*package*/ final fun getOwner(): java.lang.Thread?
                        public final override /*1*/ /*fake_override*/ fun getQueueLength(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final fun getReadHoldCount(): kotlin.Int
                        public/*package*/ final fun getReadLockCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getSharedQueuedThreads(): kotlin.MutableCollection<java.lang.Thread>
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun getState(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitQueueLength(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun getWaitingThreads(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.MutableCollection<java.lang.Thread>
                        public/*package*/ final fun getWriteHoldCount(): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun hasContended(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasQueuedThreads(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun hasWaiters(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isFirst(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun isHeldExclusively(): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun isOnSyncQueue(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun isQueued(/*0*/ p0: java.lang.Thread): kotlin.Boolean
                        public/*package*/ final fun isWriteLocked(): kotlin.Boolean
                        public/*package*/ final fun newCondition(): java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject?
                        public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun owns(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.ConditionObject): kotlin.Boolean
                        public/*package*/ abstract fun readerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun release(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun releaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ /*fake_override*/ fun setState(/*0*/ p0: kotlin.Int): kotlin.Unit
                        public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferAfterCancelledWait(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        public/*package*/ final override /*1*/ /*fake_override*/ fun transferForSignal(/*0*/ p0: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node?): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryAcquire(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun tryAcquireNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryAcquireShared(/*0*/ p0: kotlin.Int): kotlin.Int
                        public final override /*1*/ /*fake_override*/ fun tryAcquireSharedNanos(/*0*/ p0: kotlin.Int, /*1*/ p1: kotlin.Long): kotlin.Boolean
                        public/*package*/ final fun tryReadLock(): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryRelease(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        protected/*protected and package*/ final override /*1*/ fun tryReleaseShared(/*0*/ p0: kotlin.Int): kotlin.Boolean
                        public/*package*/ final fun tryWriteLock(): kotlin.Boolean
                        public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        public/*package*/ abstract fun writerShouldBlock(/*0*/ p0: java.lang.Thread?): kotlin.Boolean
                        
                        public/*package*/ final class HoldCounter : java.lang.Object {
                            public/*package*/ constructor HoldCounter()
                            public/*package*/ final var count: kotlin.Int
                            public/*package*/ final val tid: kotlin.Long
                            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                            public/*package*/ open fun tryDecrement(): kotlin.Int
                            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        }
                        
                        public/*package*/ final class ThreadLocalHoldCounter : java.lang.ThreadLocal<java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter> {
                            public/*package*/ constructor ThreadLocalHoldCounter()
                            invisible_fake abstract override /*1*/ /*fake_override*/ fun childValue(/*0*/ p0: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?): java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun clone(): kotlin.Any
                            invisible_fake abstract override /*1*/ /*fake_override*/ fun createMap(/*0*/ p0: java.lang.Thread?, /*1*/ p1: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                            protected/*protected and package*/ open override /*1*/ /*fake_override*/ fun finalize(): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun get(): java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                            public final override /*1*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                            invisible_fake abstract override /*1*/ /*fake_override*/ fun getMap(/*0*/ p0: java.lang.Thread?): java.lang.ThreadLocal.ThreadLocalMap?
                            public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
                            public open override /*1*/ fun initialValue(): java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?
                            public final override /*1*/ /*fake_override*/ fun notify(): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun remove(): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun set(/*0*/ p0: java.util.concurrent.locks.ReentrantReadWriteLock.Sync.HoldCounter?): kotlin.Unit
                            public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String?
                            public final override /*1*/ /*fake_override*/ fun wait(): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                            public final override /*1*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                        }
                    }
                    
                    public open class WriteLock : java.util.concurrent.locks.Lock, java.io.Serializable {
                        protected/*protected and package*/ constructor WriteLock(/*0*/ p0: java.util.concurrent.locks.ReentrantReadWriteLock)
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun clone(): kotlin.Any
                        public open override /*2*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
                        protected/*protected and package*/ open override /*2*/ /*fake_override*/ fun finalize(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun getClass(): java.lang.Class<out kotlin.Any?>
                        public open fun getHoldCount(): kotlin.Int
                        public open override /*2*/ /*fake_override*/ fun hashCode(): kotlin.Int
                        public open fun isHeldByCurrentThread(): kotlin.Boolean
                        public open override /*1*/ fun lock(): kotlin.Unit
                        public open override /*1*/ fun lockInterruptibly(): kotlin.Unit
                        public open override /*1*/ fun newCondition(): java.util.concurrent.locks.Condition
                        public final override /*2*/ /*fake_override*/ fun notify(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun notifyAll(): kotlin.Unit
                        public open override /*2*/ fun toString(): kotlin.String
                        public open override /*1*/ fun tryLock(): kotlin.Boolean
                        public open override /*1*/ fun tryLock(/*0*/ time: kotlin.Long, /*1*/ unit: java.util.concurrent.TimeUnit): kotlin.Boolean
                        public open override /*1*/ fun unlock(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long): kotlin.Unit
                        public final override /*2*/ /*fake_override*/ fun wait(/*0*/ p0: kotlin.Long, /*1*/ p1: kotlin.Int): kotlin.Unit
                    }
                }
                
                package java.util.concurrent.locks.AbstractQueuedSynchronizer {
                    public/*package*/ val spinForTimeoutThreshold: kotlin.Long = 1000.toLong()
                    
                    package java.util.concurrent.locks.AbstractQueuedSynchronizer.Node {
                        public/*package*/ val CANCELLED: kotlin.Int = 1
                        public/*package*/ val CONDITION: kotlin.Int = -2
                        public/*package*/ val EXCLUSIVE: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node
                        public/*package*/ val PROPAGATE: kotlin.Int = -3
                        public/*package*/ val SHARED: java.util.concurrent.locks.AbstractQueuedSynchronizer.Node
                        public/*package*/ val SIGNAL: kotlin.Int = -1
                    }
                }
                
                package java.util.concurrent.locks.LockSupport {
                    public open fun getBlocker(/*0*/ p0: java.lang.Thread): kotlin.Any?
                    public open fun park(): kotlin.Unit
                    public open fun park(/*0*/ p0: kotlin.Any?): kotlin.Unit
                    public open fun parkNanos(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open fun parkNanos(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open fun parkUntil(/*0*/ p0: kotlin.Any?, /*1*/ p1: kotlin.Long): kotlin.Unit
                    public open fun parkUntil(/*0*/ p0: kotlin.Long): kotlin.Unit
                    public open fun unpark(/*0*/ p0: java.lang.Thread?): kotlin.Unit
                }
                
                package java.util.concurrent.locks.ReentrantLock {
                    
                    package java.util.concurrent.locks.ReentrantLock.FairSync {
                    }
                    
                    package java.util.concurrent.locks.ReentrantLock.NonfairSync {
                    }
                    
                    package java.util.concurrent.locks.ReentrantLock.Sync {
                    }
                }
                
                package java.util.concurrent.locks.ReentrantReadWriteLock {
                    
                    package java.util.concurrent.locks.ReentrantReadWriteLock.FairSync {
                    }
                    
                    package java.util.concurrent.locks.ReentrantReadWriteLock.NonfairSync {
                    }
                    
                    package java.util.concurrent.locks.ReentrantReadWriteLock.ReadLock {
                    }
                    
                    package java.util.concurrent.locks.ReentrantReadWriteLock.Sync {
                        public/*package*/ val EXCLUSIVE_MASK: kotlin.Int = 65535
                        public/*package*/ val MAX_COUNT: kotlin.Int = 65535
                        public/*package*/ val SHARED_SHIFT: kotlin.Int = 16
                        public/*package*/ val SHARED_UNIT: kotlin.Int = 65536
                        public/*package*/ open fun exclusiveCount(/*0*/ p0: kotlin.Int): kotlin.Int
                        public/*package*/ open fun sharedCount(/*0*/ p0: kotlin.Int): kotlin.Int
                    }
                    
                    package java.util.concurrent.locks.ReentrantReadWriteLock.WriteLock {
                    }
                }
            }
        }
    }
}
